{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiKey = void 0;\nconst CryptoECKey_1 = require(\"./CryptoECKey\");\nconst CryptoHDKey_1 = require(\"./CryptoHDKey\");\nconst DataItem_1 = require(\"./lib/DataItem\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"threshold\"] = 1] = \"threshold\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n})(Keys || (Keys = {}));\nclass MultiKey extends RegistryItem_1.RegistryItem {\n  constructor(threshold, keys) {\n    super();\n    this.threshold = threshold;\n    this.keys = keys;\n    this.getThreshold = () => this.threshold;\n    this.getKeys = () => this.keys;\n    this.toDataItem = () => {\n      const map = {};\n      map[Keys.threshold] = this.threshold;\n      const keys = this.keys.map(k => {\n        const dataItem = k.toDataItem();\n        dataItem.setTag(k.getRegistryType().getTag());\n        return dataItem;\n      });\n      map[Keys.keys] = keys;\n      return new DataItem_1.DataItem(map);\n    };\n    this.getOutputDescriptorContent = () => {\n      return [this.getThreshold(), this.keys.map(k => k.getOutputDescriptorContent()).join(',')].join(',');\n    };\n  }\n}\nexports.MultiKey = MultiKey;\nMultiKey.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const threshold = map[Keys.threshold];\n  const _keys = map[Keys.keys];\n  const keys = [];\n  _keys.forEach(k => {\n    if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getTag()) {\n      keys.push(CryptoHDKey_1.CryptoHDKey.fromDataItem(k));\n    } else if (k.getTag() === RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getTag()) {\n      keys.push(CryptoECKey_1.CryptoECKey.fromDataItem(k));\n    }\n  });\n  return new MultiKey(threshold, keys);\n};","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA,IAAKA,IAGJ;AAHD,WAAKA,IAAI;EACPA,yCAAa;EACbA,+BAAI;AACN,CAAC,EAHIA,IAAI,KAAJA,IAAI;AAKT,MAAaC,QAAS,SAAQC,2BAAY;EAKxCC,YACUC,SAAiB,EACjBC,IAAmC;IAE3C,KAAK,EAAE;IAHC,cAAS,GAATD,SAAS;IACT,SAAI,GAAJC,IAAI;IAKd,iBAAY,GAAG,MAAM,IAAI,CAACD,SAAS;IACnC,YAAO,GAAG,MAAM,IAAI,CAACC,IAAI;IAEzB,eAAU,GAAG,MAAK;MAChB,MAAMC,GAAG,GAAgB,EAAE;MAC3BA,GAAG,CAACN,IAAI,CAACI,SAAS,CAAC,GAAG,IAAI,CAACA,SAAS;MACpC,MAAMC,IAAI,GAAe,IAAI,CAACA,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAI;QAC3C,MAAMC,QAAQ,GAAGD,CAAC,CAACE,UAAU,EAAE;QAC/BD,QAAQ,CAACE,MAAM,CAACH,CAAC,CAACI,eAAe,EAAE,CAACC,MAAM,EAAE,CAAC;QAC7C,OAAOJ,QAAQ;MACjB,CAAC,CAAC;MACFF,GAAG,CAACN,IAAI,CAACK,IAAI,CAAC,GAAGA,IAAI;MACrB,OAAO,IAAIQ,mBAAQ,CAACP,GAAG,CAAC;IAC1B,CAAC;IAED,+BAA0B,GAAG,MAAK;MAChC,OAAO,CAAC,IAAI,CAACQ,YAAY,EAAE,EACzB,IAAI,CAACT,IAAI,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACQ,0BAA0B,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAC7D,CAACA,IAAI,CAAC,GAAG,CAAC;IACb,CAAC;EArBD;;AAVFC;AAiCShB,qBAAY,GAAIO,QAAkB,IAAI;EAC3C,MAAMF,GAAG,GAAGE,QAAQ,CAACU,OAAO,EAAE;EAC9B,MAAMd,SAAS,GAAGE,GAAG,CAACN,IAAI,CAACI,SAAS,CAAC;EACrC,MAAMe,KAAK,GAAGb,GAAG,CAACN,IAAI,CAACK,IAAI,CAAe;EAC1C,MAAMA,IAAI,GAAkC,EAAE;EAC9Cc,KAAK,CAACC,OAAO,CAAEb,CAAC,IAAI;IAClB,IAAIA,CAAC,CAACK,MAAM,EAAE,KAAKS,4BAAa,CAACC,YAAY,CAACV,MAAM,EAAE,EAAE;MACtDP,IAAI,CAACkB,IAAI,CAACC,yBAAW,CAACC,YAAY,CAAClB,CAAC,CAAC,CAAC;KACvC,MAAM,IAAIA,CAAC,CAACK,MAAM,EAAE,KAAKS,4BAAa,CAACK,YAAY,CAACd,MAAM,EAAE,EAAE;MAC7DP,IAAI,CAACkB,IAAI,CAACI,yBAAW,CAACF,YAAY,CAAClB,CAAC,CAAC,CAAC;;EAE1C,CAAC,CAAC;EACF,OAAO,IAAIN,QAAQ,CAACG,SAAS,EAAEC,IAAI,CAAC;AACtC,CAAC","names":["Keys","MultiKey","RegistryItem_1","constructor","threshold","keys","map","k","dataItem","toDataItem","setTag","getRegistryType","getTag","DataItem_1","getThreshold","getOutputDescriptorContent","join","exports","getData","_keys","forEach","RegistryType_1","CRYPTO_HDKEY","push","CryptoHDKey_1","fromDataItem","CRYPTO_ECKEY","CryptoECKey_1"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@keystonehq/bc-ur-registry/src/MultiKey.ts"],"sourcesContent":["import { CryptoECKey } from './CryptoECKey';\nimport { CryptoHDKey } from './CryptoHDKey';\nimport { DataItem } from './lib/DataItem';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryType, RegistryTypes } from './RegistryType';\nimport { DataItemMap } from './types';\n\nenum Keys {\n  threshold = 1,\n  keys,\n}\n\nexport class MultiKey extends RegistryItem {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  getRegistryType: () => RegistryType;\n\n  constructor(\n    private threshold: number,\n    private keys: (CryptoECKey | CryptoHDKey)[],\n  ) {\n    super();\n  }\n\n  getThreshold = () => this.threshold;\n  getKeys = () => this.keys;\n\n  toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.threshold] = this.threshold;\n    const keys: DataItem[] = this.keys.map((k) => {\n      const dataItem = k.toDataItem();\n      dataItem.setTag(k.getRegistryType().getTag());\n      return dataItem;\n    });\n    map[Keys.keys] = keys;\n    return new DataItem(map);\n  };\n\n  getOutputDescriptorContent = () => {\n    return [this.getThreshold(),\n      this.keys.map(k => k.getOutputDescriptorContent()).join(','),\n    ].join(',');\n  };\n\n  static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const threshold = map[Keys.threshold];\n    const _keys = map[Keys.keys] as DataItem[];\n    const keys: (CryptoECKey | CryptoHDKey)[] = [];\n    _keys.forEach((k) => {\n      if (k.getTag() === RegistryTypes.CRYPTO_HDKEY.getTag()) {\n        keys.push(CryptoHDKey.fromDataItem(k));\n      } else if (k.getTag() === RegistryTypes.CRYPTO_ECKEY.getTag()) {\n        keys.push(CryptoECKey.fromDataItem(k));\n      }\n    });\n    return new MultiKey(threshold, keys);\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}