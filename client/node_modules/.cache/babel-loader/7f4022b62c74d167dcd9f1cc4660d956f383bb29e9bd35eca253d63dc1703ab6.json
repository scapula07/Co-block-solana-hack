{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URRegistryDecoder = void 0;\nconst bc_ur_1 = require(\"@ngraveio/bc-ur\");\nconst __1 = require(\"..\");\nconst RegistryType_1 = require(\"../RegistryType\");\nconst errors_1 = require(\"../errors\");\nclass URRegistryDecoder extends bc_ur_1.URDecoder {\n  constructor() {\n    super(...arguments);\n    this.resultRegistryType = () => {\n      const ur = this.resultUR();\n      switch (ur.type) {\n        case RegistryType_1.RegistryTypes.BYTES.getType():\n          return __1.Bytes.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_HDKEY.getType():\n          return __1.CryptoHDKey.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_KEYPATH.getType():\n          return __1.CryptoKeypath.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO.getType():\n          return __1.CryptoCoinInfo.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_ECKEY.getType():\n          return __1.CryptoECKey.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_OUTPUT.getType():\n          return __1.CryptoOutput.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_PSBT.getType():\n          return __1.CryptoPSBT.fromCBOR(ur.cbor);\n        case RegistryType_1.RegistryTypes.CRYPTO_ACCOUNT.getType():\n          return __1.CryptoAccount.fromCBOR(ur.cbor);\n        default:\n          throw new errors_1.UnknownURTypeError(`#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`);\n      }\n    };\n  }\n}\nexports.URRegistryDecoder = URRegistryDecoder;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAUA;AACA;AAEA,MAAaA,iBAAkB,SAAQC,iBAAS;EAAhDC;;IACS,uBAAkB,GAAG,MAAK;MAC/B,MAAMC,EAAE,GAAG,IAAI,CAACC,QAAQ,EAAE;MAC1B,QAAQD,EAAE,CAACE,IAAI;QACb,KAAKC,4BAAa,CAACC,KAAK,CAACC,OAAO,EAAE;UAChC,OAAOC,SAAK,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QAChC,KAAKL,4BAAa,CAACM,YAAY,CAACJ,OAAO,EAAE;UACvC,OAAOC,eAAW,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACtC,KAAKL,4BAAa,CAACO,cAAc,CAACL,OAAO,EAAE;UACzC,OAAOC,iBAAa,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACxC,KAAKL,4BAAa,CAACQ,gBAAgB,CAACN,OAAO,EAAE;UAC3C,OAAOC,kBAAc,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACzC,KAAKL,4BAAa,CAACS,YAAY,CAACP,OAAO,EAAE;UACvC,OAAOC,eAAW,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACtC,KAAKL,4BAAa,CAACU,aAAa,CAACR,OAAO,EAAE;UACxC,OAAOC,gBAAY,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACvC,KAAKL,4BAAa,CAACW,WAAW,CAACT,OAAO,EAAE;UACtC,OAAOC,cAAU,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACrC,KAAKL,4BAAa,CAACY,cAAc,CAACV,OAAO,EAAE;UACzC,OAAOC,iBAAa,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC;QACxC;UACE,MAAM,IAAIQ,2BAAkB,CAC1B,iEAAiEhB,EAAE,CAACE,IAAI,uBAAuB,CAChG;MAAC;IAER,CAAC;EACH;;AA1BAe","names":["URRegistryDecoder","bc_ur_1","constructor","ur","resultUR","type","RegistryType_1","BYTES","getType","__1","fromCBOR","cbor","CRYPTO_HDKEY","CRYPTO_KEYPATH","CRYPTO_COIN_INFO","CRYPTO_ECKEY","CRYPTO_OUTPUT","CRYPTO_PSBT","CRYPTO_ACCOUNT","errors_1","exports"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@keystonehq/bc-ur-registry/src/Decoder/index.ts"],"sourcesContent":["import { URDecoder } from '@ngraveio/bc-ur';\nimport {\n  Bytes,\n  CryptoAccount,\n  CryptoCoinInfo,\n  CryptoECKey,\n  CryptoHDKey,\n  CryptoKeypath,\n  CryptoOutput,\n  CryptoPSBT,\n} from '..';\nimport { RegistryTypes } from '../RegistryType';\nimport { UnknownURTypeError } from '../errors';\n\nexport class URRegistryDecoder extends URDecoder {\n  public resultRegistryType = () => {\n    const ur = this.resultUR();\n    switch (ur.type) {\n      case RegistryTypes.BYTES.getType():\n        return Bytes.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_HDKEY.getType():\n        return CryptoHDKey.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_KEYPATH.getType():\n        return CryptoKeypath.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_COIN_INFO.getType():\n        return CryptoCoinInfo.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_ECKEY.getType():\n        return CryptoECKey.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_OUTPUT.getType():\n        return CryptoOutput.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_PSBT.getType():\n        return CryptoPSBT.fromCBOR(ur.cbor);\n      case RegistryTypes.CRYPTO_ACCOUNT.getType():\n        return CryptoAccount.fromCBOR(ur.cbor);\n      default:\n        throw new UnknownURTypeError(\n          `#[ur-registry][Decoder][fn.resultRegistryType]: registry type ${ur.type} is not supported now`,\n        );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}