{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\nconst utils = __importStar(require(\"../../utils\"));\nclass MediaSection {\n  constructor(_ref) {\n    let {\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB = false\n    } = _ref;\n    this._mediaObject = {};\n    this._planB = planB;\n    if (iceParameters) {\n      this.setIceParameters(iceParameters);\n    }\n    if (iceCandidates) {\n      this._mediaObject.candidates = [];\n      for (const candidate of iceCandidates) {\n        const candidateObject = {};\n        // mediasoup does mandates rtcp-mux so candidates component is always\n        // RTP (1).\n        candidateObject.component = 1;\n        candidateObject.foundation = candidate.foundation;\n        candidateObject.ip = candidate.ip;\n        candidateObject.port = candidate.port;\n        candidateObject.priority = candidate.priority;\n        candidateObject.transport = candidate.protocol;\n        candidateObject.type = candidate.type;\n        if (candidate.tcpType) candidateObject.tcptype = candidate.tcpType;\n        this._mediaObject.candidates.push(candidateObject);\n      }\n      this._mediaObject.endOfCandidates = 'end-of-candidates';\n      this._mediaObject.iceOptions = 'renomination';\n    }\n    if (dtlsParameters) {\n      this.setDtlsRole(dtlsParameters.role);\n    }\n  }\n  get mid() {\n    return String(this._mediaObject.mid);\n  }\n  get closed() {\n    return this._mediaObject.port === 0;\n  }\n  getObject() {\n    return this._mediaObject;\n  }\n  setIceParameters(iceParameters) {\n    this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n    this._mediaObject.icePwd = iceParameters.password;\n  }\n  pause() {\n    this._mediaObject.direction = 'inactive';\n  }\n  disable() {\n    this.pause();\n    delete this._mediaObject.ext;\n    delete this._mediaObject.ssrcs;\n    delete this._mediaObject.ssrcGroups;\n    delete this._mediaObject.simulcast;\n    delete this._mediaObject.simulcast_03;\n    delete this._mediaObject.rids;\n    delete this._mediaObject.extmapAllowMixed;\n  }\n  close() {\n    this.disable();\n    this._mediaObject.port = 0;\n  }\n}\nexports.MediaSection = MediaSection;\nclass AnswerMediaSection extends MediaSection {\n  constructor(_ref2) {\n    let {\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      plainRtpParameters,\n      planB = false,\n      offerMediaObject,\n      offerRtpParameters,\n      answerRtpParameters,\n      codecOptions,\n      extmapAllowMixed = false\n    } = _ref2;\n    super({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB\n    });\n    this._mediaObject.mid = String(offerMediaObject.mid);\n    this._mediaObject.type = offerMediaObject.type;\n    this._mediaObject.protocol = offerMediaObject.protocol;\n    if (!plainRtpParameters) {\n      this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      this._mediaObject.port = 7;\n    } else {\n      this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      this._mediaObject.port = plainRtpParameters.port;\n    }\n    switch (offerMediaObject.type) {\n      case 'audio':\n      case 'video':\n        {\n          this._mediaObject.direction = 'recvonly';\n          this._mediaObject.rtp = [];\n          this._mediaObject.rtcpFb = [];\n          this._mediaObject.fmtp = [];\n          for (const codec of answerRtpParameters.codecs) {\n            const rtp = {\n              payload: codec.payloadType,\n              codec: getCodecName(codec),\n              rate: codec.clockRate\n            };\n            if (codec.channels > 1) rtp.encoding = codec.channels;\n            this._mediaObject.rtp.push(rtp);\n            const codecParameters = utils.clone(codec.parameters, {});\n            if (codecOptions) {\n              const {\n                opusStereo,\n                opusFec,\n                opusDtx,\n                opusMaxPlaybackRate,\n                opusMaxAverageBitrate,\n                opusPtime,\n                videoGoogleStartBitrate,\n                videoGoogleMaxBitrate,\n                videoGoogleMinBitrate\n              } = codecOptions;\n              const offerCodec = offerRtpParameters.codecs.find(c => c.payloadType === codec.payloadType);\n              switch (codec.mimeType.toLowerCase()) {\n                case 'audio/opus':\n                  {\n                    if (opusStereo !== undefined) {\n                      offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                      codecParameters.stereo = opusStereo ? 1 : 0;\n                    }\n                    if (opusFec !== undefined) {\n                      offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                      codecParameters.useinbandfec = opusFec ? 1 : 0;\n                    }\n                    if (opusDtx !== undefined) {\n                      offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                      codecParameters.usedtx = opusDtx ? 1 : 0;\n                    }\n                    if (opusMaxPlaybackRate !== undefined) {\n                      codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                    }\n                    if (opusMaxAverageBitrate !== undefined) {\n                      codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                    }\n                    if (opusPtime !== undefined) {\n                      offerCodec.parameters.ptime = opusPtime;\n                      codecParameters.ptime = opusPtime;\n                    }\n                    break;\n                  }\n                case 'video/vp8':\n                case 'video/vp9':\n                case 'video/h264':\n                case 'video/h265':\n                  {\n                    if (videoGoogleStartBitrate !== undefined) codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                    if (videoGoogleMaxBitrate !== undefined) codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                    if (videoGoogleMinBitrate !== undefined) codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                    break;\n                  }\n              }\n            }\n            const fmtp = {\n              payload: codec.payloadType,\n              config: ''\n            };\n            for (const key of Object.keys(codecParameters)) {\n              if (fmtp.config) fmtp.config += ';';\n              fmtp.config += `${key}=${codecParameters[key]}`;\n            }\n            if (fmtp.config) this._mediaObject.fmtp.push(fmtp);\n            for (const fb of codec.rtcpFeedback) {\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          }\n          this._mediaObject.payloads = answerRtpParameters.codecs.map(codec => codec.payloadType).join(' ');\n          this._mediaObject.ext = [];\n          for (const ext of answerRtpParameters.headerExtensions) {\n            // Don't add a header extension if not present in the offer.\n            const found = (offerMediaObject.ext || []).some(localExt => localExt.uri === ext.uri);\n            if (!found) continue;\n            this._mediaObject.ext.push({\n              uri: ext.uri,\n              value: ext.id\n            });\n          }\n          // Allow both 1 byte and 2 bytes length header extensions.\n          if (extmapAllowMixed && offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n            this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n          }\n          // Simulcast.\n          if (offerMediaObject.simulcast) {\n            this._mediaObject.simulcast = {\n              dir1: 'recv',\n              list1: offerMediaObject.simulcast.list1\n            };\n            this._mediaObject.rids = [];\n            for (const rid of offerMediaObject.rids || []) {\n              if (rid.direction !== 'send') continue;\n              this._mediaObject.rids.push({\n                id: rid.id,\n                direction: 'recv'\n              });\n            }\n          }\n          // Simulcast (draft version 03).\n          else if (offerMediaObject.simulcast_03) {\n            // eslint-disable-next-line camelcase\n            this._mediaObject.simulcast_03 = {\n              value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n            };\n            this._mediaObject.rids = [];\n            for (const rid of offerMediaObject.rids || []) {\n              if (rid.direction !== 'send') continue;\n              this._mediaObject.rids.push({\n                id: rid.id,\n                direction: 'recv'\n              });\n            }\n          }\n          this._mediaObject.rtcpMux = 'rtcp-mux';\n          this._mediaObject.rtcpRsize = 'rtcp-rsize';\n          if (this._planB && this._mediaObject.type === 'video') this._mediaObject.xGoogleFlag = 'conference';\n          break;\n        }\n      case 'application':\n        {\n          // New spec.\n          if (typeof offerMediaObject.sctpPort === 'number') {\n            this._mediaObject.payloads = 'webrtc-datachannel';\n            this._mediaObject.sctpPort = sctpParameters.port;\n            this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          }\n          // Old spec.\n          else if (offerMediaObject.sctpmap) {\n            this._mediaObject.payloads = sctpParameters.port;\n            this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n          break;\n        }\n    }\n  }\n  setDtlsRole(role) {\n    switch (role) {\n      case 'client':\n        this._mediaObject.setup = 'active';\n        break;\n      case 'server':\n        this._mediaObject.setup = 'passive';\n        break;\n      case 'auto':\n        this._mediaObject.setup = 'actpass';\n        break;\n    }\n  }\n  resume() {\n    this._mediaObject.direction = 'recvonly';\n  }\n}\nexports.AnswerMediaSection = AnswerMediaSection;\nclass OfferMediaSection extends MediaSection {\n  constructor(_ref3) {\n    let {\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      plainRtpParameters,\n      planB = false,\n      mid,\n      kind,\n      offerRtpParameters,\n      streamId,\n      trackId,\n      oldDataChannelSpec = false\n    } = _ref3;\n    super({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB\n    });\n    this._mediaObject.mid = String(mid);\n    this._mediaObject.type = kind;\n    if (!plainRtpParameters) {\n      this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      if (!sctpParameters) this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';else this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n      this._mediaObject.port = 7;\n    } else {\n      this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      this._mediaObject.protocol = 'RTP/AVP';\n      this._mediaObject.port = plainRtpParameters.port;\n    }\n    switch (kind) {\n      case 'audio':\n      case 'video':\n        {\n          this._mediaObject.direction = 'sendonly';\n          this._mediaObject.rtp = [];\n          this._mediaObject.rtcpFb = [];\n          this._mediaObject.fmtp = [];\n          if (!this._planB) this._mediaObject.msid = `${streamId || '-'} ${trackId}`;\n          for (const codec of offerRtpParameters.codecs) {\n            const rtp = {\n              payload: codec.payloadType,\n              codec: getCodecName(codec),\n              rate: codec.clockRate\n            };\n            if (codec.channels > 1) rtp.encoding = codec.channels;\n            this._mediaObject.rtp.push(rtp);\n            const fmtp = {\n              payload: codec.payloadType,\n              config: ''\n            };\n            for (const key of Object.keys(codec.parameters)) {\n              if (fmtp.config) fmtp.config += ';';\n              fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n            if (fmtp.config) this._mediaObject.fmtp.push(fmtp);\n            for (const fb of codec.rtcpFeedback) {\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          }\n          this._mediaObject.payloads = offerRtpParameters.codecs.map(codec => codec.payloadType).join(' ');\n          this._mediaObject.ext = [];\n          for (const ext of offerRtpParameters.headerExtensions) {\n            this._mediaObject.ext.push({\n              uri: ext.uri,\n              value: ext.id\n            });\n          }\n          this._mediaObject.rtcpMux = 'rtcp-mux';\n          this._mediaObject.rtcpRsize = 'rtcp-rsize';\n          const encoding = offerRtpParameters.encodings[0];\n          const ssrc = encoding.ssrc;\n          const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n          this._mediaObject.ssrcs = [];\n          this._mediaObject.ssrcGroups = [];\n          if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'cname',\n              value: offerRtpParameters.rtcp.cname\n            });\n          }\n          if (this._planB) {\n            this._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'msid',\n              value: `${streamId || '-'} ${trackId}`\n            });\n          }\n          if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n              this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n              });\n            }\n            if (this._planB) {\n              this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId || '-'} ${trackId}`\n              });\n            }\n            // Associate original and retransmission SSRCs.\n            this._mediaObject.ssrcGroups.push({\n              semantics: 'FID',\n              ssrcs: `${ssrc} ${rtxSsrc}`\n            });\n          }\n          break;\n        }\n      case 'application':\n        {\n          // New spec.\n          if (!oldDataChannelSpec) {\n            this._mediaObject.payloads = 'webrtc-datachannel';\n            this._mediaObject.sctpPort = sctpParameters.port;\n            this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          }\n          // Old spec.\n          else {\n            this._mediaObject.payloads = sctpParameters.port;\n            this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n          break;\n        }\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setDtlsRole(role) {\n    // Always 'actpass'.\n    this._mediaObject.setup = 'actpass';\n  }\n  resume() {\n    this._mediaObject.direction = 'sendonly';\n  }\n  planBReceive(_ref4) {\n    let {\n      offerRtpParameters,\n      streamId,\n      trackId\n    } = _ref4;\n    const encoding = offerRtpParameters.encodings[0];\n    const ssrc = encoding.ssrc;\n    const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n    const payloads = this._mediaObject.payloads.split(' ');\n    for (const codec of offerRtpParameters.codecs) {\n      if (payloads.includes(String(codec.payloadType))) {\n        continue;\n      }\n      const rtp = {\n        payload: codec.payloadType,\n        codec: getCodecName(codec),\n        rate: codec.clockRate\n      };\n      if (codec.channels > 1) rtp.encoding = codec.channels;\n      this._mediaObject.rtp.push(rtp);\n      const fmtp = {\n        payload: codec.payloadType,\n        config: ''\n      };\n      for (const key of Object.keys(codec.parameters)) {\n        if (fmtp.config) fmtp.config += ';';\n        fmtp.config += `${key}=${codec.parameters[key]}`;\n      }\n      if (fmtp.config) this._mediaObject.fmtp.push(fmtp);\n      for (const fb of codec.rtcpFeedback) {\n        this._mediaObject.rtcpFb.push({\n          payload: codec.payloadType,\n          type: fb.type,\n          subtype: fb.parameter\n        });\n      }\n    }\n    this._mediaObject.payloads += ` ${offerRtpParameters.codecs.filter(codec => !this._mediaObject.payloads.includes(codec.payloadType)).map(codec => codec.payloadType).join(' ')}`;\n    this._mediaObject.payloads = this._mediaObject.payloads.trim();\n    if (offerRtpParameters.rtcp.cname) {\n      this._mediaObject.ssrcs.push({\n        id: ssrc,\n        attribute: 'cname',\n        value: offerRtpParameters.rtcp.cname\n      });\n    }\n    this._mediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId || '-'} ${trackId}`\n    });\n    if (rtxSsrc) {\n      if (offerRtpParameters.rtcp.cname) {\n        this._mediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: 'cname',\n          value: offerRtpParameters.rtcp.cname\n        });\n      }\n      this._mediaObject.ssrcs.push({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: `${streamId || '-'} ${trackId}`\n      });\n      // Associate original and retransmission SSRCs.\n      this._mediaObject.ssrcGroups.push({\n        semantics: 'FID',\n        ssrcs: `${ssrc} ${rtxSsrc}`\n      });\n    }\n  }\n  planBStopReceiving(_ref5) {\n    let {\n      offerRtpParameters\n    } = _ref5;\n    const encoding = offerRtpParameters.encodings[0];\n    const ssrc = encoding.ssrc;\n    const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : undefined;\n    this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(s => s.id !== ssrc && s.id !== rtxSsrc);\n    if (rtxSsrc) {\n      this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(group => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n    }\n  }\n}\nexports.OfferMediaSection = OfferMediaSection;\nfunction getCodecName(codec) {\n  const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n  const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n  if (!mimeTypeMatch) throw new TypeError('invalid codec.mimeType');\n  return mimeTypeMatch[2];\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","OfferMediaSection","AnswerMediaSection","MediaSection","utils","require","constructor","iceParameters","iceCandidates","dtlsParameters","planB","_mediaObject","_planB","setIceParameters","candidates","candidate","candidateObject","component","foundation","ip","port","priority","transport","protocol","type","tcpType","tcptype","push","endOfCandidates","iceOptions","setDtlsRole","role","mid","String","closed","getObject","iceUfrag","usernameFragment","icePwd","password","pause","direction","disable","ext","ssrcs","ssrcGroups","simulcast","simulcast_03","rids","extmapAllowMixed","close","sctpParameters","plainRtpParameters","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","connection","version","ipVersion","rtp","rtcpFb","fmtp","codec","codecs","payload","payloadType","getCodecName","rate","clockRate","channels","encoding","codecParameters","clone","parameters","opusStereo","opusFec","opusDtx","opusMaxPlaybackRate","opusMaxAverageBitrate","opusPtime","videoGoogleStartBitrate","videoGoogleMaxBitrate","videoGoogleMinBitrate","offerCodec","find","c","mimeType","toLowerCase","stereo","useinbandfec","usedtx","maxplaybackrate","maxaveragebitrate","ptime","config","key","keys","fb","rtcpFeedback","subtype","parameter","payloads","map","join","headerExtensions","found","some","localExt","uri","id","dir1","list1","rid","replace","rtcpMux","rtcpRsize","xGoogleFlag","sctpPort","maxMessageSize","sctpmap","app","sctpmapNumber","setup","resume","kind","streamId","trackId","oldDataChannelSpec","msid","encodings","ssrc","rtxSsrc","rtx","rtcp","cname","attribute","semantics","planBReceive","split","includes","filter","trim","planBStopReceiving","s","group","MimeTypeRegex","RegExp","mimeTypeMatch","exec","TypeError"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\nconst utils = __importStar(require(\"../../utils\"));\nclass MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {\n        this._mediaObject = {};\n        this._planB = planB;\n        if (iceParameters) {\n            this.setIceParameters(iceParameters);\n        }\n        if (iceCandidates) {\n            this._mediaObject.candidates = [];\n            for (const candidate of iceCandidates) {\n                const candidateObject = {};\n                // mediasoup does mandates rtcp-mux so candidates component is always\n                // RTP (1).\n                candidateObject.component = 1;\n                candidateObject.foundation = candidate.foundation;\n                candidateObject.ip = candidate.ip;\n                candidateObject.port = candidate.port;\n                candidateObject.priority = candidate.priority;\n                candidateObject.transport = candidate.protocol;\n                candidateObject.type = candidate.type;\n                if (candidate.tcpType)\n                    candidateObject.tcptype = candidate.tcpType;\n                this._mediaObject.candidates.push(candidateObject);\n            }\n            this._mediaObject.endOfCandidates = 'end-of-candidates';\n            this._mediaObject.iceOptions = 'renomination';\n        }\n        if (dtlsParameters) {\n            this.setDtlsRole(dtlsParameters.role);\n        }\n    }\n    get mid() {\n        return String(this._mediaObject.mid);\n    }\n    get closed() {\n        return this._mediaObject.port === 0;\n    }\n    getObject() {\n        return this._mediaObject;\n    }\n    setIceParameters(iceParameters) {\n        this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n        this._mediaObject.icePwd = iceParameters.password;\n    }\n    pause() {\n        this._mediaObject.direction = 'inactive';\n    }\n    disable() {\n        this.pause();\n        delete this._mediaObject.ext;\n        delete this._mediaObject.ssrcs;\n        delete this._mediaObject.ssrcGroups;\n        delete this._mediaObject.simulcast;\n        delete this._mediaObject.simulcast_03;\n        delete this._mediaObject.rids;\n        delete this._mediaObject.extmapAllowMixed;\n    }\n    close() {\n        this.disable();\n        this._mediaObject.port = 0;\n    }\n}\nexports.MediaSection = MediaSection;\nclass AnswerMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(offerMediaObject.mid);\n        this._mediaObject.type = offerMediaObject.type;\n        this._mediaObject.protocol = offerMediaObject.protocol;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection =\n                {\n                    ip: plainRtpParameters.ip,\n                    version: plainRtpParameters.ipVersion\n                };\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (offerMediaObject.type) {\n            case 'audio':\n            case 'video':\n                {\n                    this._mediaObject.direction = 'recvonly';\n                    this._mediaObject.rtp = [];\n                    this._mediaObject.rtcpFb = [];\n                    this._mediaObject.fmtp = [];\n                    for (const codec of answerRtpParameters.codecs) {\n                        const rtp = {\n                            payload: codec.payloadType,\n                            codec: getCodecName(codec),\n                            rate: codec.clockRate\n                        };\n                        if (codec.channels > 1)\n                            rtp.encoding = codec.channels;\n                        this._mediaObject.rtp.push(rtp);\n                        const codecParameters = utils.clone(codec.parameters, {});\n                        if (codecOptions) {\n                            const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusMaxAverageBitrate, opusPtime, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;\n                            const offerCodec = offerRtpParameters.codecs\n                                .find((c) => (c.payloadType === codec.payloadType));\n                            switch (codec.mimeType.toLowerCase()) {\n                                case 'audio/opus':\n                                    {\n                                        if (opusStereo !== undefined) {\n                                            offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                                            codecParameters.stereo = opusStereo ? 1 : 0;\n                                        }\n                                        if (opusFec !== undefined) {\n                                            offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                                            codecParameters.useinbandfec = opusFec ? 1 : 0;\n                                        }\n                                        if (opusDtx !== undefined) {\n                                            offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                                            codecParameters.usedtx = opusDtx ? 1 : 0;\n                                        }\n                                        if (opusMaxPlaybackRate !== undefined) {\n                                            codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                                        }\n                                        if (opusMaxAverageBitrate !== undefined) {\n                                            codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                                        }\n                                        if (opusPtime !== undefined) {\n                                            offerCodec.parameters.ptime = opusPtime;\n                                            codecParameters.ptime = opusPtime;\n                                        }\n                                        break;\n                                    }\n                                case 'video/vp8':\n                                case 'video/vp9':\n                                case 'video/h264':\n                                case 'video/h265':\n                                    {\n                                        if (videoGoogleStartBitrate !== undefined)\n                                            codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                                        if (videoGoogleMaxBitrate !== undefined)\n                                            codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                                        if (videoGoogleMinBitrate !== undefined)\n                                            codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                                        break;\n                                    }\n                            }\n                        }\n                        const fmtp = {\n                            payload: codec.payloadType,\n                            config: ''\n                        };\n                        for (const key of Object.keys(codecParameters)) {\n                            if (fmtp.config)\n                                fmtp.config += ';';\n                            fmtp.config += `${key}=${codecParameters[key]}`;\n                        }\n                        if (fmtp.config)\n                            this._mediaObject.fmtp.push(fmtp);\n                        for (const fb of codec.rtcpFeedback) {\n                            this._mediaObject.rtcpFb.push({\n                                payload: codec.payloadType,\n                                type: fb.type,\n                                subtype: fb.parameter\n                            });\n                        }\n                    }\n                    this._mediaObject.payloads = answerRtpParameters.codecs\n                        .map((codec) => codec.payloadType)\n                        .join(' ');\n                    this._mediaObject.ext = [];\n                    for (const ext of answerRtpParameters.headerExtensions) {\n                        // Don't add a header extension if not present in the offer.\n                        const found = (offerMediaObject.ext || [])\n                            .some((localExt) => localExt.uri === ext.uri);\n                        if (!found)\n                            continue;\n                        this._mediaObject.ext.push({\n                            uri: ext.uri,\n                            value: ext.id\n                        });\n                    }\n                    // Allow both 1 byte and 2 bytes length header extensions.\n                    if (extmapAllowMixed &&\n                        offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n                        this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n                    }\n                    // Simulcast.\n                    if (offerMediaObject.simulcast) {\n                        this._mediaObject.simulcast =\n                            {\n                                dir1: 'recv',\n                                list1: offerMediaObject.simulcast.list1\n                            };\n                        this._mediaObject.rids = [];\n                        for (const rid of offerMediaObject.rids || []) {\n                            if (rid.direction !== 'send')\n                                continue;\n                            this._mediaObject.rids.push({\n                                id: rid.id,\n                                direction: 'recv'\n                            });\n                        }\n                    }\n                    // Simulcast (draft version 03).\n                    else if (offerMediaObject.simulcast_03) {\n                        // eslint-disable-next-line camelcase\n                        this._mediaObject.simulcast_03 =\n                            {\n                                value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n                            };\n                        this._mediaObject.rids = [];\n                        for (const rid of offerMediaObject.rids || []) {\n                            if (rid.direction !== 'send')\n                                continue;\n                            this._mediaObject.rids.push({\n                                id: rid.id,\n                                direction: 'recv'\n                            });\n                        }\n                    }\n                    this._mediaObject.rtcpMux = 'rtcp-mux';\n                    this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                    if (this._planB && this._mediaObject.type === 'video')\n                        this._mediaObject.xGoogleFlag = 'conference';\n                    break;\n                }\n            case 'application':\n                {\n                    // New spec.\n                    if (typeof offerMediaObject.sctpPort === 'number') {\n                        this._mediaObject.payloads = 'webrtc-datachannel';\n                        this._mediaObject.sctpPort = sctpParameters.port;\n                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                    }\n                    // Old spec.\n                    else if (offerMediaObject.sctpmap) {\n                        this._mediaObject.payloads = sctpParameters.port;\n                        this._mediaObject.sctpmap =\n                            {\n                                app: 'webrtc-datachannel',\n                                sctpmapNumber: sctpParameters.port,\n                                maxMessageSize: sctpParameters.maxMessageSize\n                            };\n                    }\n                    break;\n                }\n        }\n    }\n    setDtlsRole(role) {\n        switch (role) {\n            case 'client':\n                this._mediaObject.setup = 'active';\n                break;\n            case 'server':\n                this._mediaObject.setup = 'passive';\n                break;\n            case 'auto':\n                this._mediaObject.setup = 'actpass';\n                break;\n        }\n    }\n    resume() {\n        this._mediaObject.direction = 'recvonly';\n    }\n}\nexports.AnswerMediaSection = AnswerMediaSection;\nclass OfferMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(mid);\n        this._mediaObject.type = kind;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            if (!sctpParameters)\n                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n            else\n                this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection =\n                {\n                    ip: plainRtpParameters.ip,\n                    version: plainRtpParameters.ipVersion\n                };\n            this._mediaObject.protocol = 'RTP/AVP';\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (kind) {\n            case 'audio':\n            case 'video':\n                {\n                    this._mediaObject.direction = 'sendonly';\n                    this._mediaObject.rtp = [];\n                    this._mediaObject.rtcpFb = [];\n                    this._mediaObject.fmtp = [];\n                    if (!this._planB)\n                        this._mediaObject.msid = `${streamId || '-'} ${trackId}`;\n                    for (const codec of offerRtpParameters.codecs) {\n                        const rtp = {\n                            payload: codec.payloadType,\n                            codec: getCodecName(codec),\n                            rate: codec.clockRate\n                        };\n                        if (codec.channels > 1)\n                            rtp.encoding = codec.channels;\n                        this._mediaObject.rtp.push(rtp);\n                        const fmtp = {\n                            payload: codec.payloadType,\n                            config: ''\n                        };\n                        for (const key of Object.keys(codec.parameters)) {\n                            if (fmtp.config)\n                                fmtp.config += ';';\n                            fmtp.config += `${key}=${codec.parameters[key]}`;\n                        }\n                        if (fmtp.config)\n                            this._mediaObject.fmtp.push(fmtp);\n                        for (const fb of codec.rtcpFeedback) {\n                            this._mediaObject.rtcpFb.push({\n                                payload: codec.payloadType,\n                                type: fb.type,\n                                subtype: fb.parameter\n                            });\n                        }\n                    }\n                    this._mediaObject.payloads = offerRtpParameters.codecs\n                        .map((codec) => codec.payloadType)\n                        .join(' ');\n                    this._mediaObject.ext = [];\n                    for (const ext of offerRtpParameters.headerExtensions) {\n                        this._mediaObject.ext.push({\n                            uri: ext.uri,\n                            value: ext.id\n                        });\n                    }\n                    this._mediaObject.rtcpMux = 'rtcp-mux';\n                    this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                    const encoding = offerRtpParameters.encodings[0];\n                    const ssrc = encoding.ssrc;\n                    const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n                        ? encoding.rtx.ssrc\n                        : undefined;\n                    this._mediaObject.ssrcs = [];\n                    this._mediaObject.ssrcGroups = [];\n                    if (offerRtpParameters.rtcp.cname) {\n                        this._mediaObject.ssrcs.push({\n                            id: ssrc,\n                            attribute: 'cname',\n                            value: offerRtpParameters.rtcp.cname\n                        });\n                    }\n                    if (this._planB) {\n                        this._mediaObject.ssrcs.push({\n                            id: ssrc,\n                            attribute: 'msid',\n                            value: `${streamId || '-'} ${trackId}`\n                        });\n                    }\n                    if (rtxSsrc) {\n                        if (offerRtpParameters.rtcp.cname) {\n                            this._mediaObject.ssrcs.push({\n                                id: rtxSsrc,\n                                attribute: 'cname',\n                                value: offerRtpParameters.rtcp.cname\n                            });\n                        }\n                        if (this._planB) {\n                            this._mediaObject.ssrcs.push({\n                                id: rtxSsrc,\n                                attribute: 'msid',\n                                value: `${streamId || '-'} ${trackId}`\n                            });\n                        }\n                        // Associate original and retransmission SSRCs.\n                        this._mediaObject.ssrcGroups.push({\n                            semantics: 'FID',\n                            ssrcs: `${ssrc} ${rtxSsrc}`\n                        });\n                    }\n                    break;\n                }\n            case 'application':\n                {\n                    // New spec.\n                    if (!oldDataChannelSpec) {\n                        this._mediaObject.payloads = 'webrtc-datachannel';\n                        this._mediaObject.sctpPort = sctpParameters.port;\n                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                    }\n                    // Old spec.\n                    else {\n                        this._mediaObject.payloads = sctpParameters.port;\n                        this._mediaObject.sctpmap =\n                            {\n                                app: 'webrtc-datachannel',\n                                sctpmapNumber: sctpParameters.port,\n                                maxMessageSize: sctpParameters.maxMessageSize\n                            };\n                    }\n                    break;\n                }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setDtlsRole(role) {\n        // Always 'actpass'.\n        this._mediaObject.setup = 'actpass';\n    }\n    resume() {\n        this._mediaObject.direction = 'sendonly';\n    }\n    planBReceive({ offerRtpParameters, streamId, trackId }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n            ? encoding.rtx.ssrc\n            : undefined;\n        const payloads = this._mediaObject.payloads.split(' ');\n        for (const codec of offerRtpParameters.codecs) {\n            if (payloads.includes(String(codec.payloadType))) {\n                continue;\n            }\n            const rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n            };\n            if (codec.channels > 1)\n                rtp.encoding = codec.channels;\n            this._mediaObject.rtp.push(rtp);\n            const fmtp = {\n                payload: codec.payloadType,\n                config: ''\n            };\n            for (const key of Object.keys(codec.parameters)) {\n                if (fmtp.config)\n                    fmtp.config += ';';\n                fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n            if (fmtp.config)\n                this._mediaObject.fmtp.push(fmtp);\n            for (const fb of codec.rtcpFeedback) {\n                this._mediaObject.rtcpFb.push({\n                    payload: codec.payloadType,\n                    type: fb.type,\n                    subtype: fb.parameter\n                });\n            }\n        }\n        this._mediaObject.payloads += ` ${offerRtpParameters\n            .codecs\n            .filter((codec) => !this._mediaObject.payloads.includes(codec.payloadType))\n            .map((codec) => codec.payloadType)\n            .join(' ')}`;\n        this._mediaObject.payloads = this._mediaObject.payloads.trim();\n        if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n            });\n        }\n        this._mediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId || '-'} ${trackId}`\n        });\n        if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n                this._mediaObject.ssrcs.push({\n                    id: rtxSsrc,\n                    attribute: 'cname',\n                    value: offerRtpParameters.rtcp.cname\n                });\n            }\n            this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId || '-'} ${trackId}`\n            });\n            // Associate original and retransmission SSRCs.\n            this._mediaObject.ssrcGroups.push({\n                semantics: 'FID',\n                ssrcs: `${ssrc} ${rtxSsrc}`\n            });\n        }\n    }\n    planBStopReceiving({ offerRtpParameters }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n            ? encoding.rtx.ssrc\n            : undefined;\n        this._mediaObject.ssrcs = this._mediaObject.ssrcs\n            .filter((s) => s.id !== ssrc && s.id !== rtxSsrc);\n        if (rtxSsrc) {\n            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups\n                .filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n        }\n    }\n}\nexports.OfferMediaSection = OfferMediaSection;\nfunction getCodecName(codec) {\n    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n    if (!mimeTypeMatch)\n        throw new TypeError('invalid codec.mimeType');\n    return mimeTypeMatch[2];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}