{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;\nconst system_1 = require(\"./source/system\");\nconst binary_1 = require(\"@stablelib/binary\");\nconst wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length) {\n  let prng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.defaultRandomSource;\n  return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32() {\n  let prng = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exports.defaultRandomSource;\n  // Generate 4-byte random buffer.\n  const buf = randomBytes(4, prng);\n  // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n  const result = (0, binary_1.readUint32LE)(buf);\n  // Clean the buffer.\n  (0, wipe_1.wipe)(buf);\n  return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length) {\n  let charset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALPHANUMERIC;\n  let prng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.defaultRandomSource;\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n  let out = '';\n  const charsLen = charset.length;\n  const maxByte = 256 - 256 % charsLen;\n  while (length > 0) {\n    const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n    for (let i = 0; i < buf.length && length > 0; i++) {\n      const randomByte = buf[i];\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n    (0, wipe_1.wipe)(buf);\n  }\n  return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits) {\n  let charset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALPHANUMERIC;\n  let prng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.defaultRandomSource;\n  const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;","map":{"version":3,"mappings":";;AAAA;AACA;;;;;AAQA;AACA;AACA;AAIaA,2BAAmB,GAAG,IAAIC,2BAAkB,EAAE;AAE3D,SAAgBC,WAAW,CAACC,MAAc,EAA0C;EAAA,IAAxCC,2EAAqBJ,2BAAmB;EAChF,OAAOI,IAAI,CAACF,WAAW,CAACC,MAAM,CAAC;AACnC;AAFAH;AAIA;;;AAGA,SAAgBK,YAAY,GAAyC;EAAA,IAAxCD,2EAAqBJ,2BAAmB;EACjE;EACA,MAAMM,GAAG,GAAGJ,WAAW,CAAC,CAAC,EAAEE,IAAI,CAAC;EAEhC;EACA;EACA;EACA,MAAMG,MAAM,GAAG,yBAAY,EAACD,GAAG,CAAC;EAEhC;EACA,eAAI,EAACA,GAAG,CAAC;EAET,OAAOC,MAAM;AACjB;AAbAP;AAeA;AACA,MAAMQ,YAAY,GAAG,gEAAgE;AAErF;;;;;;;;;AASA,SAAgBC,YAAY,CACxBN,MAAc,EAE0B;EAAA,IADxCO,OAAO,uEAAGF,YAAY;EAAA,IACtBJ,2EAAqBJ,2BAAmB;EAExC,IAAIU,OAAO,CAACP,MAAM,GAAG,CAAC,EAAE;IACpB,MAAM,IAAIQ,KAAK,CAAC,mCAAmC,CAAC;;EAExD,IAAID,OAAO,CAACP,MAAM,GAAG,GAAG,EAAE;IACtB,MAAM,IAAIQ,KAAK,CAAC,kCAAkC,CAAC;;EAEvD,IAAIC,GAAG,GAAG,EAAE;EACZ,MAAMC,QAAQ,GAAGH,OAAO,CAACP,MAAM;EAC/B,MAAMW,OAAO,GAAG,GAAG,GAAI,GAAG,GAAGD,QAAS;EACtC,OAAOV,MAAM,GAAG,CAAC,EAAE;IACf,MAAMG,GAAG,GAAGJ,WAAW,CAACa,IAAI,CAACC,IAAI,CAACb,MAAM,GAAG,GAAG,GAAGW,OAAO,CAAC,EAAEV,IAAI,CAAC;IAChE,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,GAAG,CAACH,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAEc,CAAC,EAAE,EAAE;MAC/C,MAAMC,UAAU,GAAGZ,GAAG,CAACW,CAAC,CAAC;MACzB,IAAIC,UAAU,GAAGJ,OAAO,EAAE;QACtBF,GAAG,IAAIF,OAAO,CAACS,MAAM,CAACD,UAAU,GAAGL,QAAQ,CAAC;QAC5CV,MAAM,EAAE;;;IAGhB,eAAI,EAACG,GAAG,CAAC;;EAEb,OAAOM,GAAG;AACd;AA1BAZ;AA4BA;;;;;;;;;;;;AAYA,SAAgBoB,sBAAsB,CAClCC,IAAY,EAE4B;EAAA,IADxCX,OAAO,uEAAGF,YAAY;EAAA,IACtBJ,2EAAqBJ,2BAAmB;EAExC,MAAMG,MAAM,GAAGY,IAAI,CAACC,IAAI,CAACK,IAAI,IAAIN,IAAI,CAACO,GAAG,CAACZ,OAAO,CAACP,MAAM,CAAC,GAAGY,IAAI,CAACQ,GAAG,CAAC,CAAC;EACtE,OAAOd,YAAY,CAACN,MAAM,EAAEO,OAAO,EAAEN,IAAI,CAAC;AAC9C;AAPAJ","names":["exports","system_1","randomBytes","length","prng","randomUint32","buf","result","ALPHANUMERIC","randomString","charset","Error","out","charsLen","maxByte","Math","ceil","i","randomByte","charAt","randomStringForEntropy","bits","log","LN2"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@stablelib/random/random.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package random provides functions to access system's\n * cryptographically secure random byte generator.\n */\n\nimport { RandomSource } from \"./source\";\nimport { SystemRandomSource } from \"./source/system\";\nimport { readUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport { RandomSource } from \"./source\";\n\nexport const defaultRandomSource = new SystemRandomSource();\n\nexport function randomBytes(length: number, prng: RandomSource = defaultRandomSource): Uint8Array {\n    return prng.randomBytes(length);\n}\n\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nexport function randomUint32(prng: RandomSource = defaultRandomSource): number {\n    // Generate 4-byte random buffer.\n    const buf = randomBytes(4, prng);\n\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    const result = readUint32LE(buf);\n\n    // Clean the buffer.\n    wipe(buf);\n\n    return result;\n}\n\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomString(\n    length: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    let out = '';\n    const charsLen = charset.length;\n    const maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (let i = 0; i < buf.length && length > 0; i++) {\n            const randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe(buf);\n    }\n    return out;\n}\n\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomStringForEntropy(\n    bits: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}