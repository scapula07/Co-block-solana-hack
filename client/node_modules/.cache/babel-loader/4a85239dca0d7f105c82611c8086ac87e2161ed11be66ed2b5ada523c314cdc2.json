{"ast":null,"code":"/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nvar ObliviousSet = /** @class */function () {\n  function ObliviousSet(ttl) {\n    this.ttl = ttl;\n    this.map = new Map();\n    /**\n     * Creating calls to setTimeout() is expensive,\n     * so we only do that if there is not timeout already open.\n     */\n    this._to = false;\n  }\n  ObliviousSet.prototype.has = function (value) {\n    return this.map.has(value);\n  };\n  ObliviousSet.prototype.add = function (value) {\n    var _this = this;\n    this.map.set(value, now());\n    /**\n     * When a new value is added,\n     * start the cleanup at the next tick\n     * to not block the cpu for more important stuff\n     * that might happen.\n     */\n    if (!this._to) {\n      this._to = true;\n      setTimeout(function () {\n        _this._to = false;\n        removeTooOldValues(_this);\n      }, 0);\n    }\n  };\n  ObliviousSet.prototype.clear = function () {\n    this.map.clear();\n  };\n  return ObliviousSet;\n}();\nexport { ObliviousSet };\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(obliviousSet) {\n  var olderThen = now() - obliviousSet.ttl;\n  var iterator = obliviousSet.map[Symbol.iterator]();\n  /**\n   * Because we can assume the new values are added at the bottom,\n   * we start from the top and stop as soon as we reach a non-too-old value.\n   */\n  while (true) {\n    var next = iterator.next().value;\n    if (!next) {\n      return; // no more elements\n    }\n\n    var value = next[0];\n    var time = next[1];\n    if (time < olderThen) {\n      obliviousSet.map.delete(value);\n    } else {\n      // We reached a value that is not old enough\n      return;\n    }\n  }\n}\nexport function now() {\n  return new Date().getTime();\n}","map":{"version":3,"mappings":"AACA;;;;;AAKA;EAQI,sBACoBA,GAAW;IAAX,QAAG,GAAHA,GAAG;IARP,QAAG,GAAG,IAAIC,GAAG,EAAE;IAE/B;;;;IAIO,QAAG,GAAY,KAAK;EAGvB;EAEJC,0BAAG,GAAH,UAAIC,KAAQ;IACR,OAAO,IAAI,CAACC,GAAG,CAACC,GAAG,CAACF,KAAK,CAAC;EAC9B,CAAC;EAEDD,0BAAG,GAAH,UAAIC,KAAQ;IAAZ;IACI,IAAI,CAACC,GAAG,CAACE,GAAG,CAACH,KAAK,EAAEI,GAAG,EAAE,CAAC;IAE1B;;;;;;IAMA,IAAI,CAAC,IAAI,CAACC,GAAG,EAAE;MACX,IAAI,CAACA,GAAG,GAAG,IAAI;MACfC,UAAU,CAAC;QACPC,KAAI,CAACF,GAAG,GAAG,KAAK;QAChBG,kBAAkB,CAACD,KAAI,CAAC;MAC5B,CAAC,EAAE,CAAC,CAAC;;EAEb,CAAC;EAEDR,4BAAK,GAAL;IACI,IAAI,CAACE,GAAG,CAACQ,KAAK,EAAE;EACpB,CAAC;EACL,mBAAC;AAAD,CAAC,EArCD;;AAwCA;;;;AAIA,OAAM,SAAUD,kBAAkB,CAC9BE,YAA0B;EAE1B,IAAMC,SAAS,GAAGP,GAAG,EAAE,GAAGM,YAAY,CAACb,GAAG;EAC1C,IAAMe,QAAQ,GAAGF,YAAY,CAACT,GAAG,CAACY,MAAM,CAACD,QAAQ,CAAC,EAAE;EAEpD;;;;EAIA,OAAO,IAAI,EAAE;IAET,IAAME,IAAI,GAAGF,QAAQ,CAACE,IAAI,EAAE,CAACd,KAAK;IAElC,IAAI,CAACc,IAAI,EAAE;MACP,OAAO,CAAC;;;IAEZ,IAAMd,KAAK,GAAGc,IAAI,CAAC,CAAC,CAAC;IACrB,IAAMC,IAAI,GAAGD,IAAI,CAAC,CAAC,CAAC;IACpB,IAAIC,IAAI,GAAGJ,SAAS,EAAE;MAClBD,YAAY,CAACT,GAAG,CAACe,MAAM,CAAChB,KAAK,CAAC;KACjC,MAAM;MACH;MACA;;;AAGZ;AAEA,OAAM,SAAUI,GAAG;EACf,OAAO,IAAIa,IAAI,EAAE,CAACC,OAAO,EAAE;AAC/B","names":["ttl","Map","ObliviousSet","value","map","has","set","now","_to","setTimeout","_this","removeTooOldValues","clear","obliviousSet","olderThen","iterator","Symbol","next","time","delete","Date","getTime"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/node_modules/oblivious-set/src/index.ts"],"sourcesContent":["\n/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nexport class ObliviousSet<T = any> {\n    public readonly map = new Map();\n\n    /**\n     * Creating calls to setTimeout() is expensive,\n     * so we only do that if there is not timeout already open.\n     */\n    public _to: boolean = false;\n    constructor(\n        public readonly ttl: number\n    ) { }\n\n    has(value: T): boolean {\n        return this.map.has(value);\n    }\n\n    add(value: T): void {\n        this.map.set(value, now());\n\n        /**\n         * When a new value is added,\n         * start the cleanup at the next tick\n         * to not block the cpu for more important stuff\n         * that might happen.\n         */\n        if (!this._to) {\n            this._to = true;\n            setTimeout(() => {\n                this._to = false;\n                removeTooOldValues(this);\n            }, 0);\n        }\n    }\n\n    clear() {\n        this.map.clear();\n    }\n}\n\n\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(\n    obliviousSet: ObliviousSet\n) {\n    const olderThen = now() - obliviousSet.ttl;\n    const iterator = obliviousSet.map[Symbol.iterator]();\n\n    /**\n     * Because we can assume the new values are added at the bottom,\n     * we start from the top and stop as soon as we reach a non-too-old value.\n     */\n    while (true) {\n\n        const next = iterator.next().value;\n\n        if (!next) {\n            return; // no more elements\n        }\n        const value = next[0];\n        const time = next[1];\n        if (time < olderThen) {\n            obliviousSet.map.delete(value);\n        } else {\n            // We reached a value that is not old enough\n            return;\n        }\n    }\n}\n\nexport function now(): number {\n    return new Date().getTime();\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}