{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoMultiAccounts = void 0;\nconst RegistryType_1 = require(\"../RegistryType\");\nconst CryptoHDKey_1 = require(\"../CryptoHDKey\");\nconst RegistryItem_1 = require(\"../RegistryItem\");\nconst lib_1 = require(\"../lib\");\nvar Keys;\n(function (Keys) {\n  Keys[Keys[\"masterFingerprint\"] = 1] = \"masterFingerprint\";\n  Keys[Keys[\"keys\"] = 2] = \"keys\";\n  Keys[Keys[\"device\"] = 3] = \"device\";\n})(Keys || (Keys = {}));\nclass CryptoMultiAccounts extends RegistryItem_1.RegistryItem {\n  constructor(masterFingerprint, keys, device) {\n    super();\n    this.masterFingerprint = masterFingerprint;\n    this.keys = keys;\n    this.device = device;\n    this.getRegistryType = () => RegistryType_1.RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n    this.getMasterFingerprint = () => this.masterFingerprint;\n    this.getKeys = () => this.keys;\n    this.getDevice = () => this.device;\n    this.toDataItem = () => {\n      const map = {};\n      if (this.masterFingerprint) {\n        map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n      }\n      if (this.keys) {\n        map[Keys.keys] = this.keys.map(item => {\n          const dataItem = item.toDataItem();\n          dataItem.setTag(item.getRegistryType().getTag());\n          return dataItem;\n        });\n      }\n      if (this.device) {\n        map[Keys.device] = this.device;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoMultiAccounts = CryptoMultiAccounts;\nCryptoMultiAccounts.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const masterFingerprint = Buffer.alloc(4);\n  const _masterFingerprint = map[Keys.masterFingerprint];\n  if (_masterFingerprint) {\n    masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n  }\n  const keys = map[Keys.keys];\n  const cryptoHDKeys = keys.map(item => CryptoHDKey_1.CryptoHDKey.fromDataItem(item));\n  const device = map[Keys.device];\n  return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device);\n};\nCryptoMultiAccounts.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoMultiAccounts.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAKA,IAIJ;AAJD,WAAKA,IAAI;EACPA,yDAAqB;EACrBA,+BAAI;EACJA,mCAAM;AACR,CAAC,EAJIA,IAAI,KAAJA,IAAI;AAMT,MAAaC,mBAAoB,SAAQC,2BAAY;EAGnDC,YACUC,iBAAyB,EACzBC,IAAmB,EACnBC,MAAe;IAEvB,KAAK,EAAE;IAJC,sBAAiB,GAAjBF,iBAAiB;IACjB,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IALhB,oBAAe,GAAG,MAAMC,4BAAa,CAACC,qBAAqB;IAUpD,yBAAoB,GAAG,MAAM,IAAI,CAACJ,iBAAiB;IACnD,YAAO,GAAG,MAAM,IAAI,CAACC,IAAI;IACzB,cAAS,GAAG,MAAM,IAAI,CAACC,MAAM;IAE7B,eAAU,GAAG,MAAe;MACjC,MAAMG,GAAG,GAAgB,EAAE;MAC3B,IAAI,IAAI,CAACL,iBAAiB,EAAE;QAC1BK,GAAG,CAACT,IAAI,CAACI,iBAAiB,CAAC,GAAG,IAAI,CAACA,iBAAiB,CAACM,YAAY,CAAC,CAAC,CAAC;;MAEtE,IAAI,IAAI,CAACL,IAAI,EAAE;QACbI,GAAG,CAACT,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEE,IAAI,IAAI;UACtC,MAAMC,QAAQ,GAAGD,IAAI,CAACE,UAAU,EAAE;UAClCD,QAAQ,CAACE,MAAM,CAACH,IAAI,CAACI,eAAe,EAAE,CAACC,MAAM,EAAE,CAAC;UAChD,OAAOJ,QAAQ;QACjB,CAAC,CAAC;;MAEJ,IAAI,IAAI,CAACN,MAAM,EAAE;QACfG,GAAG,CAACT,IAAI,CAACM,MAAM,CAAC,GAAG,IAAI,CAACA,MAAM;;MAEhC,OAAO,IAAIW,cAAQ,CAACR,GAAG,CAAC;IAC1B,CAAC;EAtBD;;AATFS;AAiCgBjB,gCAAY,GAAIW,QAAkB,IAAI;EAClD,MAAMH,GAAG,GAAGG,QAAQ,CAACO,OAAO,EAAE;EAC9B,MAAMf,iBAAiB,GAAGgB,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACzC,MAAMC,kBAAkB,GAAGb,GAAG,CAACT,IAAI,CAACI,iBAAiB,CAAC;EACtD,IAAIkB,kBAAkB,EAAE;IACtBlB,iBAAiB,CAACmB,aAAa,CAACD,kBAAkB,EAAE,CAAC,CAAC;;EAExD,MAAMjB,IAAI,GAAGI,GAAG,CAACT,IAAI,CAACK,IAAI,CAAe;EACzC,MAAMmB,YAAY,GAAGnB,IAAI,CAACI,GAAG,CAAEE,IAAI,IAAKc,yBAAW,CAACC,YAAY,CAACf,IAAI,CAAC,CAAC;EACvE,MAAML,MAAM,GAAGG,GAAG,CAACT,IAAI,CAACM,MAAM,CAAC;EAC/B,OAAO,IAAIL,mBAAmB,CAACG,iBAAiB,EAAEoB,YAAY,EAAElB,MAAM,CAAC;AACzE,CAAC;AAEaL,4BAAQ,GAAI0B,YAAoB,IAAI;EAChD,MAAMf,QAAQ,GAAG,0BAAgB,EAACe,YAAY,CAAC;EAC/C,OAAO1B,mBAAmB,CAACyB,YAAY,CAACd,QAAQ,CAAC;AACnD,CAAC","names":["Keys","CryptoMultiAccounts","RegistryItem_1","constructor","masterFingerprint","keys","device","RegistryType_1","CRYPTO_MULTI_ACCOUNTS","map","readUInt32BE","item","dataItem","toDataItem","setTag","getRegistryType","getTag","lib_1","exports","getData","Buffer","alloc","_masterFingerprint","writeUInt32BE","cryptoHDKeys","CryptoHDKey_1","fromDataItem","_cborPayload"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/node_modules/@keystonehq/bc-ur-registry/src/extended/CryptoMultiAccounts.ts"],"sourcesContent":["import {RegistryTypes} from \"../RegistryType\";\nimport {CryptoHDKey} from \"../CryptoHDKey\";\nimport {RegistryItem} from \"../RegistryItem\";\nimport {decodeToDataItem,DataItem} from '../lib';\nimport {DataItemMap} from '../types';\nenum Keys {\n  masterFingerprint = 1,\n  keys,\n  device,\n}\n\nexport class CryptoMultiAccounts extends RegistryItem {\n  getRegistryType = () => RegistryTypes.CRYPTO_MULTI_ACCOUNTS;\n\n  constructor(\n    private masterFingerprint: Buffer,\n    private keys: CryptoHDKey[],\n    private device?: string\n  ) {\n    super();\n  }\n\n  public getMasterFingerprint = () => this.masterFingerprint;\n  public getKeys = () => this.keys;\n  public getDevice = () => this.device;\n\n  public toDataItem = (): DataItem => {\n    const map: DataItemMap = {};\n    if (this.masterFingerprint) {\n      map[Keys.masterFingerprint] = this.masterFingerprint.readUInt32BE(0);\n    }\n    if (this.keys) {\n      map[Keys.keys] = this.keys.map((item) => {\n        const dataItem = item.toDataItem();\n        dataItem.setTag(item.getRegistryType().getTag());\n        return dataItem;\n      });\n    }\n    if (this.device) {\n      map[Keys.device] = this.device;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const masterFingerprint = Buffer.alloc(4);\n    const _masterFingerprint = map[Keys.masterFingerprint];\n    if (_masterFingerprint) {\n      masterFingerprint.writeUInt32BE(_masterFingerprint, 0);\n    }\n    const keys = map[Keys.keys] as DataItem[];\n    const cryptoHDKeys = keys.map((item) => CryptoHDKey.fromDataItem(item));\n    const device = map[Keys.device];\n    return new CryptoMultiAccounts(masterFingerprint, cryptoHDKeys, device);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoMultiAccounts.fromDataItem(dataItem);\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}