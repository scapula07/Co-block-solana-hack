{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Consumer = void 0;\nconst Logger_1 = require(\"./Logger\");\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\nconst errors_1 = require(\"./errors\");\nconst logger = new Logger_1.Logger('Consumer');\nclass Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n  constructor(_ref) {\n    let {\n      id,\n      localId,\n      producerId,\n      rtpReceiver,\n      track,\n      rtpParameters,\n      appData\n    } = _ref;\n    super();\n    // Closed flag.\n    this._closed = false;\n    // Observer instance.\n    this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n    logger.debug('constructor()');\n    this._id = id;\n    this._localId = localId;\n    this._producerId = producerId;\n    this._rtpReceiver = rtpReceiver;\n    this._track = track;\n    this._rtpParameters = rtpParameters;\n    this._paused = !track.enabled;\n    this._appData = appData || {};\n    this.onTrackEnded = this.onTrackEnded.bind(this);\n    this.handleTrack();\n  }\n  /**\n   * Consumer id.\n   */\n  get id() {\n    return this._id;\n  }\n  /**\n   * Local id.\n   */\n  get localId() {\n    return this._localId;\n  }\n  /**\n   * Associated Producer id.\n   */\n  get producerId() {\n    return this._producerId;\n  }\n  /**\n   * Whether the Consumer is closed.\n   */\n  get closed() {\n    return this._closed;\n  }\n  /**\n   * Media kind.\n   */\n  get kind() {\n    return this._track.kind;\n  }\n  /**\n   * Associated RTCRtpReceiver.\n   */\n  get rtpReceiver() {\n    return this._rtpReceiver;\n  }\n  /**\n   * The associated track.\n   */\n  get track() {\n    return this._track;\n  }\n  /**\n   * RTP parameters.\n   */\n  get rtpParameters() {\n    return this._rtpParameters;\n  }\n  /**\n   * Whether the Consumer is paused.\n   */\n  get paused() {\n    return this._paused;\n  }\n  /**\n   * App custom data.\n   */\n  get appData() {\n    return this._appData;\n  }\n  /**\n   * Invalid setter.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  set appData(appData) {\n    throw new Error('cannot override appData object');\n  }\n  get observer() {\n    return this._observer;\n  }\n  /**\n   * Closes the Consumer.\n   */\n  close() {\n    if (this._closed) return;\n    logger.debug('close()');\n    this._closed = true;\n    this.destroyTrack();\n    this.emit('@close');\n    // Emit observer event.\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Transport was closed.\n   */\n  transportClosed() {\n    if (this._closed) return;\n    logger.debug('transportClosed()');\n    this._closed = true;\n    this.destroyTrack();\n    this.safeEmit('transportclose');\n    // Emit observer event.\n    this._observer.safeEmit('close');\n  }\n  /**\n   * Get associated RTCRtpReceiver stats.\n   */\n  async getStats() {\n    if (this._closed) throw new errors_1.InvalidStateError('closed');\n    return new Promise((resolve, reject) => {\n      this.safeEmit('@getstats', resolve, reject);\n    });\n  }\n  /**\n   * Pauses receiving media.\n   */\n  pause() {\n    logger.debug('pause()');\n    if (this._closed) {\n      logger.error('pause() | Consumer closed');\n      return;\n    }\n    if (this._paused) {\n      logger.debug('pause() | Consumer is already paused');\n      return;\n    }\n    this._paused = true;\n    this._track.enabled = false;\n    this.emit('@pause');\n    // Emit observer event.\n    this._observer.safeEmit('pause');\n  }\n  /**\n   * Resumes receiving media.\n   */\n  resume() {\n    logger.debug('resume()');\n    if (this._closed) {\n      logger.error('resume() | Consumer closed');\n      return;\n    }\n    if (!this._paused) {\n      logger.debug('resume() | Consumer is already resumed');\n      return;\n    }\n    this._paused = false;\n    this._track.enabled = true;\n    this.emit('@resume');\n    // Emit observer event.\n    this._observer.safeEmit('resume');\n  }\n  onTrackEnded() {\n    logger.debug('track \"ended\" event');\n    this.safeEmit('trackended');\n    // Emit observer event.\n    this._observer.safeEmit('trackended');\n  }\n  handleTrack() {\n    this._track.addEventListener('ended', this.onTrackEnded);\n  }\n  destroyTrack() {\n    try {\n      this._track.removeEventListener('ended', this.onTrackEnded);\n      this._track.stop();\n    } catch (error) {}\n  }\n}\nexports.Consumer = Consumer;","map":{"version":3,"names":["Object","defineProperty","exports","value","Consumer","Logger_1","require","EnhancedEventEmitter_1","errors_1","logger","Logger","EnhancedEventEmitter","constructor","id","localId","producerId","rtpReceiver","track","rtpParameters","appData","_closed","_observer","debug","_id","_localId","_producerId","_rtpReceiver","_track","_rtpParameters","_paused","enabled","_appData","onTrackEnded","bind","handleTrack","closed","kind","paused","Error","observer","close","destroyTrack","emit","safeEmit","transportClosed","getStats","InvalidStateError","Promise","resolve","reject","pause","error","resume","addEventListener","removeEventListener","stop"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/Consumer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Consumer = void 0;\nconst Logger_1 = require(\"./Logger\");\nconst EnhancedEventEmitter_1 = require(\"./EnhancedEventEmitter\");\nconst errors_1 = require(\"./errors\");\nconst logger = new Logger_1.Logger('Consumer');\nclass Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n    constructor({ id, localId, producerId, rtpReceiver, track, rtpParameters, appData }) {\n        super();\n        // Closed flag.\n        this._closed = false;\n        // Observer instance.\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger.debug('constructor()');\n        this._id = id;\n        this._localId = localId;\n        this._producerId = producerId;\n        this._rtpReceiver = rtpReceiver;\n        this._track = track;\n        this._rtpParameters = rtpParameters;\n        this._paused = !track.enabled;\n        this._appData = appData || {};\n        this.onTrackEnded = this.onTrackEnded.bind(this);\n        this.handleTrack();\n    }\n    /**\n     * Consumer id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Local id.\n     */\n    get localId() {\n        return this._localId;\n    }\n    /**\n     * Associated Producer id.\n     */\n    get producerId() {\n        return this._producerId;\n    }\n    /**\n     * Whether the Consumer is closed.\n     */\n    get closed() {\n        return this._closed;\n    }\n    /**\n     * Media kind.\n     */\n    get kind() {\n        return this._track.kind;\n    }\n    /**\n     * Associated RTCRtpReceiver.\n     */\n    get rtpReceiver() {\n        return this._rtpReceiver;\n    }\n    /**\n     * The associated track.\n     */\n    get track() {\n        return this._track;\n    }\n    /**\n     * RTP parameters.\n     */\n    get rtpParameters() {\n        return this._rtpParameters;\n    }\n    /**\n     * Whether the Consumer is paused.\n     */\n    get paused() {\n        return this._paused;\n    }\n    /**\n     * App custom data.\n     */\n    get appData() {\n        return this._appData;\n    }\n    /**\n     * Invalid setter.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    set appData(appData) {\n        throw new Error('cannot override appData object');\n    }\n    get observer() {\n        return this._observer;\n    }\n    /**\n     * Closes the Consumer.\n     */\n    close() {\n        if (this._closed)\n            return;\n        logger.debug('close()');\n        this._closed = true;\n        this.destroyTrack();\n        this.emit('@close');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Transport was closed.\n     */\n    transportClosed() {\n        if (this._closed)\n            return;\n        logger.debug('transportClosed()');\n        this._closed = true;\n        this.destroyTrack();\n        this.safeEmit('transportclose');\n        // Emit observer event.\n        this._observer.safeEmit('close');\n    }\n    /**\n     * Get associated RTCRtpReceiver stats.\n     */\n    async getStats() {\n        if (this._closed)\n            throw new errors_1.InvalidStateError('closed');\n        return new Promise((resolve, reject) => {\n            this.safeEmit('@getstats', resolve, reject);\n        });\n    }\n    /**\n     * Pauses receiving media.\n     */\n    pause() {\n        logger.debug('pause()');\n        if (this._closed) {\n            logger.error('pause() | Consumer closed');\n            return;\n        }\n        if (this._paused) {\n            logger.debug('pause() | Consumer is already paused');\n            return;\n        }\n        this._paused = true;\n        this._track.enabled = false;\n        this.emit('@pause');\n        // Emit observer event.\n        this._observer.safeEmit('pause');\n    }\n    /**\n     * Resumes receiving media.\n     */\n    resume() {\n        logger.debug('resume()');\n        if (this._closed) {\n            logger.error('resume() | Consumer closed');\n            return;\n        }\n        if (!this._paused) {\n            logger.debug('resume() | Consumer is already resumed');\n            return;\n        }\n        this._paused = false;\n        this._track.enabled = true;\n        this.emit('@resume');\n        // Emit observer event.\n        this._observer.safeEmit('resume');\n    }\n    onTrackEnded() {\n        logger.debug('track \"ended\" event');\n        this.safeEmit('trackended');\n        // Emit observer event.\n        this._observer.safeEmit('trackended');\n    }\n    handleTrack() {\n        this._track.addEventListener('ended', this.onTrackEnded);\n    }\n    destroyTrack() {\n        try {\n            this._track.removeEventListener('ended', this.onTrackEnded);\n            this._track.stop();\n        }\n        catch (error) { }\n    }\n}\nexports.Consumer = Consumer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}