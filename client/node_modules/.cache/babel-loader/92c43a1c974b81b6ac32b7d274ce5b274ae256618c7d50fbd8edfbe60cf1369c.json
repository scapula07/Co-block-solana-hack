{"ast":null,"code":"import * as ed25519 from \"@stablelib/ed25519\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { fromMiliseconds } from \"@walletconnect/time\";\nimport { JWT_IRIDIUM_ALG, JWT_IRIDIUM_TYP, KEY_PAIR_SEED_LENGTH } from \"./constants\";\nimport { decodeIss, decodeJWT, encodeData, encodeIss, encodeJWT } from \"./utils\";\nexport function generateKeyPair() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : randomBytes(KEY_PAIR_SEED_LENGTH);\n  return ed25519.generateKeyPairFromSeed(seed);\n}\nexport async function signJWT(sub, aud, ttl, keyPair) {\n  let iat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : fromMiliseconds(Date.now());\n  const header = {\n    alg: JWT_IRIDIUM_ALG,\n    typ: JWT_IRIDIUM_TYP\n  };\n  const iss = encodeIss(keyPair.publicKey);\n  const exp = iat + ttl;\n  const payload = {\n    iss,\n    sub,\n    aud,\n    iat,\n    exp\n  };\n  const data = encodeData({\n    header,\n    payload\n  });\n  const signature = ed25519.sign(keyPair.secretKey, data);\n  return encodeJWT({\n    header,\n    payload,\n    signature\n  });\n}\nexport async function verifyJWT(jwt) {\n  const {\n    header,\n    payload,\n    signature\n  } = decodeJWT(jwt);\n  if (header.alg !== JWT_IRIDIUM_ALG || header.typ !== JWT_IRIDIUM_TYP) {\n    throw new Error(\"JWT must use EdDSA algorithm\");\n  }\n  const publicKey = decodeIss(payload.iss);\n  const data = encodeData({\n    header,\n    payload\n  });\n  return ed25519.verify(publicKey, data, signature);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAC7C,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SACEC,eAAe,EACfC,eAAe,EACfC,oBAAoB,QACf,aAAa;AAEpB,SACEC,SAAS,EACTC,SAAS,EACTC,UAAU,EACVC,SAAS,EACTC,SAAS,QACJ,SAAS;AAEhB,OAAM,SAAUC,eAAe,GACuB;EAAA,IAApDC,2EAAmBX,WAAW,CAACI,oBAAoB,CAAC;EAEpD,OAAOL,OAAO,CAACa,uBAAuB,CAACD,IAAI,CAAC;AAC9C;AAEA,OAAO,eAAeE,OAAO,CAC3BC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,OAAwB,EACiB;EAAA,IAAzCC,0EAAcjB,eAAe,CAACkB,IAAI,CAACC,GAAG,EAAE,CAAC;EAEzC,MAAMC,MAAM,GAAG;IAAEC,GAAG,EAAEpB,eAAe;IAAEqB,GAAG,EAAEpB;EAAe,CAAE;EAC7D,MAAMqB,GAAG,GAAGhB,SAAS,CAACS,OAAO,CAACQ,SAAS,CAAC;EACxC,MAAMC,GAAG,GAAGR,GAAG,GAAGF,GAAG;EACrB,MAAMW,OAAO,GAAG;IAAEH,GAAG;IAAEV,GAAG;IAAEC,GAAG;IAAEG,GAAG;IAAEQ;EAAG,CAAE;EAC3C,MAAME,IAAI,GAAGrB,UAAU,CAAC;IAAEc,MAAM;IAAEM;EAAO,CAAE,CAAC;EAC5C,MAAME,SAAS,GAAG9B,OAAO,CAAC+B,IAAI,CAACb,OAAO,CAACc,SAAS,EAAEH,IAAI,CAAC;EACvD,OAAOnB,SAAS,CAAC;IAAEY,MAAM;IAAEM,OAAO;IAAEE;EAAS,CAAE,CAAC;AAClD;AAEA,OAAO,eAAeG,SAAS,CAACC,GAAW;EACzC,MAAM;IAAEZ,MAAM;IAAEM,OAAO;IAAEE;EAAS,CAAE,GAAGvB,SAAS,CAAC2B,GAAG,CAAC;EACrD,IAAIZ,MAAM,CAACC,GAAG,KAAKpB,eAAe,IAAImB,MAAM,CAACE,GAAG,KAAKpB,eAAe,EAAE;IACpE,MAAM,IAAI+B,KAAK,CAAC,8BAA8B,CAAC;;EAEjD,MAAMT,SAAS,GAAGpB,SAAS,CAACsB,OAAO,CAACH,GAAG,CAAC;EACxC,MAAMI,IAAI,GAAGrB,UAAU,CAAC;IAAEc,MAAM;IAAEM;EAAO,CAAE,CAAC;EAC5C,OAAO5B,OAAO,CAACoC,MAAM,CAACV,SAAS,EAAEG,IAAI,EAAEC,SAAS,CAAC;AACnD","names":["ed25519","randomBytes","fromMiliseconds","JWT_IRIDIUM_ALG","JWT_IRIDIUM_TYP","KEY_PAIR_SEED_LENGTH","decodeIss","decodeJWT","encodeData","encodeIss","encodeJWT","generateKeyPair","seed","generateKeyPairFromSeed","signJWT","sub","aud","ttl","keyPair","iat","Date","now","header","alg","typ","iss","publicKey","exp","payload","data","signature","sign","secretKey","verifyJWT","jwt","Error","verify"],"sources":["../../src/api.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}