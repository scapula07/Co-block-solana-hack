{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Firefox60 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst logger = new Logger_1.Logger('Firefox60');\nconst SCTP_NUM_STREAMS = {\n  OS: 16,\n  MIS: 2048\n};\nclass Firefox60 extends HandlerInterface_1.HandlerInterface {\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new Firefox60();\n  }\n  constructor() {\n    super();\n    // Map of RTCTransceivers indexed by MID.\n    this._mapMidTransceiver = new Map();\n    // Local stream for sending.\n    this._sendStream = new MediaStream();\n    // Whether a DataChannel m=application section has been created.\n    this._hasDataChannelMediaSection = false;\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\n    this._nextSendSctpStreamId = 0;\n    // Got transport local and remote parameters.\n    this._transportReady = false;\n  }\n  get name() {\n    return 'Firefox60';\n  }\n  close() {\n    logger.debug('close()');\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require'\n    });\n    // NOTE: We need to add a real video track to get the RID extension mapping.\n    const canvas = document.createElement('canvas');\n    // NOTE: Otherwise Firefox fails in next line.\n    canvas.getContext('2d');\n    const fakeStream = canvas.captureStream();\n    const fakeVideoTrack = fakeStream.getVideoTracks()[0];\n    try {\n      pc.addTransceiver('audio', {\n        direction: 'sendrecv'\n      });\n      const videoTransceiver = pc.addTransceiver(fakeVideoTrack, {\n        direction: 'sendrecv'\n      });\n      const parameters = videoTransceiver.sender.getParameters();\n      const encodings = [{\n        rid: 'r0',\n        maxBitrate: 100000\n      }, {\n        rid: 'r1',\n        maxBitrate: 500000\n      }];\n      parameters.encodings = encodings;\n      await videoTransceiver.sender.setParameters(parameters);\n      const offer = await pc.createOffer();\n      try {\n        canvas.remove();\n      } catch (error) {}\n      try {\n        fakeVideoTrack.stop();\n      } catch (error) {}\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        canvas.remove();\n      } catch (error2) {}\n      try {\n        fakeVideoTrack.stop();\n      } catch (error2) {}\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run(_ref) {\n    let {\n      direction,\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      iceServers,\n      iceTransportPolicy,\n      additionalSettings,\n      proprietaryConstraints,\n      extendedRtpCapabilities\n    } = _ref;\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers || [],\n      iceTransportPolicy: iceTransportPolicy || 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            this.emit('@connectionstatechange', 'connecting');\n            break;\n          case 'connected':\n          case 'completed':\n            this.emit('@connectionstatechange', 'connected');\n            break;\n          case 'failed':\n            this.emit('@connectionstatechange', 'failed');\n            break;\n          case 'disconnected':\n            this.emit('@connectionstatechange', 'disconnected');\n            break;\n          case 'closed':\n            this.emit('@connectionstatechange', 'closed');\n            break;\n        }\n      });\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async updateIceServers(iceServers) {\n    // NOTE: Firefox does not implement pc.setConfiguration().\n    throw new errors_1.UnsupportedError('not supported');\n  }\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) return;\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    return this._pc.getStats();\n  }\n  async send(_ref2) {\n    let {\n      track,\n      encodings,\n      codecOptions,\n      codec\n    } = _ref2;\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (encodings) {\n      encodings = utils.clone(encodings, []);\n      if (encodings.length > 1) {\n        encodings.forEach((encoding, idx) => {\n          encoding.rid = `r${idx}`;\n        });\n        // Clone the encodings and reverse them because Firefox likes them\n        // from high to low.\n        encodings.reverse();\n      }\n    }\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n    // NOTE: Firefox fails sometimes to properly anticipate the closed media\n    // section that it should use, so don't reuse closed media sections.\n    //   https://github.com/versatica/mediasoup-client/issues/104\n    //\n    // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream]\n    });\n    // NOTE: This is not spec compliants. Encodings should be given in addTransceiver\n    // second argument, but Firefox does not support it.\n    if (encodings) {\n      const parameters = transceiver.sender.getParameters();\n      parameters.encodings = encodings;\n      await transceiver.sender.setParameters(parameters);\n    }\n    const offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    // In Firefox use DTLS role client even if we are the \"offerer\" since\n    // Firefox does not respect ICE-Lite.\n    if (!this._transportReady) await this.setupTransport({\n      localDtlsRole: 'client',\n      localSdpObject\n    });\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings by parsing the SDP offer if no encodings are given.\n    if (!encodings) {\n      sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n    }\n    // Set RTP encodings by parsing the SDP offer and complete them with given\n    // one if just a single encoding has been given.\n    else if (encodings.length === 1) {\n      const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n      Object.assign(newEncodings[0], encodings[0]);\n      sendingRtpParameters.encodings = newEncodings;\n    }\n    // Otherwise if more than 1 encoding are given use them verbatim (but\n    // reverse them back since we reversed them above to satisfy Firefox).\n    else {\n      sendingRtpParameters.encodings = encodings.reverse();\n    }\n    // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n    // each encoding.\n    if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n      for (const encoding of sendingRtpParameters.encodings) {\n        encoding.scalabilityMode = 'S1T2';\n      }\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions,\n      extmapAllowMixed: true\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n  async stopSending(localId) {\n    logger.debug('stopSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated transceiver not found');\n    transceiver.sender.replaceTrack(null);\n    // NOTE: Cannot use stop() the transceiver due to the the note above in\n    // send() method.\n    // try\n    // {\n    // \ttransceiver.stop();\n    // }\n    // catch (error)\n    // {}\n    this._pc.removeTrack(transceiver.sender);\n    // NOTE: Cannot use closeMediaSection() due to the the note above in send()\n    // method.\n    // this._remoteSdp!.closeMediaSection(transceiver.mid);\n    this._remoteSdp.disableMediaSection(transceiver.mid);\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    this._mapMidTransceiver.delete(localId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async pauseSending(localId) {\n    this.assertSendDirection();\n    logger.debug('pauseSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.direction = 'inactive';\n    this._remoteSdp.pauseMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async resumeSending(localId) {\n    this.assertSendDirection();\n    logger.debug('resumeSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.direction = 'sendonly';\n    this._remoteSdp.resumeSendingMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async replaceTrack(localId, track) {\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    await transceiver.sender.replaceTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated transceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    // NOTE: We require encodings given from low to high, however Firefox\n    // requires them in reverse order, so do magic here.\n    spatialLayer = parameters.encodings.length - 1 - spatialLayer;\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx >= spatialLayer) encoding.active = true;else encoding.active = false;\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n  async getSenderStats(localId) {\n    this.assertSendDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.sender.getStats();\n  }\n  async sendDataChannel(_ref3) {\n    let {\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      label,\n      protocol\n    } = _ref3;\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) await this.setupTransport({\n        localDtlsRole: 'client',\n        localSdpObject\n      });\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  optionsList) {\n    this.assertRecvDirection();\n    const results = [];\n    const mapLocalId = new Map();\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n      mapLocalId.set(trackId, localId);\n      this._remoteSdp.receive({\n        mid: localId,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId || rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        rtpParameters\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n      answer = {\n        type: 'answer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    if (!this._transportReady) await this.setupTransport({\n      localDtlsRole: 'client',\n      localSdpObject\n    });\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        trackId\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n      if (!transceiver) throw new Error('new RTCRtpTransceiver not found');\n      // Store in the map.\n      this._mapMidTransceiver.set(localId, transceiver);\n      results.push({\n        localId,\n        track: transceiver.receiver.track,\n        rtpReceiver: transceiver.receiver\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      this._remoteSdp.closeMediaSection(transceiver.mid);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const localId of localIds) {\n      this._mapMidTransceiver.delete(localId);\n    }\n  }\n  async pauseReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('pauseReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      transceiver.direction = 'inactive';\n      this._remoteSdp.pauseMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async resumeReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('resumeReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      transceiver.direction = 'recvonly';\n      this._remoteSdp.resumeReceivingMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async getReceiverStats(localId) {\n    this.assertRecvDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.receiver.getStats();\n  }\n  async receiveDataChannel(_ref4) {\n    let {\n      sctpStreamParameters,\n      label,\n      protocol\n    } = _ref4;\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport(_ref5) {\n    let {\n      localDtlsRole,\n      localSdpObject\n    } = _ref5;\n    if (!localSdpObject) localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.Firefox60 = Firefox60;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Firefox60","sdpTransform","require","Logger_1","errors_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","HandlerInterface_1","RemoteSdp_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","createFactory","constructor","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","name","close","debug","_pc","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","canvas","document","createElement","getContext","fakeStream","captureStream","fakeVideoTrack","getVideoTracks","addTransceiver","direction","videoTransceiver","parameters","sender","getParameters","encodings","rid","maxBitrate","setParameters","offer","createOffer","remove","stop","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","getNativeSctpCapabilities","numStreams","run","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","connectionState","addEventListener","warn","iceConnectionState","updateIceServers","UnsupportedError","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","codecOptions","codec","assertSendDirection","kind","id","clone","length","forEach","encoding","idx","reverse","sendingRtpParameters","codecs","reduceCodecs","sendingRemoteRtpParameters","transceiver","streams","localSdpObject","setupTransport","localDtlsRole","localId","mid","localDescription","offerMediaObject","media","rtcp","cname","getCname","getRtpEncodings","newEncodings","assign","mimeType","toLowerCase","scalabilityMode","offerRtpParameters","answerRtpParameters","extmapAllowMixed","set","rtpParameters","rtpSender","stopSending","Error","replaceTrack","removeTrack","disableMediaSection","delete","pauseSending","pauseMediaSection","resumeSending","resumeSendingMediaSection","setMaxSpatialLayer","spatialLayer","active","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","answerMediaObject","applyCodecParameters","write","getTransceivers","t","push","receiver","rtpReceiver","stopReceiving","localIds","closeMediaSection","pauseReceiving","resumeReceiving","resumeReceivingMediaSection","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","role","updateDtlsRole","Promise","resolve","reject","safeEmit"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/Firefox60.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Firefox60 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst logger = new Logger_1.Logger('Firefox60');\nconst SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };\nclass Firefox60 extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Firefox60();\n    }\n    constructor() {\n        super();\n        // Map of RTCTransceivers indexed by MID.\n        this._mapMidTransceiver = new Map();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'Firefox60';\n    }\n    close() {\n        logger.debug('close()');\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require'\n        });\n        // NOTE: We need to add a real video track to get the RID extension mapping.\n        const canvas = document.createElement('canvas');\n        // NOTE: Otherwise Firefox fails in next line.\n        canvas.getContext('2d');\n        const fakeStream = canvas.captureStream();\n        const fakeVideoTrack = fakeStream.getVideoTracks()[0];\n        try {\n            pc.addTransceiver('audio', { direction: 'sendrecv' });\n            const videoTransceiver = pc.addTransceiver(fakeVideoTrack, { direction: 'sendrecv' });\n            const parameters = videoTransceiver.sender.getParameters();\n            const encodings = [\n                { rid: 'r0', maxBitrate: 100000 },\n                { rid: 'r1', maxBitrate: 500000 }\n            ];\n            parameters.encodings = encodings;\n            await videoTransceiver.sender.setParameters(parameters);\n            const offer = await pc.createOffer();\n            try {\n                canvas.remove();\n            }\n            catch (error) { }\n            try {\n                fakeVideoTrack.stop();\n            }\n            catch (error) { }\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                canvas.remove();\n            }\n            catch (error2) { }\n            try {\n                fakeVideoTrack.stop();\n            }\n            catch (error2) { }\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers || [],\n            iceTransportPolicy: iceTransportPolicy || 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            ...additionalSettings\n        }, proprietaryConstraints);\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n                switch (this._pc.iceConnectionState) {\n                    case 'checking':\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    case 'connected':\n                    case 'completed':\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    case 'failed':\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    case 'disconnected':\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    case 'closed':\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                }\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async updateIceServers(iceServers) {\n        // NOTE: Firefox does not implement pc.setConfiguration().\n        throw new errors_1.UnsupportedError('not supported');\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady)\n            return;\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (encodings) {\n            encodings = utils.clone(encodings, []);\n            if (encodings.length > 1) {\n                encodings.forEach((encoding, idx) => {\n                    encoding.rid = `r${idx}`;\n                });\n                // Clone the encodings and reverse them because Firefox likes them\n                // from high to low.\n                encodings.reverse();\n            }\n        }\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        // NOTE: Firefox fails sometimes to properly anticipate the closed media\n        // section that it should use, so don't reuse closed media sections.\n        //   https://github.com/versatica/mediasoup-client/issues/104\n        //\n        // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });\n        // NOTE: This is not spec compliants. Encodings should be given in addTransceiver\n        // second argument, but Firefox does not support it.\n        if (encodings) {\n            const parameters = transceiver.sender.getParameters();\n            parameters.encodings = encodings;\n            await transceiver.sender.setParameters(parameters);\n        }\n        const offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        // In Firefox use DTLS role client even if we are the \"offerer\" since\n        // Firefox does not respect ICE-Lite.\n        if (!this._transportReady)\n            await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings by parsing the SDP offer if no encodings are given.\n        if (!encodings) {\n            sendingRtpParameters.encodings =\n                sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n        }\n        // Set RTP encodings by parsing the SDP offer and complete them with given\n        // one if just a single encoding has been given.\n        else if (encodings.length === 1) {\n            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            sendingRtpParameters.encodings = newEncodings;\n        }\n        // Otherwise if more than 1 encoding are given use them verbatim (but\n        // reverse them back since we reversed them above to satisfy Firefox).\n        else {\n            sendingRtpParameters.encodings = encodings.reverse();\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                encoding.scalabilityMode = 'S1T2';\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n        };\n    }\n    async stopSending(localId) {\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated transceiver not found');\n        transceiver.sender.replaceTrack(null);\n        // NOTE: Cannot use stop() the transceiver due to the the note above in\n        // send() method.\n        // try\n        // {\n        // \ttransceiver.stop();\n        // }\n        // catch (error)\n        // {}\n        this._pc.removeTrack(transceiver.sender);\n        // NOTE: Cannot use closeMediaSection() due to the the note above in send()\n        // method.\n        // this._remoteSdp!.closeMediaSection(transceiver.mid);\n        this._remoteSdp.disableMediaSection(transceiver.mid);\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        this.assertSendDirection();\n        logger.debug('pauseSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.direction = 'inactive';\n        this._remoteSdp.pauseMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        this.assertSendDirection();\n        logger.debug('resumeSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.direction = 'sendonly';\n        this._remoteSdp.resumeSendingMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated transceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        // NOTE: We require encodings given from low to high, however Firefox\n        // requires them in reverse order, so do magic here.\n        spatialLayer = parameters.encodings.length - 1 - spatialLayer;\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx >= spatialLayer)\n                encoding.active = true;\n            else\n                encoding.active = false;\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady)\n                await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    optionsList) {\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId || rtpParameters.rtcp.cname,\n                trackId\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media\n                .find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject\n            });\n            answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        if (!this._transportReady)\n            await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver)\n                throw new Error('new RTCRtpTransceiver not found');\n            // Store in the map.\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver\n            });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('pauseReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            transceiver.direction = 'inactive';\n            this._remoteSdp.pauseMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async resumeReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('resumeReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            transceiver.direction = 'recvonly';\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({ localDtlsRole: 'client', localSdpObject });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject)\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Firefox60 = Firefox60;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}