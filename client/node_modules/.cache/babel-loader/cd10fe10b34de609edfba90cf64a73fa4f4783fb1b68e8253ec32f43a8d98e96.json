{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ReadonlyWalletAccount_address, _ReadonlyWalletAccount_publicKey, _ReadonlyWalletAccount_chains, _ReadonlyWalletAccount_features, _ReadonlyWalletAccount_label, _ReadonlyWalletAccount_icon;\n/**\n * Base implementation of a {@link \"@wallet-standard/base\".WalletAccount} to be used or extended by a\n * {@link \"@wallet-standard/base\".Wallet}.\n *\n * `WalletAccount` properties must be read-only. This class enforces this by making all properties\n * [truly private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields) and\n * read-only, using getters for access, returning copies instead of references, and calling\n * [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n * on the instance.\n *\n * @group Account\n */\nexport class ReadonlyWalletAccount {\n  /**\n   * Create and freeze a read-only account.\n   *\n   * @param account Account to copy properties from.\n   */\n  constructor(account) {\n    _ReadonlyWalletAccount_address.set(this, void 0);\n    _ReadonlyWalletAccount_publicKey.set(this, void 0);\n    _ReadonlyWalletAccount_chains.set(this, void 0);\n    _ReadonlyWalletAccount_features.set(this, void 0);\n    _ReadonlyWalletAccount_label.set(this, void 0);\n    _ReadonlyWalletAccount_icon.set(this, void 0);\n    if (new.target === ReadonlyWalletAccount) {\n      Object.freeze(this);\n    }\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_address, account.address, \"f\");\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_publicKey, account.publicKey.slice(), \"f\");\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_chains, account.chains.slice(), \"f\");\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_features, account.features.slice(), \"f\");\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_label, account.label, \"f\");\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_icon, account.icon, \"f\");\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.address | WalletAccount::address} */\n  get address() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_address, \"f\");\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.publicKey | WalletAccount::publicKey} */\n  get publicKey() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_publicKey, \"f\").slice();\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.chains | WalletAccount::chains} */\n  get chains() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_chains, \"f\").slice();\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.features | WalletAccount::features} */\n  get features() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_features, \"f\").slice();\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.label | WalletAccount::label} */\n  get label() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_label, \"f\");\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.icon | WalletAccount::icon} */\n  get icon() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_icon, \"f\");\n  }\n}\n_ReadonlyWalletAccount_address = new WeakMap(), _ReadonlyWalletAccount_publicKey = new WeakMap(), _ReadonlyWalletAccount_chains = new WeakMap(), _ReadonlyWalletAccount_features = new WeakMap(), _ReadonlyWalletAccount_label = new WeakMap(), _ReadonlyWalletAccount_icon = new WeakMap();\n/**\n * Efficiently compare {@link Indexed} arrays (e.g. `Array` and `Uint8Array`).\n *\n * @param a An array.\n * @param b Another array.\n *\n * @return `true` if the arrays have the same length and elements, `false` otherwise.\n *\n * @group Util\n */\nexport function arraysEqual(a, b) {\n  if (a === b) return true;\n  const length = a.length;\n  if (length !== b.length) return false;\n  for (let i = 0; i < length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n/**\n * Efficiently compare byte arrays, using {@link arraysEqual}.\n *\n * @param a A byte array.\n * @param b Another byte array.\n *\n * @return `true` if the byte arrays have the same length and bytes, `false` otherwise.\n *\n * @group Util\n */\nexport function bytesEqual(a, b) {\n  return arraysEqual(a, b);\n}\n/**\n * Efficiently concatenate byte arrays without modifying them.\n *\n * @param first  A byte array.\n * @param others Additional byte arrays.\n *\n * @return New byte array containing the concatenation of all the byte arrays.\n *\n * @group Util\n */\nexport function concatBytes(first) {\n  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    others[_key - 1] = arguments[_key];\n  }\n  const length = others.reduce((length, bytes) => length + bytes.length, first.length);\n  const bytes = new Uint8Array(length);\n  bytes.set(first, 0);\n  for (const other of others) {\n    bytes.set(other, bytes.length);\n  }\n  return bytes;\n}\n/**\n * Create a new object with a subset of fields from a source object.\n *\n * @param source Object to pick fields from.\n * @param keys   Names of fields to pick.\n *\n * @return New object with only the picked fields.\n *\n * @group Util\n */\nexport function pick(source) {\n  const picked = {};\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n  for (const key of keys) {\n    picked[key] = source[key];\n  }\n  return picked;\n}\n/**\n * Call a callback function, catch an error if it throws, and log the error without rethrowing.\n *\n * @param callback Function to call.\n *\n * @group Util\n */\nexport function guard(callback) {\n  try {\n    callback();\n  } catch (error) {\n    console.error(error);\n  }\n}","map":{"version":3,"mappings":"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","names":["ReadonlyWalletAccount","constructor","account","_ReadonlyWalletAccount_address","_ReadonlyWalletAccount_publicKey","_ReadonlyWalletAccount_chains","_ReadonlyWalletAccount_features","_ReadonlyWalletAccount_label","_ReadonlyWalletAccount_icon","new","target","Object","freeze","__classPrivateFieldSet","address","publicKey","slice","chains","features","label","icon","__classPrivateFieldGet","arraysEqual","a","b","length","i","bytesEqual","concatBytes","first","others","reduce","bytes","Uint8Array","set","other","pick","source","picked","keys","key","guard","callback","error","console"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/node_modules/@wallet-standard/wallet/src/util.ts"],"sourcesContent":["import type { WalletAccount } from '@wallet-standard/base';\n\n/**\n * Base implementation of a {@link \"@wallet-standard/base\".WalletAccount} to be used or extended by a\n * {@link \"@wallet-standard/base\".Wallet}.\n *\n * `WalletAccount` properties must be read-only. This class enforces this by making all properties\n * [truly private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields) and\n * read-only, using getters for access, returning copies instead of references, and calling\n * [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n * on the instance.\n *\n * @group Account\n */\nexport class ReadonlyWalletAccount implements WalletAccount {\n    readonly #address: WalletAccount['address'];\n    readonly #publicKey: WalletAccount['publicKey'];\n    readonly #chains: WalletAccount['chains'];\n    readonly #features: WalletAccount['features'];\n    readonly #label: WalletAccount['label'];\n    readonly #icon: WalletAccount['icon'];\n\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.address | WalletAccount::address} */\n    get address() {\n        return this.#address;\n    }\n\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.publicKey | WalletAccount::publicKey} */\n    get publicKey() {\n        return this.#publicKey.slice();\n    }\n\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.chains | WalletAccount::chains} */\n    get chains() {\n        return this.#chains.slice();\n    }\n\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.features | WalletAccount::features} */\n    get features() {\n        return this.#features.slice();\n    }\n\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.label | WalletAccount::label} */\n    get label() {\n        return this.#label;\n    }\n\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.icon | WalletAccount::icon} */\n    get icon() {\n        return this.#icon;\n    }\n\n    /**\n     * Create and freeze a read-only account.\n     *\n     * @param account Account to copy properties from.\n     */\n    constructor(account: WalletAccount) {\n        if (new.target === ReadonlyWalletAccount) {\n            Object.freeze(this);\n        }\n\n        this.#address = account.address;\n        this.#publicKey = account.publicKey.slice();\n        this.#chains = account.chains.slice();\n        this.#features = account.features.slice();\n        this.#label = account.label;\n        this.#icon = account.icon;\n    }\n}\n\n/**\n * Efficiently compare {@link Indexed} arrays (e.g. `Array` and `Uint8Array`).\n *\n * @param a An array.\n * @param b Another array.\n *\n * @return `true` if the arrays have the same length and elements, `false` otherwise.\n *\n * @group Util\n */\nexport function arraysEqual<T>(a: Indexed<T>, b: Indexed<T>): boolean {\n    if (a === b) return true;\n\n    const length = a.length;\n    if (length !== b.length) return false;\n\n    for (let i = 0; i < length; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n}\n\n/**\n * Efficiently compare byte arrays, using {@link arraysEqual}.\n *\n * @param a A byte array.\n * @param b Another byte array.\n *\n * @return `true` if the byte arrays have the same length and bytes, `false` otherwise.\n *\n * @group Util\n */\nexport function bytesEqual(a: Uint8Array, b: Uint8Array): boolean {\n    return arraysEqual(a, b);\n}\n\n/**\n * Efficiently concatenate byte arrays without modifying them.\n *\n * @param first  A byte array.\n * @param others Additional byte arrays.\n *\n * @return New byte array containing the concatenation of all the byte arrays.\n *\n * @group Util\n */\nexport function concatBytes(first: Uint8Array, ...others: Uint8Array[]): Uint8Array {\n    const length = others.reduce((length, bytes) => length + bytes.length, first.length);\n    const bytes = new Uint8Array(length);\n\n    bytes.set(first, 0);\n    for (const other of others) {\n        bytes.set(other, bytes.length);\n    }\n\n    return bytes;\n}\n\n/**\n * Create a new object with a subset of fields from a source object.\n *\n * @param source Object to pick fields from.\n * @param keys   Names of fields to pick.\n *\n * @return New object with only the picked fields.\n *\n * @group Util\n */\nexport function pick<T, K extends keyof T>(source: T, ...keys: K[]): Pick<T, K> {\n    const picked = {} as Pick<T, K>;\n    for (const key of keys) {\n        picked[key] = source[key];\n    }\n    return picked;\n}\n\n/**\n * Call a callback function, catch an error if it throws, and log the error without rethrowing.\n *\n * @param callback Function to call.\n *\n * @group Util\n */\nexport function guard(callback: () => void) {\n    try {\n        callback();\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n/**\n * @internal\n *\n * Type with a numeric `length` and numerically indexed elements of a generic type `T`.\n *\n * For example, `Array<T>` and `Uint8Array`.\n *\n * @group Internal\n */\nexport interface Indexed<T> {\n    length: number;\n    [index: number]: T;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}