{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Edge11 = void 0;\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst edgeUtils = __importStar(require(\"./ortc/edgeUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('Edge11');\nclass Edge11 extends HandlerInterface_1.HandlerInterface {\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new Edge11();\n  }\n  constructor() {\n    super();\n    // Map of RTCRtpSenders indexed by id.\n    this._rtpSenders = new Map();\n    // Map of RTCRtpReceivers indexed by id.\n    this._rtpReceivers = new Map();\n    // Next localId for sending tracks.\n    this._nextSendLocalId = 0;\n    // Got transport local and remote parameters.\n    this._transportReady = false;\n  }\n  get name() {\n    return 'Edge11';\n  }\n  close() {\n    logger.debug('close()');\n    // Close the ICE gatherer.\n    // NOTE: Not yet implemented by Edge.\n    try {\n      this._iceGatherer.close();\n    } catch (error) {}\n    // Close the ICE transport.\n    try {\n      this._iceTransport.stop();\n    } catch (error) {}\n    // Close the DTLS transport.\n    try {\n      this._dtlsTransport.stop();\n    } catch (error) {}\n    // Close RTCRtpSenders.\n    for (const rtpSender of this._rtpSenders.values()) {\n      try {\n        rtpSender.stop();\n      } catch (error) {}\n    }\n    // Close RTCRtpReceivers.\n    for (const rtpReceiver of this._rtpReceivers.values()) {\n      try {\n        rtpReceiver.stop();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    return edgeUtils.getCapabilities();\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: {\n        OS: 0,\n        MIS: 0\n      }\n    };\n  }\n  run(_ref) {\n    let {\n      direction,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      iceServers,\n      iceTransportPolicy,\n      additionalSettings,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      proprietaryConstraints,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      extendedRtpCapabilities\n    } = _ref;\n    logger.debug('run()');\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._remoteIceParameters = iceParameters;\n    this._remoteIceCandidates = iceCandidates;\n    this._remoteDtlsParameters = dtlsParameters;\n    this._cname = `CNAME-${utils.generateRandomNumber()}`;\n    this.setIceGatherer({\n      iceServers,\n      iceTransportPolicy\n    });\n    this.setIceTransport();\n    this.setDtlsTransport();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async updateIceServers(iceServers) {\n    // NOTE: Edge 11 does not implement iceGatherer.gater().\n    throw new errors_1.UnsupportedError('not supported');\n  }\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    this._remoteIceParameters = iceParameters;\n    if (!this._transportReady) return;\n    logger.debug('restartIce() | calling iceTransport.start()');\n    this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');\n    for (const candidate of this._remoteIceCandidates) {\n      this._iceTransport.addRemoteCandidate(candidate);\n    }\n    this._iceTransport.addRemoteCandidate({});\n  }\n  async getTransportStats() {\n    return this._iceTransport.getStats();\n  }\n  async send( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _ref2) {\n    let {\n      track,\n      encodings,\n      codecOptions,\n      codec\n    } = _ref2;\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (!this._transportReady) await this.setupTransport({\n      localDtlsRole: 'server'\n    });\n    logger.debug('send() | calling new RTCRtpSender()');\n    const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n    const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n    rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n    const useRtx = rtpParameters.codecs.some(_codec => /.+\\/rtx$/i.test(_codec.mimeType));\n    if (!encodings) encodings = [{}];\n    for (const encoding of encodings) {\n      encoding.ssrc = utils.generateRandomNumber();\n      if (useRtx) encoding.rtx = {\n        ssrc: utils.generateRandomNumber()\n      };\n    }\n    rtpParameters.encodings = encodings;\n    // Fill RTCRtpParameters.rtcp.\n    rtpParameters.rtcp = {\n      cname: this._cname,\n      reducedSize: true,\n      mux: true\n    };\n    // NOTE: Convert our standard RTCRtpParameters into those that Edge\n    // expects.\n    const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n    logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);\n    await rtpSender.send(edgeRtpParameters);\n    const localId = String(this._nextSendLocalId);\n    this._nextSendLocalId++;\n    // Store it.\n    this._rtpSenders.set(localId, rtpSender);\n    return {\n      localId,\n      rtpParameters,\n      rtpSender\n    };\n  }\n  async stopSending(localId) {\n    logger.debug('stopSending() [localId:%s]', localId);\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    this._rtpSenders.delete(localId);\n    try {\n      logger.debug('stopSending() | calling rtpSender.stop()');\n      rtpSender.stop();\n    } catch (error) {\n      logger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n      throw error;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async pauseSending(localId) {\n    // Unimplemented.\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async resumeSending(localId) {\n    // Unimplemented.\n  }\n  async replaceTrack(localId, track) {\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    rtpSender.setTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) encoding.active = true;else encoding.active = false;\n    });\n    await rtpSender.setParameters(parameters);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await rtpSender.setParameters(parameters);\n  }\n  async getSenderStats(localId) {\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) throw new Error('RTCRtpSender not found');\n    return rtpSender.getStats();\n  }\n  async sendDataChannel(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    throw new errors_1.UnsupportedError('not implemented');\n  }\n  async receive(optionsList) {\n    const results = [];\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n    }\n    if (!this._transportReady) await this.setupTransport({\n      localDtlsRole: 'server'\n    });\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters\n      } = options;\n      logger.debug('receive() | calling new RTCRtpReceiver()');\n      const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n      rtpReceiver.addEventListener('error', event => {\n        logger.error('rtpReceiver \"error\" event [event:%o]', event);\n      });\n      // NOTE: Convert our standard RTCRtpParameters into those that Edge\n      // expects.\n      const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n      logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);\n      await rtpReceiver.receive(edgeRtpParameters);\n      const localId = trackId;\n      // Store it.\n      this._rtpReceivers.set(localId, rtpReceiver);\n      results.push({\n        localId,\n        track: rtpReceiver.track,\n        rtpReceiver\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const rtpReceiver = this._rtpReceivers.get(localId);\n      if (!rtpReceiver) throw new Error('RTCRtpReceiver not found');\n      this._rtpReceivers.delete(localId);\n      try {\n        logger.debug('stopReceiving() | calling rtpReceiver.stop()');\n        rtpReceiver.stop();\n      } catch (error) {\n        logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n      }\n    }\n  }\n  async pauseReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async resumeReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async getReceiverStats(localId) {\n    const rtpReceiver = this._rtpReceivers.get(localId);\n    if (!rtpReceiver) throw new Error('RTCRtpReceiver not found');\n    return rtpReceiver.getStats();\n  }\n  async receiveDataChannel(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    throw new errors_1.UnsupportedError('not implemented');\n  }\n  setIceGatherer(_ref3) {\n    let {\n      iceServers,\n      iceTransportPolicy\n    } = _ref3;\n    // @ts-ignore\n    const iceGatherer = new RTCIceGatherer({\n      iceServers: iceServers || [],\n      gatherPolicy: iceTransportPolicy || 'all'\n    });\n    iceGatherer.addEventListener('error', event => {\n      logger.error('iceGatherer \"error\" event [event:%o]', event);\n    });\n    // NOTE: Not yet implemented by Edge, which starts gathering automatically.\n    try {\n      iceGatherer.gather();\n    } catch (error) {\n      logger.debug('setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n    }\n    this._iceGatherer = iceGatherer;\n  }\n  setIceTransport() {\n    const iceTransport = new RTCIceTransport(this._iceGatherer);\n    // NOTE: Not yet implemented by Edge.\n    iceTransport.addEventListener('statechange', () => {\n      switch (iceTransport.state) {\n        case 'checking':\n          this.emit('@connectionstatechange', 'connecting');\n          break;\n        case 'connected':\n        case 'completed':\n          this.emit('@connectionstatechange', 'connected');\n          break;\n        case 'failed':\n          this.emit('@connectionstatechange', 'failed');\n          break;\n        case 'disconnected':\n          this.emit('@connectionstatechange', 'disconnected');\n          break;\n        case 'closed':\n          this.emit('@connectionstatechange', 'closed');\n          break;\n      }\n    });\n    // NOTE: Not standard, but implemented by Edge.\n    iceTransport.addEventListener('icestatechange', () => {\n      switch (iceTransport.state) {\n        case 'checking':\n          this.emit('@connectionstatechange', 'connecting');\n          break;\n        case 'connected':\n        case 'completed':\n          this.emit('@connectionstatechange', 'connected');\n          break;\n        case 'failed':\n          this.emit('@connectionstatechange', 'failed');\n          break;\n        case 'disconnected':\n          this.emit('@connectionstatechange', 'disconnected');\n          break;\n        case 'closed':\n          this.emit('@connectionstatechange', 'closed');\n          break;\n      }\n    });\n    iceTransport.addEventListener('candidatepairchange', event => {\n      logger.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n    });\n    this._iceTransport = iceTransport;\n  }\n  setDtlsTransport() {\n    const dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n    // NOTE: Not yet implemented by Edge.\n    dtlsTransport.addEventListener('statechange', () => {\n      logger.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n    });\n    // NOTE: Not standard, but implemented by Edge.\n    dtlsTransport.addEventListener('dtlsstatechange', () => {\n      logger.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n      if (dtlsTransport.state === 'closed') this.emit('@connectionstatechange', 'closed');\n    });\n    dtlsTransport.addEventListener('error', event => {\n      logger.error('dtlsTransport \"error\" event [event:%o]', event);\n    });\n    this._dtlsTransport = dtlsTransport;\n  }\n  async setupTransport(_ref4) {\n    let {\n      localDtlsRole\n    } = _ref4;\n    logger.debug('setupTransport()');\n    // Get our local DTLS parameters.\n    const dtlsParameters = this._dtlsTransport.getLocalParameters();\n    dtlsParameters.role = localDtlsRole;\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    // Start the RTCIceTransport.\n    this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');\n    // Add remote ICE candidates.\n    for (const candidate of this._remoteIceCandidates) {\n      this._iceTransport.addRemoteCandidate(candidate);\n    }\n    // Also signal a 'complete' candidate as per spec.\n    // NOTE: It should be {complete: true} but Edge prefers {}.\n    // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n    // won't enter the 'completed' state.\n    this._iceTransport.addRemoteCandidate({});\n    // NOTE: Edge does not like SHA less than 256.\n    this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter(fingerprint => {\n      return fingerprint.algorithm === 'sha-256' || fingerprint.algorithm === 'sha-384' || fingerprint.algorithm === 'sha-512';\n    });\n    // Start the RTCDtlsTransport.\n    this._dtlsTransport.start(this._remoteDtlsParameters);\n    this._transportReady = true;\n  }\n}\nexports.Edge11 = Edge11;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Edge11","Logger_1","require","errors_1","utils","ortc","edgeUtils","HandlerInterface_1","logger","Logger","HandlerInterface","createFactory","constructor","_rtpSenders","Map","_rtpReceivers","_nextSendLocalId","_transportReady","name","close","debug","_iceGatherer","error","_iceTransport","stop","_dtlsTransport","rtpSender","values","rtpReceiver","emit","getNativeRtpCapabilities","getCapabilities","getNativeSctpCapabilities","numStreams","OS","MIS","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","iceServers","iceTransportPolicy","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_remoteIceParameters","_remoteIceCandidates","_remoteDtlsParameters","_cname","generateRandomNumber","setIceGatherer","setIceTransport","setDtlsTransport","updateIceServers","UnsupportedError","restartIce","start","candidate","addRemoteCandidate","getTransportStats","getStats","send","track","encodings","codecOptions","codec","kind","id","setupTransport","localDtlsRole","RTCRtpSender","rtpParameters","clone","codecs","reduceCodecs","useRtx","some","_codec","test","mimeType","encoding","ssrc","rtx","rtcp","cname","reducedSize","mux","edgeRtpParameters","mangleRtpParameters","localId","String","set","stopSending","Error","delete","warn","pauseSending","resumeSending","replaceTrack","setTrack","setMaxSpatialLayer","spatialLayer","parameters","getParameters","forEach","idx","active","setParameters","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","options","receive","optionsList","results","trackId","RTCRtpReceiver","addEventListener","event","push","stopReceiving","localIds","pauseReceiving","resumeReceiving","getReceiverStats","receiveDataChannel","iceGatherer","RTCIceGatherer","gatherPolicy","gather","toString","iceTransport","RTCIceTransport","state","pair","dtlsTransport","RTCDtlsTransport","getLocalParameters","role","Promise","resolve","reject","safeEmit","fingerprints","filter","fingerprint","algorithm"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/Edge11.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Edge11 = void 0;\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst edgeUtils = __importStar(require(\"./ortc/edgeUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('Edge11');\nclass Edge11 extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Edge11();\n    }\n    constructor() {\n        super();\n        // Map of RTCRtpSenders indexed by id.\n        this._rtpSenders = new Map();\n        // Map of RTCRtpReceivers indexed by id.\n        this._rtpReceivers = new Map();\n        // Next localId for sending tracks.\n        this._nextSendLocalId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'Edge11';\n    }\n    close() {\n        logger.debug('close()');\n        // Close the ICE gatherer.\n        // NOTE: Not yet implemented by Edge.\n        try {\n            this._iceGatherer.close();\n        }\n        catch (error) { }\n        // Close the ICE transport.\n        try {\n            this._iceTransport.stop();\n        }\n        catch (error) { }\n        // Close the DTLS transport.\n        try {\n            this._dtlsTransport.stop();\n        }\n        catch (error) { }\n        // Close RTCRtpSenders.\n        for (const rtpSender of this._rtpSenders.values()) {\n            try {\n                rtpSender.stop();\n            }\n            catch (error) { }\n        }\n        // Close RTCRtpReceivers.\n        for (const rtpReceiver of this._rtpReceivers.values()) {\n            try {\n                rtpReceiver.stop();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        return edgeUtils.getCapabilities();\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: { OS: 0, MIS: 0 }\n        };\n    }\n    run({ direction, // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceParameters, iceCandidates, dtlsParameters, sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceServers, iceTransportPolicy, additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars\n    proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars\n    extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._remoteIceParameters = iceParameters;\n        this._remoteIceCandidates = iceCandidates;\n        this._remoteDtlsParameters = dtlsParameters;\n        this._cname = `CNAME-${utils.generateRandomNumber()}`;\n        this.setIceGatherer({ iceServers, iceTransportPolicy });\n        this.setIceTransport();\n        this.setDtlsTransport();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async updateIceServers(iceServers) {\n        // NOTE: Edge 11 does not implement iceGatherer.gater().\n        throw new errors_1.UnsupportedError('not supported');\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        this._remoteIceParameters = iceParameters;\n        if (!this._transportReady)\n            return;\n        logger.debug('restartIce() | calling iceTransport.start()');\n        this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');\n        for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n        }\n        this._iceTransport.addRemoteCandidate({});\n    }\n    async getTransportStats() {\n        return this._iceTransport.getStats();\n    }\n    async send(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { track, encodings, codecOptions, codec }) {\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (!this._transportReady)\n            await this.setupTransport({ localDtlsRole: 'server' });\n        logger.debug('send() | calling new RTCRtpSender()');\n        const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n        const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n        const useRtx = rtpParameters.codecs\n            .some((_codec) => /.+\\/rtx$/i.test(_codec.mimeType));\n        if (!encodings)\n            encodings = [{}];\n        for (const encoding of encodings) {\n            encoding.ssrc = utils.generateRandomNumber();\n            if (useRtx)\n                encoding.rtx = { ssrc: utils.generateRandomNumber() };\n        }\n        rtpParameters.encodings = encodings;\n        // Fill RTCRtpParameters.rtcp.\n        rtpParameters.rtcp =\n            {\n                cname: this._cname,\n                reducedSize: true,\n                mux: true\n            };\n        // NOTE: Convert our standard RTCRtpParameters into those that Edge\n        // expects.\n        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n        logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);\n        await rtpSender.send(edgeRtpParameters);\n        const localId = String(this._nextSendLocalId);\n        this._nextSendLocalId++;\n        // Store it.\n        this._rtpSenders.set(localId, rtpSender);\n        return { localId, rtpParameters, rtpSender };\n    }\n    async stopSending(localId) {\n        logger.debug('stopSending() [localId:%s]', localId);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        this._rtpSenders.delete(localId);\n        try {\n            logger.debug('stopSending() | calling rtpSender.stop()');\n            rtpSender.stop();\n        }\n        catch (error) {\n            logger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n            throw error;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        // Unimplemented.\n    }\n    async replaceTrack(localId, track) {\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        rtpSender.setTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        const parameters = rtpSender.getParameters();\n        parameters.encodings\n            .forEach((encoding, idx) => {\n            if (idx <= spatialLayer)\n                encoding.active = true;\n            else\n                encoding.active = false;\n        });\n        await rtpSender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        const parameters = rtpSender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await rtpSender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender)\n            throw new Error('RTCRtpSender not found');\n        return rtpSender.getStats();\n    }\n    async sendDataChannel(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    async receive(optionsList) {\n        const results = [];\n        for (const options of optionsList) {\n            const { trackId, kind } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n        }\n        if (!this._transportReady)\n            await this.setupTransport({ localDtlsRole: 'server' });\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters } = options;\n            logger.debug('receive() | calling new RTCRtpReceiver()');\n            const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n            rtpReceiver.addEventListener('error', (event) => {\n                logger.error('rtpReceiver \"error\" event [event:%o]', event);\n            });\n            // NOTE: Convert our standard RTCRtpParameters into those that Edge\n            // expects.\n            const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n            logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);\n            await rtpReceiver.receive(edgeRtpParameters);\n            const localId = trackId;\n            // Store it.\n            this._rtpReceivers.set(localId, rtpReceiver);\n            results.push({\n                localId,\n                track: rtpReceiver.track,\n                rtpReceiver\n            });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const rtpReceiver = this._rtpReceivers.get(localId);\n            if (!rtpReceiver)\n                throw new Error('RTCRtpReceiver not found');\n            this._rtpReceivers.delete(localId);\n            try {\n                logger.debug('stopReceiving() | calling rtpReceiver.stop()');\n                rtpReceiver.stop();\n            }\n            catch (error) {\n                logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n            }\n        }\n    }\n    async pauseReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async resumeReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async getReceiverStats(localId) {\n        const rtpReceiver = this._rtpReceivers.get(localId);\n        if (!rtpReceiver)\n            throw new Error('RTCRtpReceiver not found');\n        return rtpReceiver.getStats();\n    }\n    async receiveDataChannel(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    setIceGatherer({ iceServers, iceTransportPolicy }) {\n        // @ts-ignore\n        const iceGatherer = new RTCIceGatherer({\n            iceServers: iceServers || [],\n            gatherPolicy: iceTransportPolicy || 'all'\n        });\n        iceGatherer.addEventListener('error', (event) => {\n            logger.error('iceGatherer \"error\" event [event:%o]', event);\n        });\n        // NOTE: Not yet implemented by Edge, which starts gathering automatically.\n        try {\n            iceGatherer.gather();\n        }\n        catch (error) {\n            logger.debug('setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n        }\n        this._iceGatherer = iceGatherer;\n    }\n    setIceTransport() {\n        const iceTransport = new RTCIceTransport(this._iceGatherer);\n        // NOTE: Not yet implemented by Edge.\n        iceTransport.addEventListener('statechange', () => {\n            switch (iceTransport.state) {\n                case 'checking':\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                case 'connected':\n                case 'completed':\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                case 'failed':\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                case 'disconnected':\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                case 'closed':\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n            }\n        });\n        // NOTE: Not standard, but implemented by Edge.\n        iceTransport.addEventListener('icestatechange', () => {\n            switch (iceTransport.state) {\n                case 'checking':\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                case 'connected':\n                case 'completed':\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                case 'failed':\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                case 'disconnected':\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                case 'closed':\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n            }\n        });\n        iceTransport.addEventListener('candidatepairchange', (event) => {\n            logger.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n        });\n        this._iceTransport = iceTransport;\n    }\n    setDtlsTransport() {\n        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n        // NOTE: Not yet implemented by Edge.\n        dtlsTransport.addEventListener('statechange', () => {\n            logger.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n        });\n        // NOTE: Not standard, but implemented by Edge.\n        dtlsTransport.addEventListener('dtlsstatechange', () => {\n            logger.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n            if (dtlsTransport.state === 'closed')\n                this.emit('@connectionstatechange', 'closed');\n        });\n        dtlsTransport.addEventListener('error', (event) => {\n            logger.error('dtlsTransport \"error\" event [event:%o]', event);\n        });\n        this._dtlsTransport = dtlsTransport;\n    }\n    async setupTransport({ localDtlsRole }) {\n        logger.debug('setupTransport()');\n        // Get our local DTLS parameters.\n        const dtlsParameters = this._dtlsTransport.getLocalParameters();\n        dtlsParameters.role = localDtlsRole;\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        // Start the RTCIceTransport.\n        this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');\n        // Add remote ICE candidates.\n        for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n        }\n        // Also signal a 'complete' candidate as per spec.\n        // NOTE: It should be {complete: true} but Edge prefers {}.\n        // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n        // won't enter the 'completed' state.\n        this._iceTransport.addRemoteCandidate({});\n        // NOTE: Edge does not like SHA less than 256.\n        this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints\n            .filter((fingerprint) => {\n            return (fingerprint.algorithm === 'sha-256' ||\n                fingerprint.algorithm === 'sha-384' ||\n                fingerprint.algorithm === 'sha-512');\n        });\n        // Start the RTCDtlsTransport.\n        this._dtlsTransport.start(this._remoteDtlsParameters);\n        this._transportReady = true;\n    }\n}\nexports.Edge11 = Edge11;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}