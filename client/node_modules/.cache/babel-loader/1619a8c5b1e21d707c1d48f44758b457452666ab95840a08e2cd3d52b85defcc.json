{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */\n\nimport { ObliviousSet } from 'oblivious-set';\nimport { io } from 'socket.io-client';\nimport { getPublic, sign } from '@toruslabs/eccrypto';\nimport { encryptData, decryptData } from '@toruslabs/metadata-helpers';\nimport createKeccakHash from 'keccak';\nimport { log } from '../util';\nimport { fillOptionsWithDefaults } from '../options';\nimport { sleep, randomToken, microSeconds as micro } from '../util';\nexport var microSeconds = micro;\n\n// PASS IN STRING/BUFFER TO GET BUFFER\nexport function keccak256(a) {\n  return createKeccakHash('keccak256').update(a).digest();\n}\nvar KEY_PREFIX = 'pubkey.broadcastChannel-';\nexport var type = 'server';\nvar SOCKET_CONN_INSTANCE = null;\n// used to decide to reconnect socket e.g. when socket connection is disconnected unexpectedly\nvar runningChannels = new Set();\nexport function storageKey(channelName) {\n  return KEY_PREFIX + channelName;\n}\n\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */\nexport function postMessage(channelState, messageJson) {\n  return new Promise(function (res, rej) {\n    sleep().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var key, channelEncPrivKey, encData, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = storageKey(channelState.channelName);\n              channelEncPrivKey = keccak256(key);\n              _context.next = 4;\n              return encryptData(channelEncPrivKey.toString('hex'), {\n                token: randomToken(),\n                time: new Date().getTime(),\n                data: messageJson,\n                uuid: channelState.uuid\n              });\n            case 4:\n              encData = _context.sent;\n              _context.t0 = getPublic(channelEncPrivKey).toString('hex');\n              _context.t1 = encData;\n              _context.next = 9;\n              return sign(channelEncPrivKey, keccak256(encData));\n            case 9:\n              _context.t2 = _context.sent.toString('hex');\n              body = {\n                key: _context.t0,\n                data: _context.t1,\n                signature: _context.t2\n              };\n              if (channelState.timeout) body.timeout = channelState.timeout;\n              return _context.abrupt(\"return\", fetch(channelState.serverUrl + '/channel/set', {\n                method: 'POST',\n                body: JSON.stringify(body),\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8'\n                }\n              }).then(res)[\"catch\"](rej));\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  });\n}\nexport function getSocketInstance(serverUrl) {\n  if (SOCKET_CONN_INSTANCE) {\n    return SOCKET_CONN_INSTANCE;\n  }\n  var SOCKET_CONN = io(serverUrl, {\n    transports: ['websocket', 'polling'],\n    // use WebSocket first, if available\n    withCredentials: true,\n    reconnectionDelayMax: 10000,\n    reconnectionAttempts: 10\n  });\n  SOCKET_CONN.on('connect_error', function (err) {\n    // revert to classic upgrade\n    SOCKET_CONN.io.opts.transports = ['polling', 'websocket'];\n    log.error('connect error', err);\n  });\n  SOCKET_CONN.on('connect', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var engine;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            engine = SOCKET_CONN.io.engine;\n            log.debug('initially connected to', engine.transport.name); // in most cases, prints \"polling\"\n            engine.once('upgrade', function () {\n              // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n              log.debug('upgraded', engine.transport.name); // in most cases, prints \"websocket\"\n            });\n\n            engine.once('close', function (reason) {\n              // called when the underlying connection is closed\n              log.debug('connection closed', reason);\n            });\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  SOCKET_CONN.on('error', function (err) {\n    log.error('socket errored', err);\n    SOCKET_CONN.disconnect();\n  });\n  SOCKET_CONN_INSTANCE = SOCKET_CONN;\n  return SOCKET_CONN;\n}\nexport function setupSocketConnection(serverUrl, channelName, fn) {\n  var socketConn = getSocketInstance(serverUrl);\n  var key = storageKey(channelName);\n  var channelEncPrivKey = keccak256(key);\n  var channelPubKey = getPublic(channelEncPrivKey).toString('hex');\n  if (socketConn.connected) {\n    socketConn.emit('check_auth_status', channelPubKey);\n  } else {\n    socketConn.once('connect', function () {\n      log.debug('connected with socket');\n      socketConn.emit('check_auth_status', channelPubKey);\n    });\n  }\n  var reconnect = function reconnect() {\n    socketConn.once('connect', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              socketConn.emit('check_auth_status', channelPubKey);\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n  };\n  var visibilityListener = function visibilityListener() {\n    // if channel is closed, then remove the listener.\n    if (!socketConn) {\n      document.removeEventListener('visibilitychange', visibilityListener);\n      return;\n    }\n    // if not connected, then wait for connection and ping server for latest msg.\n    if (!socketConn.connected && document.visibilityState === 'visible') {\n      reconnect();\n    }\n  };\n  var listener = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ev) {\n      var decData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return decryptData(channelEncPrivKey.toString('hex'), ev);\n            case 3:\n              decData = _context4.sent;\n              log.info(decData);\n              fn(decData);\n              _context4.next = 11;\n              break;\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n              log.error(_context4.t0);\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 8]]);\n    }));\n    return function listener(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  socketConn.on('disconnect', function () {\n    log.debug('socket disconnected');\n    if (runningChannels.has(channelName)) {\n      log.error('socket disconnected unexpectedly, reconnecting socket');\n      reconnect();\n    }\n  });\n  socketConn.on(channelPubKey + \"_success\", listener);\n  document.addEventListener('visibilitychange', visibilityListener);\n  return socketConn;\n}\nexport function removeStorageEventListener() {\n  if (SOCKET_CONN_INSTANCE) {\n    SOCKET_CONN_INSTANCE.disconnect();\n  }\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  if (!canBeUsed(options)) {\n    throw new Error('BroadcastChannel: server cannot be used');\n  }\n  var uuid = randomToken();\n\n  /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */\n  var eMIs = new ObliviousSet(options.server.removeTimeout);\n  var state = {\n    channelName: channelName,\n    uuid: uuid,\n    eMIs: eMIs,\n    // emittedMessagesIds\n    serverUrl: options.server.url\n  };\n  if (options.server.timeout) state.timeout = options.server.timeout;\n  setupSocketConnection(options.server.url, channelName, function (msgObj) {\n    if (!state.messagesCallback) return; // no listener\n    if (msgObj.uuid === state.uuid) return; // own message\n    if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted\n    // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n\n    state.eMIs.add(msgObj.token);\n    state.messagesCallback(msgObj.data);\n  });\n  runningChannels.add(channelName);\n  return state;\n}\nexport function close(channelState) {\n  runningChannels[\"delete\"](channelState.channelName);\n  // give 2 sec for all msgs which are in transit to be consumed\n  // by receiver.\n  // window.setTimeout(() => {\n  //     removeStorageEventListener(channelState);\n  //     SOCKET_CONN_INSTANCE = null;\n  // }, 1000);\n}\n\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  return true;\n}\nexport function averageResponseTime() {\n  var defaultTime = 500;\n  // TODO: Maybe increase it based on operation\n  return defaultTime;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"names":["_asyncToGenerator","_regeneratorRuntime","ObliviousSet","io","getPublic","sign","encryptData","decryptData","createKeccakHash","log","fillOptionsWithDefaults","sleep","randomToken","microSeconds","micro","keccak256","a","update","digest","KEY_PREFIX","type","SOCKET_CONN_INSTANCE","runningChannels","Set","storageKey","channelName","postMessage","channelState","messageJson","Promise","res","rej","then","mark","_callee","key","channelEncPrivKey","encData","body","wrap","_callee$","_context","prev","next","toString","token","time","Date","getTime","data","uuid","sent","t0","t1","t2","signature","timeout","abrupt","fetch","serverUrl","method","JSON","stringify","headers","stop","getSocketInstance","SOCKET_CONN","transports","withCredentials","reconnectionDelayMax","reconnectionAttempts","on","err","opts","error","_callee2","engine","_callee2$","_context2","debug","transport","name","once","reason","disconnect","setupSocketConnection","fn","socketConn","channelPubKey","connected","emit","reconnect","_callee3","_callee3$","_context3","visibilityListener","document","removeEventListener","visibilityState","listener","_ref4","_callee4","ev","decData","_callee4$","_context4","info","_x","apply","arguments","has","addEventListener","removeStorageEventListener","create","options","canBeUsed","Error","eMIs","server","removeTimeout","state","url","msgObj","messagesCallback","add","close","onMessage","messagesCallbackTime","averageResponseTime","defaultTime"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@toruslabs/broadcast-channel/dist/esbrowser/methods/server.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */\n\nimport { ObliviousSet } from 'oblivious-set';\nimport { io } from 'socket.io-client';\nimport { getPublic, sign } from '@toruslabs/eccrypto';\nimport { encryptData, decryptData } from '@toruslabs/metadata-helpers';\nimport createKeccakHash from 'keccak';\nimport { log } from '../util';\nimport { fillOptionsWithDefaults } from '../options';\nimport { sleep, randomToken, microSeconds as micro } from '../util';\nexport var microSeconds = micro;\n\n// PASS IN STRING/BUFFER TO GET BUFFER\nexport function keccak256(a) {\n  return createKeccakHash('keccak256').update(a).digest();\n}\nvar KEY_PREFIX = 'pubkey.broadcastChannel-';\nexport var type = 'server';\nvar SOCKET_CONN_INSTANCE = null;\n// used to decide to reconnect socket e.g. when socket connection is disconnected unexpectedly\nvar runningChannels = new Set();\nexport function storageKey(channelName) {\n  return KEY_PREFIX + channelName;\n}\n\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */\nexport function postMessage(channelState, messageJson) {\n  return new Promise(function (res, rej) {\n    sleep().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var key, channelEncPrivKey, encData, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = storageKey(channelState.channelName);\n              channelEncPrivKey = keccak256(key);\n              _context.next = 4;\n              return encryptData(channelEncPrivKey.toString('hex'), {\n                token: randomToken(),\n                time: new Date().getTime(),\n                data: messageJson,\n                uuid: channelState.uuid\n              });\n            case 4:\n              encData = _context.sent;\n              _context.t0 = getPublic(channelEncPrivKey).toString('hex');\n              _context.t1 = encData;\n              _context.next = 9;\n              return sign(channelEncPrivKey, keccak256(encData));\n            case 9:\n              _context.t2 = _context.sent.toString('hex');\n              body = {\n                key: _context.t0,\n                data: _context.t1,\n                signature: _context.t2\n              };\n              if (channelState.timeout) body.timeout = channelState.timeout;\n              return _context.abrupt(\"return\", fetch(channelState.serverUrl + '/channel/set', {\n                method: 'POST',\n                body: JSON.stringify(body),\n                headers: {\n                  'Content-Type': 'application/json; charset=utf-8'\n                }\n              }).then(res)[\"catch\"](rej));\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  });\n}\nexport function getSocketInstance(serverUrl) {\n  if (SOCKET_CONN_INSTANCE) {\n    return SOCKET_CONN_INSTANCE;\n  }\n  var SOCKET_CONN = io(serverUrl, {\n    transports: ['websocket', 'polling'],\n    // use WebSocket first, if available\n    withCredentials: true,\n    reconnectionDelayMax: 10000,\n    reconnectionAttempts: 10\n  });\n  SOCKET_CONN.on('connect_error', function (err) {\n    // revert to classic upgrade\n    SOCKET_CONN.io.opts.transports = ['polling', 'websocket'];\n    log.error('connect error', err);\n  });\n  SOCKET_CONN.on('connect', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var engine;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            engine = SOCKET_CONN.io.engine;\n            log.debug('initially connected to', engine.transport.name); // in most cases, prints \"polling\"\n            engine.once('upgrade', function () {\n              // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n              log.debug('upgraded', engine.transport.name); // in most cases, prints \"websocket\"\n            });\n\n            engine.once('close', function (reason) {\n              // called when the underlying connection is closed\n              log.debug('connection closed', reason);\n            });\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  SOCKET_CONN.on('error', function (err) {\n    log.error('socket errored', err);\n    SOCKET_CONN.disconnect();\n  });\n  SOCKET_CONN_INSTANCE = SOCKET_CONN;\n  return SOCKET_CONN;\n}\nexport function setupSocketConnection(serverUrl, channelName, fn) {\n  var socketConn = getSocketInstance(serverUrl);\n  var key = storageKey(channelName);\n  var channelEncPrivKey = keccak256(key);\n  var channelPubKey = getPublic(channelEncPrivKey).toString('hex');\n  if (socketConn.connected) {\n    socketConn.emit('check_auth_status', channelPubKey);\n  } else {\n    socketConn.once('connect', function () {\n      log.debug('connected with socket');\n      socketConn.emit('check_auth_status', channelPubKey);\n    });\n  }\n  var reconnect = function reconnect() {\n    socketConn.once('connect', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              socketConn.emit('check_auth_status', channelPubKey);\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    })));\n  };\n  var visibilityListener = function visibilityListener() {\n    // if channel is closed, then remove the listener.\n    if (!socketConn) {\n      document.removeEventListener('visibilitychange', visibilityListener);\n      return;\n    }\n    // if not connected, then wait for connection and ping server for latest msg.\n    if (!socketConn.connected && document.visibilityState === 'visible') {\n      reconnect();\n    }\n  };\n  var listener = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ev) {\n      var decData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return decryptData(channelEncPrivKey.toString('hex'), ev);\n            case 3:\n              decData = _context4.sent;\n              log.info(decData);\n              fn(decData);\n              _context4.next = 11;\n              break;\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](0);\n              log.error(_context4.t0);\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 8]]);\n    }));\n    return function listener(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  socketConn.on('disconnect', function () {\n    log.debug('socket disconnected');\n    if (runningChannels.has(channelName)) {\n      log.error('socket disconnected unexpectedly, reconnecting socket');\n      reconnect();\n    }\n  });\n  socketConn.on(channelPubKey + \"_success\", listener);\n  document.addEventListener('visibilitychange', visibilityListener);\n  return socketConn;\n}\nexport function removeStorageEventListener() {\n  if (SOCKET_CONN_INSTANCE) {\n    SOCKET_CONN_INSTANCE.disconnect();\n  }\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  if (!canBeUsed(options)) {\n    throw new Error('BroadcastChannel: server cannot be used');\n  }\n  var uuid = randomToken();\n\n  /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */\n  var eMIs = new ObliviousSet(options.server.removeTimeout);\n  var state = {\n    channelName: channelName,\n    uuid: uuid,\n    eMIs: eMIs,\n    // emittedMessagesIds\n    serverUrl: options.server.url\n  };\n  if (options.server.timeout) state.timeout = options.server.timeout;\n  setupSocketConnection(options.server.url, channelName, function (msgObj) {\n    if (!state.messagesCallback) return; // no listener\n    if (msgObj.uuid === state.uuid) return; // own message\n    if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted\n    // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n\n    state.eMIs.add(msgObj.token);\n    state.messagesCallback(msgObj.data);\n  });\n  runningChannels.add(channelName);\n  return state;\n}\nexport function close(channelState) {\n  runningChannels[\"delete\"](channelState.channelName);\n  // give 2 sec for all msgs which are in transit to be consumed\n  // by receiver.\n  // window.setTimeout(() => {\n  //     removeStorageEventListener(channelState);\n  //     SOCKET_CONN_INSTANCE = null;\n  // }, 1000);\n}\n\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  return true;\n}\nexport function averageResponseTime() {\n  var defaultTime = 500;\n  // TODO: Maybe increase it based on operation\n  return defaultTime;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}