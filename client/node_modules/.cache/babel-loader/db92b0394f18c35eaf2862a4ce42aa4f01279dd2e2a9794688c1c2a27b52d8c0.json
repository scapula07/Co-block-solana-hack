{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoCoinInfo = exports.Network = exports.Type = void 0;\nconst lib_1 = require(\"./lib\");\nconst RegistryItem_1 = require(\"./RegistryItem\");\nconst RegistryType_1 = require(\"./RegistryType\");\nvar Keys;\n(function (Keys) {\n  Keys[\"type\"] = \"1\";\n  Keys[\"network\"] = \"2\";\n})(Keys || (Keys = {}));\nvar Type;\n(function (Type) {\n  Type[Type[\"bitcoin\"] = 0] = \"bitcoin\";\n})(Type = exports.Type || (exports.Type = {}));\nvar Network;\n(function (Network) {\n  Network[Network[\"mainnet\"] = 0] = \"mainnet\";\n  Network[Network[\"testnet\"] = 1] = \"testnet\";\n})(Network = exports.Network || (exports.Network = {}));\nclass CryptoCoinInfo extends RegistryItem_1.RegistryItem {\n  constructor(type, network) {\n    super();\n    this.type = type;\n    this.network = network;\n    this.getRegistryType = () => {\n      return RegistryType_1.RegistryTypes.CRYPTO_COIN_INFO;\n    };\n    this.getType = () => {\n      return this.type || Type.bitcoin;\n    };\n    this.getNetwork = () => {\n      return this.network || Network.mainnet;\n    };\n    this.toDataItem = () => {\n      const map = {};\n      if (this.type) {\n        map[Keys.type] = this.type;\n      }\n      if (this.network) {\n        map[Keys.network] = this.network;\n      }\n      return new lib_1.DataItem(map);\n    };\n  }\n}\nexports.CryptoCoinInfo = CryptoCoinInfo;\nCryptoCoinInfo.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const type = map[Keys.type];\n  const network = map[Keys.network];\n  return new CryptoCoinInfo(type, network);\n};\nCryptoCoinInfo.fromCBOR = _cborPayload => {\n  const dataItem = (0, lib_1.decodeToDataItem)(_cborPayload);\n  return CryptoCoinInfo.fromDataItem(dataItem);\n};","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAGA,IAAKA,IAGJ;AAHD,WAAKA,IAAI;EACPA,kBAAU;EACVA,qBAAa;AACf,CAAC,EAHIA,IAAI,KAAJA,IAAI;AAKT,IAAYC,IAEX;AAFD,WAAYA,IAAI;EACdA,qCAAW;AACb,CAAC,EAFWA,IAAI,GAAJC,YAAI,KAAJA,YAAI;AAIhB,IAAYC,OAGX;AAHD,WAAYA,OAAO;EACjBA,2CAAO;EACPA,2CAAO;AACT,CAAC,EAHWA,OAAO,GAAPD,eAAO,KAAPA,eAAO;AAKnB,MAAaE,cAAe,SAAQC,2BAAY;EAK9CC,YAAoBC,IAAW,EAAUC,OAAiB;IACxD,KAAK,EAAE;IADW,SAAI,GAAJD,IAAI;IAAiB,YAAO,GAAPC,OAAO;IAJhD,oBAAe,GAAG,MAAK;MACrB,OAAOC,4BAAa,CAACC,gBAAgB;IACvC,CAAC;IAMM,YAAO,GAAG,MAAK;MACpB,OAAO,IAAI,CAACH,IAAI,IAAIN,IAAI,CAACU,OAAO;IAClC,CAAC;IAEM,eAAU,GAAG,MAAK;MACvB,OAAO,IAAI,CAACH,OAAO,IAAIL,OAAO,CAACS,OAAO;IACxC,CAAC;IAEM,eAAU,GAAG,MAAK;MACvB,MAAMC,GAAG,GAAgB,EAAE;MAC3B,IAAI,IAAI,CAACN,IAAI,EAAE;QACbM,GAAG,CAACb,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACA,IAAI;;MAE5B,IAAI,IAAI,CAACC,OAAO,EAAE;QAChBK,GAAG,CAACb,IAAI,CAACQ,OAAO,CAAC,GAAG,IAAI,CAACA,OAAO;;MAElC,OAAO,IAAIM,cAAQ,CAACD,GAAG,CAAC;IAC1B,CAAC;EAnBD;;AAPFX;AA4BgBE,2BAAY,GAAIW,QAAkB,IAAI;EAClD,MAAMF,GAAG,GAAGE,QAAQ,CAACC,OAAO,EAAE;EAC9B,MAAMT,IAAI,GAAGM,GAAG,CAACb,IAAI,CAACO,IAAI,CAAC;EAC3B,MAAMC,OAAO,GAAGK,GAAG,CAACb,IAAI,CAACQ,OAAO,CAAC;EACjC,OAAO,IAAIJ,cAAc,CAACG,IAAI,EAAEC,OAAO,CAAC;AAC1C,CAAC;AAEaJ,uBAAQ,GAAIa,YAAoB,IAAI;EAChD,MAAMF,QAAQ,GAAG,0BAAgB,EAACE,YAAY,CAAC;EAC/C,OAAOb,cAAc,CAACc,YAAY,CAACH,QAAQ,CAAC;AAC9C,CAAC","names":["Keys","Type","exports","Network","CryptoCoinInfo","RegistryItem_1","constructor","type","network","RegistryType_1","CRYPTO_COIN_INFO","bitcoin","mainnet","map","lib_1","dataItem","getData","_cborPayload","fromDataItem"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@keystonehq/bc-ur-registry/src/CryptoCoinInfo.ts"],"sourcesContent":["import { decodeToDataItem, DataItem } from './lib';\nimport { RegistryItem } from './RegistryItem';\nimport { RegistryTypes } from './RegistryType';\nimport { DataItemMap } from './types';\n\nenum Keys {\n  type = '1',\n  network = '2',\n}\n\nexport enum Type {\n  bitcoin = 0,\n}\n\nexport enum Network {\n  mainnet,\n  testnet,\n}\n\nexport class CryptoCoinInfo extends RegistryItem {\n  getRegistryType = () => {\n    return RegistryTypes.CRYPTO_COIN_INFO;\n  };\n\n  constructor(private type?: Type, private network?: Network) {\n    super();\n  }\n\n  public getType = () => {\n    return this.type || Type.bitcoin;\n  };\n\n  public getNetwork = () => {\n    return this.network || Network.mainnet;\n  };\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.type) {\n      map[Keys.type] = this.type;\n    }\n    if (this.network) {\n      map[Keys.network] = this.network;\n    }\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const type = map[Keys.type];\n    const network = map[Keys.network];\n    return new CryptoCoinInfo(type, network);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return CryptoCoinInfo.fromDataItem(dataItem);\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}