{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = function () {\n  return sha512(ed25519.utils.concatBytes(...arguments));\n};\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.sync.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.sync.verify;\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\nlet _Symbol$toStringTag;\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\nlet uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n\n  /* eslint-disable require-await */\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\nconst signature = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\nconst voteAuthorizeWithSeedArgs = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(_ref => {\n      let [, meta] = _ref;\n      return meta.isSigner && meta.isWritable;\n    });\n    const readonlySigners = mapEntries.filter(_ref2 => {\n      let [, meta] = _ref2;\n      return meta.isSigner && !meta.isWritable;\n    });\n    const writableNonSigners = mapEntries.filter(_ref3 => {\n      let [, meta] = _ref3;\n      return !meta.isSigner && meta.isWritable;\n    });\n    const readonlyNonSigners = mapEntries.filter(_ref4 => {\n      let [, meta] = _ref4;\n      return !meta.isSigner && !meta.isWritable;\n    });\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    }; // sanity checks\n\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(_ref5 => {\n      let [address] = _ref5;\n      return new PublicKey(address);\n    }), ...readonlySigners.map(_ref6 => {\n      let [address] = _ref6;\n      return new PublicKey(address);\n    }), ...writableNonSigners.map(_ref7 => {\n      let [address] = _ref7;\n      return new PublicKey(address);\n    }), ...readonlyNonSigners.map(_ref8 => {\n      let [address] = _ref8;\n      return new PublicKey(address);\n    })];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable); // Don't extract lookup if no keys were found\n\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n  /** @internal */\n\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref9 => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref9;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref10 => {\n        let {\n          publicKey\n        } = _ref10;\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n  add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref11 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref11;\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n  setSigners() {\n    for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signers[_key2] = arguments[_key2];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n  sign() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n  partialSign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n  _partialSign(message) {\n    const signData = message.serialize();\n    for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      signers[_key5 - 1] = arguments[_key5];\n    }\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n\n  verifySignatures(requireAllSignatures) {\n    return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n  }\n  /**\n   * @internal\n   */\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref12, index) => {\n      let {\n        signature\n      } = _ref12;\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor(_ref13, customMessage) {\n    let {\n      code,\n      message,\n      data\n    } = _ref13;\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\nvar fetchImpl = globalThis.fetch;\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call() {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1\n    /* WebSocket.OPEN */) {\n      return super.call(...arguments);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + (arguments.length <= 0 ? undefined : arguments[0]) + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify() {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1\n    /* WebSocket.OPEN */) {\n      return super.notify(...arguments);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + (arguments.length <= 0 ? undefined : arguments[0]) + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n/** @internal */\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * @internal\n */\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429\n        /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\n\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/** @internal */\n\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\n\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\n\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\n\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\n\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\n\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\"}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise(_ref14) {\n    let {\n      commitment,\n      signature\n    } = _ref14;\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy(_ref15) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        lastValidBlockHeight,\n        signature\n      }\n    } = _ref15;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy(_ref16) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        minContextSlot,\n        nonceAccountPubkey,\n        nonceValue,\n        signature\n      }\n    } = _ref16;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy(_ref17) {\n    let {\n      commitment,\n      signature\n    } = _ref17;\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(_ref18 => {\n                let {\n                  transaction,\n                  meta,\n                  version\n                } = _ref18;\n                return {\n                  meta,\n                  transaction: {\n                    ...transaction,\n                    message: versionedMessageFromResponse(version, transaction.message)\n                  },\n                  version\n                };\n              })\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(_ref19 => {\n        let {\n          transaction,\n          meta\n        } = _ref19;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(_ref20 => {\n        let {\n          transaction,\n          meta\n        } = _ref20;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping'); // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref21 => {\n      let [hash, subscription] = _ref21;\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state); // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n  /**\n   * @internal\n   */\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64'\n    /* encoding */, filters ? {\n      filters: filters\n    } : undefined\n    /* extra */);\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */);\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n// library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  const h = hmac.create(sha256, key);\n  for (var _len6 = arguments.length, msgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    msgs[_key6 - 1] = arguments[_key6];\n  }\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter(_ref22) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref22;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref23) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref23;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters(_ref24) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref24;\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["ed25519","utils","sha512Sync","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","Symbol","toStringTag","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","_Symbol$toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","code","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","h","hmac","msgs","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/ed25519.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/to-buffer.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/publickey.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/account.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/transaction/constants.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/message/account-keys.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/layout.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/assert.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/message/compiled-keys.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/message/legacy.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/message/v0.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/message/versioned.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/transaction/legacy.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/transaction/message.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/transaction/versioned.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/sysvar.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/sleep.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/instruction.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/fee-calculator.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/nonce-account.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/bigint.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/system.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/loader.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/bpf-loader.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/epoch-schedule.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/errors.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/rpc-websocket.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/timing.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/account-data.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/connection.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/keypair.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/compute-budget.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/ed25519.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/secp256k1.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/secp256k1.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/stake.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/programs/vote.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/validator-info.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/vote-account.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/cluster.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","/Users/user/Desktop/solana-hack-1/client/node_modules/@solana/web3.js/src/index.ts"],"sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}