{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as anchor from '@project-serum/anchor';\nimport { useEffect, useMemo, useState } from 'react';\nimport { PublicKey } from \"@solana/web3.js\";\nimport coBlockIdl from \"../IDL/coblock.json\";\nimport { SystemProgram } from '@solana/web3.js';\nimport { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { useAnchorWallet, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { devFilter } from '../utils';\nconst COBLOCK_PROGRAM_PUBKEY = new PublicKey(\"CJK7mK6KtpuZYvtnJiG48Ek6CwM7WNNuYza268nDXn54\");\nexport function useActions() {\n  _s();\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const anchorWallet = useAnchorWallet();\n  const program = useMemo(() => {\n    if (anchorWallet) {\n      const provider = new anchor.AnchorProvider(connection, anchorWallet, anchor.AnchorProvider.defaultOptions());\n      return new anchor.Program(coBlockIdl, COBLOCK_PROGRAM_PUBKEY, provider);\n    }\n  }, [connection, anchorWallet]);\n  useEffect(() => {\n    const findDevAccounts = async () => {\n      try {\n        const [devPda, devBump] = await findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n        const devAccount = await program.account.staffProfile.fetch(devPda);\n        console.log(devAccount);\n        if (devAccount) {\n          const taskAccounts = await program.account.todoAccount.all([devFilter(publicKey.toString())]);\n          console.log(taskAccounts, \"taskAccounts\");\n        } else {}\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    findDevAccounts();\n  }, [publicKey, program]);\n  const initializeUser = async () => {\n    try {\n      const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n      console.log(devPda, \"devpds\");\n      console.log(publicKey, \"publick\");\n      const tx = await program.methods.initializeStaff().accounts({\n        staffProfile: devPda,\n        authority: publicKey,\n        systemProgram: SystemProgram.programId\n      }).rpc();\n      console.log(tx, \"txxxxxx\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const addTask = async () => {\n    try {\n      const [profilePda, profileBump] = findProgramAddressSync([utf8.encode('USER_STATE'), publicKey.toBuffer()], program.programId);\n      const [todoPda, todoBump] = findProgramAddressSync([utf8.encode('TODO_STATE'), publicKey.toBuffer(), Uint8Array.from([lastTodo])], program.programId);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return {\n    initializeUser\n  };\n}\n_s(useActions, \"WDKn6HVsXyypvypbLQQCcuVvi6E=\", false, function () {\n  return [useConnection, useWallet, useAnchorWallet];\n});","map":{"version":3,"names":["anchor","useEffect","useMemo","useState","PublicKey","coBlockIdl","SystemProgram","utf8","findProgramAddressSync","useAnchorWallet","useConnection","useWallet","devFilter","COBLOCK_PROGRAM_PUBKEY","useActions","connection","publicKey","anchorWallet","program","provider","AnchorProvider","defaultOptions","Program","findDevAccounts","devPda","devBump","encode","toBuffer","programId","devAccount","account","staffProfile","fetch","console","log","taskAccounts","todoAccount","all","toString","e","initializeUser","tx","methods","initializeStaff","accounts","authority","systemProgram","rpc","addTask","profilePda","profileBump","todoPda","todoBump","Uint8Array","from","lastTodo"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/src/Hooks/coblocks.utils.js"],"sourcesContent":["import * as anchor from '@project-serum/anchor'\nimport { useEffect, useMemo, useState } from 'react'\nimport { PublicKey } from \"@solana/web3.js\";\nimport coBlockIdl from \"../IDL/coblock.json\"\nimport { SystemProgram } from '@solana/web3.js'\nimport { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes'\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey'\nimport { useAnchorWallet, useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { devFilter } from '../utils';\n\nconst COBLOCK_PROGRAM_PUBKEY = new PublicKey(\"CJK7mK6KtpuZYvtnJiG48Ek6CwM7WNNuYza268nDXn54\");\n\nexport function useActions() {\n    \n\n    const { connection } = useConnection()\n    const { publicKey } = useWallet()\n    const anchorWallet = useAnchorWallet()\n\n\n    const program = useMemo(() => {\n        if (anchorWallet) {\n            const provider = new anchor.AnchorProvider(connection, anchorWallet, anchor.AnchorProvider.defaultOptions())\n            return new anchor.Program(coBlockIdl, COBLOCK_PROGRAM_PUBKEY, provider)\n        }\n    }, [connection, anchorWallet])\n\n\n\n\n    useEffect(() => {\n\n        const findDevAccounts = async () => {\n            try {\n                const [devPda, devBump] =await findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n                const devAccount = await program.account.staffProfile.fetch(devPda)\n\n                console.log(devAccount)\n\n                if (devAccount) {\n                   \n\n                    const taskAccounts = await program.account.todoAccount.all([devFilter(publicKey.toString())])\n                    console.log(taskAccounts,\"taskAccounts\")\n                }else{\n\n                }\n\n            }catch(e){\n                console.log(e)\n            }\n        }\n        findDevAccounts()\n    },[publicKey, program])\n\n\n    const initializeUser = async () => {\n        \n        try{\n            const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n            console.log(devPda,\"devpds\")\n            console.log(publicKey,\"publick\")\n            const tx = await program.methods\n            .initializeStaff()\n            .accounts({\n                staffProfile: devPda,\n                authority: publicKey,\n                systemProgram: SystemProgram.programId,\n            })\n            .rpc()\n\n            console.log(tx,\"txxxxxx\")\n        }catch(e){\n            console.log(e)\n        }\n\n    }\n\n    const addTask = async () => {\n        try {\n                const [profilePda, profileBump] = findProgramAddressSync([utf8.encode('USER_STATE'), publicKey.toBuffer()], program.programId)\n                const [todoPda, todoBump] = findProgramAddressSync([utf8.encode('TODO_STATE'), publicKey.toBuffer(), Uint8Array.from([lastTodo])], program.programId)\n\n        }catch(e){\n            console.log(e)\n        }\n        \n    }\n\n    return {  initializeUser }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}