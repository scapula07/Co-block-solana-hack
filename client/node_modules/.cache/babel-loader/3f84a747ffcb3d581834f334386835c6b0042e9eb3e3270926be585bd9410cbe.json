{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings(_ref) {\n  let {\n    offerMediaObject\n  } = _ref;\n  const ssrcs = new Set();\n  for (const line of offerMediaObject.ssrcs || []) {\n    const ssrc = line.id;\n    ssrcs.add(ssrc);\n  }\n  if (ssrcs.size === 0) throw new Error('no a=ssrc lines found');\n  const ssrcToRtxSsrc = new Map();\n  // First assume RTX is used.\n  for (const line of offerMediaObject.ssrcGroups || []) {\n    if (line.semantics !== 'FID') continue;\n    let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n    ssrc = Number(ssrc);\n    rtxSsrc = Number(rtxSsrc);\n    if (ssrcs.has(ssrc)) {\n      // Remove both the SSRC and RTX SSRC from the set so later we know that they\n      // are already handled.\n      ssrcs.delete(ssrc);\n      ssrcs.delete(rtxSsrc);\n      // Add to the map.\n      ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n    }\n  }\n  // If the set of SSRCs is not empty it means that RTX is not being used, so take\n  // media SSRCs from there.\n  for (const ssrc of ssrcs) {\n    // Add to the map.\n    ssrcToRtxSsrc.set(ssrc, null);\n  }\n  const encodings = [];\n  for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n    const encoding = {\n      ssrc\n    };\n    if (rtxSsrc) encoding.rtx = {\n      ssrc: rtxSsrc\n    };\n    encodings.push(encoding);\n  }\n  return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast(_ref2) {\n  let {\n    offerMediaObject,\n    numStreams\n  } = _ref2;\n  if (numStreams <= 1) throw new TypeError('numStreams must be greater than 1');\n  // Get the SSRC.\n  const ssrcMsidLine = (offerMediaObject.ssrcs || []).find(line => line.attribute === 'msid');\n  if (!ssrcMsidLine) throw new Error('a=ssrc line with msid information not found');\n  const [streamId, trackId] = ssrcMsidLine.value.split(' ');\n  const firstSsrc = ssrcMsidLine.id;\n  let firstRtxSsrc;\n  // Get the SSRC for RTX.\n  (offerMediaObject.ssrcGroups || []).some(line => {\n    if (line.semantics !== 'FID') return false;\n    const ssrcs = line.ssrcs.split(/\\s+/);\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  const ssrcCnameLine = offerMediaObject.ssrcs.find(line => line.attribute === 'cname');\n  if (!ssrcCnameLine) throw new Error('a=ssrc line with cname information not found');\n  const cname = ssrcCnameLine.value;\n  const ssrcs = [];\n  const rtxSsrcs = [];\n  for (let i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n    if (firstRtxSsrc) rtxSsrcs.push(firstRtxSsrc + i);\n  }\n  offerMediaObject.ssrcGroups = [];\n  offerMediaObject.ssrcs = [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n  for (let i = 0; i < ssrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId} ${trackId}`\n    });\n  }\n  for (let i = 0; i < rtxSsrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    const rtxSsrc = rtxSsrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: `${streamId} ${trackId}`\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: `${ssrc} ${rtxSsrc}`\n    });\n  }\n}\nexports.addLegacySimulcast = addLegacySimulcast;","map":{"version":3,"names":["Object","defineProperty","exports","value","addLegacySimulcast","getRtpEncodings","offerMediaObject","ssrcs","Set","line","ssrc","id","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","rtxSsrc","split","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","ssrcMsidLine","find","attribute","streamId","trackId","firstSsrc","firstRtxSsrc","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings({ offerMediaObject }) {\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs || []) {\n        const ssrc = line.id;\n        ssrcs.add(ssrc);\n    }\n    if (ssrcs.size === 0)\n        throw new Error('no a=ssrc lines found');\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== 'FID')\n            continue;\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know that they\n            // are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc)\n            encoding.rtx = { ssrc: rtxSsrc };\n        encodings.push(encoding);\n    }\n    return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, numStreams }) {\n    if (numStreams <= 1)\n        throw new TypeError('numStreams must be greater than 1');\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs || [])\n        .find((line) => line.attribute === 'msid');\n    if (!ssrcMsidLine)\n        throw new Error('a=ssrc line with msid information not found');\n    const [streamId, trackId] = ssrcMsidLine.value.split(' ');\n    const firstSsrc = ssrcMsidLine.id;\n    let firstRtxSsrc;\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups || [])\n        .some((line) => {\n        if (line.semantics !== 'FID')\n            return false;\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs\n        .find((line) => line.attribute === 'cname');\n    if (!ssrcCnameLine)\n        throw new Error('a=ssrc line with cname information not found');\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc)\n            rtxSsrcs.push(firstRtxSsrc + i);\n    }\n    offerMediaObject.ssrcGroups = [];\n    offerMediaObject.ssrcs = [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' ')\n    });\n    for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${trackId}`\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${trackId}`\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n    }\n}\nexports.addLegacySimulcast = addLegacySimulcast;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}