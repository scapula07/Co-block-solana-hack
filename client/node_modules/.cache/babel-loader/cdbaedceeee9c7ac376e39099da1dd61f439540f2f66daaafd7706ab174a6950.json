{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/solana-hack-1/solana-payroll/src/walletprovider.js\",\n  _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { GlowWalletAdapter, PhantomWalletAdapter, SlopeWalletAdapter, SolflareWalletAdapter, TorusWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletConnectProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => {\n    if (network === WalletAdapterNetwork.Devnet) {\n      return 'https://indulgent-old-paper.solana-devnet.discover.quiknode.pro/8d2b88b29527289c3a7a14470fbfc836de8f8497/';\n    }\n    return clusterApiUrl(network);\n  }, [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n  // Only the wallets you configure here will be compiled into your application, and only the dependencies\n  // of wallets that your users connect to will be loaded.\n  const wallets = useMemo(() => [new PhantomWalletAdapter(), new GlowWalletAdapter(), new SlopeWalletAdapter(), new SolflareWalletAdapter({\n    network\n  }), new TorusWalletAdapter()], [network]);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      autoConnect: true,\n      children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(WalletConnectProvider, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n_c = WalletConnectProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletConnectProvider\");","map":{"version":3,"names":["useMemo","WalletAdapterNetwork","ConnectionProvider","WalletProvider","WalletModalProvider","GlowWalletAdapter","PhantomWalletAdapter","SlopeWalletAdapter","SolflareWalletAdapter","TorusWalletAdapter","clusterApiUrl","WalletConnectProvider","children","network","Devnet","endpoint","wallets"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/src/walletprovider.js"],"sourcesContent":["import { useMemo } from 'react'\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui'\nimport { GlowWalletAdapter, PhantomWalletAdapter, SlopeWalletAdapter, SolflareWalletAdapter, TorusWalletAdapter } from '@solana/wallet-adapter-wallets'\nimport { clusterApiUrl } from '@solana/web3.js'\n\n\nexport const WalletConnectProvider = ({ children }) => {\n    // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n    const network = WalletAdapterNetwork.Devnet\n\n    // You can also provide a custom RPC endpoint.\n    const endpoint = useMemo(() => {\n        if (network === WalletAdapterNetwork.Devnet) {\n            return 'https://indulgent-old-paper.solana-devnet.discover.quiknode.pro/8d2b88b29527289c3a7a14470fbfc836de8f8497/'\n        }\n\n        return clusterApiUrl(network)\n    }, [network])\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(() => [new PhantomWalletAdapter(), new GlowWalletAdapter(), new SlopeWalletAdapter(), new SolflareWalletAdapter({ network }), new TorusWalletAdapter()], [network])\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} autoConnect>\n                <WalletModalProvider>{children}</WalletModalProvider>\n            </WalletProvider>\n        </ConnectionProvider>\n    )\n}"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,kBAAkB,EAAEC,cAAc,QAAQ,8BAA8B;AACjF,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAEC,kBAAkB,QAAQ,gCAAgC;AACvJ,SAASC,aAAa,QAAQ,iBAAiB;AAAA;AAG/C,OAAO,MAAMC,qBAAqB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC9C;EACA,MAAMC,OAAO,GAAGZ,oBAAoB,CAACa,MAAM;;EAE3C;EACA,MAAMC,QAAQ,GAAGf,OAAO,CAAC,MAAM;IAC3B,IAAIa,OAAO,KAAKZ,oBAAoB,CAACa,MAAM,EAAE;MACzC,OAAO,2GAA2G;IACtH;IAEA,OAAOJ,aAAa,CAACG,OAAO,CAAC;EACjC,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;;EAEb;EACA;EACA;EACA,MAAMG,OAAO,GAAGhB,OAAO,CAAC,MAAM,CAAC,IAAIM,oBAAoB,EAAE,EAAE,IAAID,iBAAiB,EAAE,EAAE,IAAIE,kBAAkB,EAAE,EAAE,IAAIC,qBAAqB,CAAC;IAAEK;EAAQ,CAAC,CAAC,EAAE,IAAIJ,kBAAkB,EAAE,CAAC,EAAE,CAACI,OAAO,CAAC,CAAC;EAE3L,oBACI,QAAC,kBAAkB;IAAC,QAAQ,EAAEE,QAAS;IAAA,uBACnC,QAAC,cAAc;MAAC,OAAO,EAAEC,OAAQ;MAAC,WAAW;MAAA,uBACzC,QAAC,mBAAmB;QAAA,UAAEJ;MAAQ;QAAA;QAAA;QAAA;MAAA;IAAuB;MAAA;MAAA;MAAA;IAAA;EACxC;IAAA;IAAA;IAAA;EAAA,QACA;AAE7B,CAAC;AAAA,GAzBYD,qBAAqB;AAAA,KAArBA,qBAAqB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}