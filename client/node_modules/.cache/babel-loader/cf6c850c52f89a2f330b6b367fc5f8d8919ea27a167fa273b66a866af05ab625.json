{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactNativeUnifiedPlan = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('ReactNativeUnifiedPlan');\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\nclass ReactNativeUnifiedPlan extends HandlerInterface_1.HandlerInterface {\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new ReactNativeUnifiedPlan();\n  }\n  constructor() {\n    super();\n    // Map of RTCTransceivers indexed by MID.\n    this._mapMidTransceiver = new Map();\n    // Local stream for sending.\n    this._sendStream = new MediaStream();\n    // Whether a DataChannel m=application section has been created.\n    this._hasDataChannelMediaSection = false;\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\n    this._nextSendSctpStreamId = 0;\n    // Got transport local and remote parameters.\n    this._transportReady = false;\n  }\n  get name() {\n    return 'ReactNativeUnifiedPlan';\n  }\n  close() {\n    logger.debug('close()');\n    // Free/dispose native MediaStream but DO NOT free/dispose native\n    // MediaStreamTracks (that is parent's business).\n    // @ts-ignore (proprietary API in react-native-webrtc).\n    this._sendStream.release( /* releaseTracks */false);\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n    try {\n      pc.addTransceiver('audio');\n      pc.addTransceiver('video');\n      const offer = await pc.createOffer();\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run(_ref) {\n    let {\n      direction,\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      iceServers,\n      iceTransportPolicy,\n      additionalSettings,\n      proprietaryConstraints,\n      extendedRtpCapabilities\n    } = _ref;\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n      this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n    }\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers || [],\n      iceTransportPolicy: iceTransportPolicy || 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            this.emit('@connectionstatechange', 'connecting');\n            break;\n          case 'connected':\n          case 'completed':\n            this.emit('@connectionstatechange', 'connected');\n            break;\n          case 'failed':\n            this.emit('@connectionstatechange', 'failed');\n            break;\n          case 'disconnected':\n            this.emit('@connectionstatechange', 'disconnected');\n            break;\n          case 'closed':\n            this.emit('@connectionstatechange', 'closed');\n            break;\n        }\n      });\n    }\n  }\n  async updateIceServers(iceServers) {\n    logger.debug('updateIceServers()');\n    const configuration = this._pc.getConfiguration();\n    configuration.iceServers = iceServers;\n    this._pc.setConfiguration(configuration);\n  }\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) return;\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    return this._pc.getStats();\n  }\n  async send(_ref2) {\n    let {\n      track,\n      encodings,\n      codecOptions,\n      codec\n    } = _ref2;\n    var _a;\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (encodings && encodings.length > 1) {\n      encodings.forEach((encoding, idx) => {\n        encoding.rid = `r${idx}`;\n      });\n    }\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n    const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream],\n      sendEncodings: encodings\n    });\n    let offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    let offerMediaObject;\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n        localSdpObject\n      });\n    }\n    // Special case for VP9 with SVC.\n    let hackVp9Svc = false;\n    const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n    if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n      logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n      hackVp9Svc = true;\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: layers.spatialLayers\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings by parsing the SDP offer if no encodings are given.\n    if (!encodings) {\n      sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n    }\n    // Set RTP encodings by parsing the SDP offer and complete them with given\n    // one if just a single encoding has been given.\n    else if (encodings.length === 1) {\n      let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n      Object.assign(newEncodings[0], encodings[0]);\n      // Hack for VP9 SVC.\n      if (hackVp9Svc) newEncodings = [newEncodings[0]];\n      sendingRtpParameters.encodings = newEncodings;\n    }\n    // Otherwise if more than 1 encoding are given use them verbatim.\n    else {\n      sendingRtpParameters.encodings = encodings;\n    }\n    // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n    // each encoding.\n    if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n      for (const encoding of sendingRtpParameters.encodings) {\n        encoding.scalabilityMode = 'S1T3';\n      }\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions,\n      extmapAllowMixed: true\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n  async stopSending(localId) {\n    this.assertSendDirection();\n    logger.debug('stopSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.sender.replaceTrack(null);\n    this._pc.removeTrack(transceiver.sender);\n    const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n    if (mediaSectionClosed) {\n      try {\n        transceiver.stop();\n      } catch (error) {}\n    }\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    this._mapMidTransceiver.delete(localId);\n  }\n  async pauseSending(localId) {\n    this.assertSendDirection();\n    logger.debug('pauseSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.direction = 'inactive';\n    this._remoteSdp.pauseMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async resumeSending(localId) {\n    this.assertSendDirection();\n    logger.debug('resumeSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    this._remoteSdp.resumeSendingMediaSection(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.direction = 'sendonly';\n    const offer = await this._pc.createOffer();\n    logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async replaceTrack(localId, track) {\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    await transceiver.sender.replaceTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) encoding.active = true;else encoding.active = false;\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n  async getSenderStats(localId) {\n    this.assertSendDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.sender.getStats();\n  }\n  async sendDataChannel(_ref3) {\n    let {\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      label,\n      protocol\n    } = _ref3;\n    var _a;\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    var _a;\n    this.assertRecvDirection();\n    const results = [];\n    const mapLocalId = new Map();\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n      mapLocalId.set(trackId, localId);\n      this._remoteSdp.receive({\n        mid: localId,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId || rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        rtpParameters\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n    }\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        trackId\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n      if (!transceiver) {\n        throw new Error('new RTCRtpTransceiver not found');\n      } else {\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        results.push({\n          localId,\n          track: transceiver.receiver.track,\n          rtpReceiver: transceiver.receiver\n        });\n      }\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      this._remoteSdp.closeMediaSection(transceiver.mid);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const localId of localIds) {\n      this._mapMidTransceiver.delete(localId);\n    }\n  }\n  async pauseReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('pauseReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      transceiver.direction = 'inactive';\n      this._remoteSdp.pauseMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async resumeReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('resumeReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      transceiver.direction = 'recvonly';\n      this._remoteSdp.resumeReceivingMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async getReceiverStats(localId) {\n    this.assertRecvDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.receiver.getStats();\n  }\n  async receiveDataChannel(_ref4) {\n    let {\n      sctpStreamParameters,\n      label,\n      protocol\n    } = _ref4;\n    var _a;\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport(_ref5) {\n    let {\n      localDtlsRole,\n      localSdpObject\n    } = _ref5;\n    if (!localSdpObject) localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.ReactNativeUnifiedPlan = ReactNativeUnifiedPlan;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","ReactNativeUnifiedPlan","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","createFactory","constructor","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","name","close","debug","release","_pc","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","addTransceiver","offer","createOffer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","role","_forcedLocalDtlsRole","connectionState","addEventListener","warn","iceConnectionState","updateIceServers","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","_a","assertSendDirection","kind","id","length","forEach","encoding","idx","rid","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","sendEncodings","localSdpObject","offerMediaObject","setupTransport","localDtlsRole","hackVp9Svc","layers","scalabilityMode","spatialLayers","mimeType","toLowerCase","media","addLegacySimulcast","write","localId","mid","localDescription","rtcp","cname","getCname","getRtpEncodings","newEncodings","assign","reuseMid","offerRtpParameters","answerRtpParameters","extmapAllowMixed","set","rtpParameters","rtpSender","sender","stopSending","Error","replaceTrack","removeTrack","mediaSectionClosed","closeMediaSection","stop","delete","pauseSending","pauseMediaSection","resumeSending","resumeSendingMediaSection","setMaxSpatialLayer","spatialLayer","parameters","getParameters","active","setParameters","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","answerMediaObject","applyCodecParameters","getTransceivers","t","push","receiver","rtpReceiver","stopReceiving","localIds","pauseReceiving","resumeReceiving","resumeReceivingMediaSection","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/ReactNativeUnifiedPlan.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReactNativeUnifiedPlan = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('ReactNativeUnifiedPlan');\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass ReactNativeUnifiedPlan extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new ReactNativeUnifiedPlan();\n    }\n    constructor() {\n        super();\n        // Map of RTCTransceivers indexed by MID.\n        this._mapMidTransceiver = new Map();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'ReactNativeUnifiedPlan';\n    }\n    close() {\n        logger.debug('close()');\n        // Free/dispose native MediaStream but DO NOT free/dispose native\n        // MediaStreamTracks (that is parent's business).\n        // @ts-ignore (proprietary API in react-native-webrtc).\n        this._sendStream.release(/* releaseTracks */ false);\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan'\n        });\n        try {\n            pc.addTransceiver('audio');\n            pc.addTransceiver('video');\n            const offer = await pc.createOffer();\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n            this._forcedLocalDtlsRole = dtlsParameters.role === 'server'\n                ? 'client'\n                : 'server';\n        }\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers || [],\n            iceTransportPolicy: iceTransportPolicy || 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan',\n            ...additionalSettings\n        }, proprietaryConstraints);\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n                switch (this._pc.iceConnectionState) {\n                    case 'checking':\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    case 'connected':\n                    case 'completed':\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    case 'failed':\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    case 'disconnected':\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    case 'closed':\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                }\n            });\n        }\n    }\n    async updateIceServers(iceServers) {\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady)\n            return;\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        var _a;\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (encodings && encodings.length > 1) {\n            encodings.forEach((encoding, idx) => {\n                encoding.rid = `r${idx}`;\n            });\n        }\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, {\n            direction: 'sendonly',\n            streams: [this._sendStream],\n            sendEncodings: encodings\n        });\n        let offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        let offerMediaObject;\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        // Special case for VP9 with SVC.\n        let hackVp9Svc = false;\n        const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n        if (encodings &&\n            encodings.length === 1 &&\n            layers.spatialLayers > 1 &&\n            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n            logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: layers.spatialLayers\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings by parsing the SDP offer if no encodings are given.\n        if (!encodings) {\n            sendingRtpParameters.encodings =\n                sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n        }\n        // Set RTP encodings by parsing the SDP offer and complete them with given\n        // one if just a single encoding has been given.\n        else if (encodings.length === 1) {\n            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            // Hack for VP9 SVC.\n            if (hackVp9Svc)\n                newEncodings = [newEncodings[0]];\n            sendingRtpParameters.encodings = newEncodings;\n        }\n        // Otherwise if more than 1 encoding are given use them verbatim.\n        else {\n            sendingRtpParameters.encodings = encodings;\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                encoding.scalabilityMode = 'S1T3';\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n        };\n    }\n    async stopSending(localId) {\n        this.assertSendDirection();\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.sender.replaceTrack(null);\n        this._pc.removeTrack(transceiver.sender);\n        const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n        if (mediaSectionClosed) {\n            try {\n                transceiver.stop();\n            }\n            catch (error) { }\n        }\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    async pauseSending(localId) {\n        this.assertSendDirection();\n        logger.debug('pauseSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.direction = 'inactive';\n        this._remoteSdp.pauseMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async resumeSending(localId) {\n        this.assertSendDirection();\n        logger.debug('resumeSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        this._remoteSdp.resumeSendingMediaSection(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.direction = 'sendonly';\n        const offer = await this._pc.createOffer();\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer)\n                encoding.active = true;\n            else\n                encoding.active = false;\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        var _a;\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        var _a;\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId || rtpParameters.rtcp.cname,\n                trackId\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media\n                .find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject\n            });\n        }\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver) {\n                throw new Error('new RTCRtpTransceiver not found');\n            }\n            else {\n                // Store in the map.\n                this._mapMidTransceiver.set(localId, transceiver);\n                results.push({\n                    localId,\n                    track: transceiver.receiver.track,\n                    rtpReceiver: transceiver.receiver\n                });\n            }\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('pauseReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            transceiver.direction = 'inactive';\n            this._remoteSdp.pauseMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async resumeReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('resumeReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            transceiver.direction = 'recvonly';\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        var _a;\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject)\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.ReactNativeUnifiedPlan = ReactNativeUnifiedPlan;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}