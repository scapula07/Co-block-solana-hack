{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings(_ref) {\n  let {\n    offerMediaObject,\n    track\n  } = _ref;\n  // First media SSRC (or the only one).\n  let firstSsrc;\n  const ssrcs = new Set();\n  for (const line of offerMediaObject.ssrcs || []) {\n    if (line.attribute !== 'msid') continue;\n    const trackId = line.value.split(' ')[1];\n    if (trackId === track.id) {\n      const ssrc = line.id;\n      ssrcs.add(ssrc);\n      if (!firstSsrc) firstSsrc = ssrc;\n    }\n  }\n  if (ssrcs.size === 0) throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n  const ssrcToRtxSsrc = new Map();\n  // First assume RTX is used.\n  for (const line of offerMediaObject.ssrcGroups || []) {\n    if (line.semantics !== 'FID') continue;\n    let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n    ssrc = Number(ssrc);\n    rtxSsrc = Number(rtxSsrc);\n    if (ssrcs.has(ssrc)) {\n      // Remove both the SSRC and RTX SSRC from the set so later we know that they\n      // are already handled.\n      ssrcs.delete(ssrc);\n      ssrcs.delete(rtxSsrc);\n      // Add to the map.\n      ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n    }\n  }\n  // If the set of SSRCs is not empty it means that RTX is not being used, so take\n  // media SSRCs from there.\n  for (const ssrc of ssrcs) {\n    // Add to the map.\n    ssrcToRtxSsrc.set(ssrc, null);\n  }\n  const encodings = [];\n  for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n    const encoding = {\n      ssrc\n    };\n    if (rtxSsrc) encoding.rtx = {\n      ssrc: rtxSsrc\n    };\n    encodings.push(encoding);\n  }\n  return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast(_ref2) {\n  let {\n    offerMediaObject,\n    track,\n    numStreams\n  } = _ref2;\n  if (numStreams <= 1) throw new TypeError('numStreams must be greater than 1');\n  let firstSsrc;\n  let firstRtxSsrc;\n  let streamId;\n  // Get the SSRC.\n  const ssrcMsidLine = (offerMediaObject.ssrcs || []).find(line => {\n    if (line.attribute !== 'msid') return false;\n    const trackId = line.value.split(' ')[1];\n    if (trackId === track.id) {\n      firstSsrc = line.id;\n      streamId = line.value.split(' ')[0];\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (!ssrcMsidLine) throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n  // Get the SSRC for RTX.\n  (offerMediaObject.ssrcGroups || []).some(line => {\n    if (line.semantics !== 'FID') return false;\n    const ssrcs = line.ssrcs.split(/\\s+/);\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  const ssrcCnameLine = offerMediaObject.ssrcs.find(line => line.attribute === 'cname' && line.id === firstSsrc);\n  if (!ssrcCnameLine) throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n  const cname = ssrcCnameLine.value;\n  const ssrcs = [];\n  const rtxSsrcs = [];\n  for (let i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n    if (firstRtxSsrc) rtxSsrcs.push(firstRtxSsrc + i);\n  }\n  offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n  offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n  for (let i = 0; i < ssrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId} ${track.id}`\n    });\n  }\n  for (let i = 0; i < rtxSsrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    const rtxSsrc = rtxSsrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: `${streamId} ${track.id}`\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: `${ssrc} ${rtxSsrc}`\n    });\n  }\n}\nexports.addLegacySimulcast = addLegacySimulcast;","map":{"version":3,"names":["Object","defineProperty","exports","value","addLegacySimulcast","getRtpEncodings","offerMediaObject","track","firstSsrc","ssrcs","Set","line","attribute","trackId","split","id","ssrc","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","rtxSsrc","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","firstRtxSsrc","streamId","ssrcMsidLine","find","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addLegacySimulcast = exports.getRtpEncodings = void 0;\nfunction getRtpEncodings({ offerMediaObject, track }) {\n    // First media SSRC (or the only one).\n    let firstSsrc;\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs || []) {\n        if (line.attribute !== 'msid')\n            continue;\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            const ssrc = line.id;\n            ssrcs.add(ssrc);\n            if (!firstSsrc)\n                firstSsrc = ssrc;\n        }\n    }\n    if (ssrcs.size === 0)\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== 'FID')\n            continue;\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know that they\n            // are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc)\n            encoding.rtx = { ssrc: rtxSsrc };\n        encodings.push(encoding);\n    }\n    return encodings;\n}\nexports.getRtpEncodings = getRtpEncodings;\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, track, numStreams }) {\n    if (numStreams <= 1)\n        throw new TypeError('numStreams must be greater than 1');\n    let firstSsrc;\n    let firstRtxSsrc;\n    let streamId;\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs || [])\n        .find((line) => {\n        if (line.attribute !== 'msid')\n            return false;\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            firstSsrc = line.id;\n            streamId = line.value.split(' ')[0];\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    if (!ssrcMsidLine)\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups || [])\n        .some((line) => {\n        if (line.semantics !== 'FID')\n            return false;\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs\n        .find((line) => (line.attribute === 'cname' && line.id === firstSsrc));\n    if (!ssrcCnameLine)\n        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc)\n            rtxSsrcs.push(firstRtxSsrc + i);\n    }\n    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n    offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' ')\n    });\n    for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n    }\n}\nexports.addLegacySimulcast = addLegacySimulcast;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}