{"ast":null,"code":"const W3CWebSocket = require('websocket').w3cwebsocket;\nconst retry = require('retry');\nconst Logger = require('../Logger');\nconst EnhancedEventEmitter = require('../EnhancedEventEmitter');\nconst Message = require('../Message');\nconst WS_SUBPROTOCOL = 'protoo';\nconst DEFAULT_RETRY_OPTIONS = {\n  retries: 10,\n  factor: 2,\n  minTimeout: 1 * 1000,\n  maxTimeout: 8 * 1000\n};\nconst logger = new Logger('WebSocketTransport');\nclass WebSocketTransport extends EnhancedEventEmitter {\n  /**\n   * @param {String} url - WebSocket URL.\n   * @param {Object} [options] - Options for WebSocket-Node.W3CWebSocket and retry.\n   */\n  constructor(url, options) {\n    super(logger);\n    logger.debug('constructor() [url:%s, options:%o]', url, options);\n\n    // Closed flag.\n    // @type {Boolean}\n    this._closed = false;\n\n    // WebSocket URL.\n    // @type {String}\n    this._url = url;\n\n    // Options.\n    // @type {Object}\n    this._options = options || {};\n\n    // WebSocket instance.\n    // @type {WebSocket}\n    this._ws = null;\n\n    // Run the WebSocket.\n    this._runWebSocket();\n  }\n  get closed() {\n    return this._closed;\n  }\n  close() {\n    if (this._closed) return;\n    logger.debug('close()');\n\n    // Don't wait for the WebSocket 'close' event, do it now.\n    this._closed = true;\n    this.safeEmit('close');\n    try {\n      this._ws.onopen = null;\n      this._ws.onclose = null;\n      this._ws.onerror = null;\n      this._ws.onmessage = null;\n      this._ws.close();\n    } catch (error) {\n      logger.error('close() | error closing the WebSocket: %o', error);\n    }\n  }\n  async send(message) {\n    if (this._closed) throw new Error('transport closed');\n    try {\n      this._ws.send(JSON.stringify(message));\n    } catch (error) {\n      logger.warn('send() failed:%o', error);\n      throw error;\n    }\n  }\n  _runWebSocket() {\n    const operation = retry.operation(this._options.retry || DEFAULT_RETRY_OPTIONS);\n    let wasConnected = false;\n    operation.attempt(currentAttempt => {\n      if (this._closed) {\n        operation.stop();\n        return;\n      }\n      logger.debug('_runWebSocket() [currentAttempt:%s]', currentAttempt);\n      this._ws = new W3CWebSocket(this._url, WS_SUBPROTOCOL, this._options.origin, this._options.headers, this._options.requestOptions, this._options.clientConfig);\n      this._ws.onopen = () => {\n        if (this._closed) return;\n        wasConnected = true;\n\n        // Emit 'open' event.\n        this.safeEmit('open');\n      };\n      this._ws.onclose = event => {\n        if (this._closed) return;\n        logger.warn('WebSocket \"close\" event [wasClean:%s, code:%s, reason:\"%s\"]', event.wasClean, event.code, event.reason);\n\n        // Don't retry if code is 4000 (closed by the server).\n        if (event.code !== 4000) {\n          // If it was not connected, try again.\n          if (!wasConnected) {\n            this.safeEmit('failed', currentAttempt);\n            if (this._closed) return;\n            if (operation.retry(true)) return;\n          }\n          // If it was connected, start from scratch.\n          else {\n            operation.stop();\n            this.safeEmit('disconnected');\n            if (this._closed) return;\n            this._runWebSocket();\n            return;\n          }\n        }\n        this._closed = true;\n\n        // Emit 'close' event.\n        this.safeEmit('close');\n      };\n      this._ws.onerror = () => {\n        if (this._closed) return;\n        logger.error('WebSocket \"error\" event');\n      };\n      this._ws.onmessage = event => {\n        if (this._closed) return;\n        const message = Message.parse(event.data);\n        if (!message) return;\n        if (this.listenerCount('message') === 0) {\n          logger.error('no listeners for WebSocket \"message\" event, ignoring received message');\n          return;\n        }\n\n        // Emit 'message' event.\n        this.safeEmit('message', message);\n      };\n    });\n  }\n}\nmodule.exports = WebSocketTransport;","map":{"version":3,"names":["W3CWebSocket","require","w3cwebsocket","retry","Logger","EnhancedEventEmitter","Message","WS_SUBPROTOCOL","DEFAULT_RETRY_OPTIONS","retries","factor","minTimeout","maxTimeout","logger","WebSocketTransport","constructor","url","options","debug","_closed","_url","_options","_ws","_runWebSocket","closed","close","safeEmit","onopen","onclose","onerror","onmessage","error","send","message","Error","JSON","stringify","warn","operation","wasConnected","attempt","currentAttempt","stop","origin","headers","requestOptions","clientConfig","event","wasClean","code","reason","parse","data","listenerCount","module","exports"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/protoo-client/lib/transports/WebSocketTransport.js"],"sourcesContent":["const W3CWebSocket = require('websocket').w3cwebsocket;\nconst retry = require('retry');\nconst Logger = require('../Logger');\nconst EnhancedEventEmitter = require('../EnhancedEventEmitter');\nconst Message = require('../Message');\n\nconst WS_SUBPROTOCOL = 'protoo';\nconst DEFAULT_RETRY_OPTIONS =\n{\n\tretries    : 10,\n\tfactor     : 2,\n\tminTimeout : 1 * 1000,\n\tmaxTimeout : 8 * 1000\n};\n\nconst logger = new Logger('WebSocketTransport');\n\nclass WebSocketTransport extends EnhancedEventEmitter\n{\n\t/**\n\t * @param {String} url - WebSocket URL.\n\t * @param {Object} [options] - Options for WebSocket-Node.W3CWebSocket and retry.\n\t */\n\tconstructor(url, options)\n\t{\n\t\tsuper(logger);\n\n\t\tlogger.debug('constructor() [url:%s, options:%o]', url, options);\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// WebSocket URL.\n\t\t// @type {String}\n\t\tthis._url = url;\n\n\t\t// Options.\n\t\t// @type {Object}\n\t\tthis._options = options || {};\n\n\t\t// WebSocket instance.\n\t\t// @type {WebSocket}\n\t\tthis._ws = null;\n\n\t\t// Run the WebSocket.\n\t\tthis._runWebSocket();\n\t}\n\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\t// Don't wait for the WebSocket 'close' event, do it now.\n\t\tthis._closed = true;\n\t\tthis.safeEmit('close');\n\n\t\ttry\n\t\t{\n\t\t\tthis._ws.onopen = null;\n\t\t\tthis._ws.onclose = null;\n\t\t\tthis._ws.onerror = null;\n\t\t\tthis._ws.onmessage = null;\n\t\t\tthis._ws.close();\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tlogger.error('close() | error closing the WebSocket: %o', error);\n\t\t}\n\t}\n\n\tasync send(message)\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new Error('transport closed');\n\n\t\ttry\n\t\t{\n\t\t\tthis._ws.send(JSON.stringify(message));\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tlogger.warn('send() failed:%o', error);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t_runWebSocket()\n\t{\n\t\tconst operation =\n\t\t\tretry.operation(this._options.retry || DEFAULT_RETRY_OPTIONS);\n\n\t\tlet wasConnected = false;\n\n\t\toperation.attempt((currentAttempt) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t{\n\t\t\t\toperation.stop();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug('_runWebSocket() [currentAttempt:%s]', currentAttempt);\n\n\t\t\tthis._ws = new W3CWebSocket(\n\t\t\t\tthis._url,\n\t\t\t\tWS_SUBPROTOCOL,\n\t\t\t\tthis._options.origin,\n\t\t\t\tthis._options.headers,\n\t\t\t\tthis._options.requestOptions,\n\t\t\t\tthis._options.clientConfig);\n\n\t\t\tthis._ws.onopen = () =>\n\t\t\t{\n\t\t\t\tif (this._closed)\n\t\t\t\t\treturn;\n\n\t\t\t\twasConnected = true;\n\n\t\t\t\t// Emit 'open' event.\n\t\t\t\tthis.safeEmit('open');\n\t\t\t};\n\n\t\t\tthis._ws.onclose = (event) =>\n\t\t\t{\n\t\t\t\tif (this._closed)\n\t\t\t\t\treturn;\n\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'WebSocket \"close\" event [wasClean:%s, code:%s, reason:\"%s\"]',\n\t\t\t\t\tevent.wasClean, event.code, event.reason);\n\n\t\t\t\t// Don't retry if code is 4000 (closed by the server).\n\t\t\t\tif (event.code !== 4000)\n\t\t\t\t{\n\t\t\t\t\t// If it was not connected, try again.\n\t\t\t\t\tif (!wasConnected)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.safeEmit('failed', currentAttempt);\n\n\t\t\t\t\t\tif (this._closed)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tif (operation.retry(true))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// If it was connected, start from scratch.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\toperation.stop();\n\n\t\t\t\t\t\tthis.safeEmit('disconnected');\n\n\t\t\t\t\t\tif (this._closed)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tthis._runWebSocket();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._closed = true;\n\n\t\t\t\t// Emit 'close' event.\n\t\t\t\tthis.safeEmit('close');\n\t\t\t};\n\n\t\t\tthis._ws.onerror = () =>\n\t\t\t{\n\t\t\t\tif (this._closed)\n\t\t\t\t\treturn;\n\n\t\t\t\tlogger.error('WebSocket \"error\" event');\n\t\t\t};\n\n\t\t\tthis._ws.onmessage = (event) =>\n\t\t\t{\n\t\t\t\tif (this._closed)\n\t\t\t\t\treturn;\n\n\t\t\t\tconst message = Message.parse(event.data);\n\n\t\t\t\tif (!message)\n\t\t\t\t\treturn;\n\n\t\t\t\tif (this.listenerCount('message') === 0)\n\t\t\t\t{\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t'no listeners for WebSocket \"message\" event, ignoring received message');\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Emit 'message' event.\n\t\t\t\tthis.safeEmit('message', message);\n\t\t\t};\n\t\t});\n\t}\n}\n\nmodule.exports = WebSocketTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}