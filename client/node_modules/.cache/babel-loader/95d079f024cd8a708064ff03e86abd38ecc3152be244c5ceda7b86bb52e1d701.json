{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n  var ah = a >>> 16 & 0xffff,\n    al = a & 0xffff;\n  var bh = b >>> 16 & 0xffff,\n    bl = b & 0xffff;\n  return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n  return a + b | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n  return a - b | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n  return x << 32 - n | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n  return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n  return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;\n};","map":{"version":3,"mappings":";;AAAA;AACA;;;;AAEA;;;AAIA;AACA,SAASA,QAAQ,CAACC,CAAS,EAAEC,CAAS;EAClC,IAAMC,EAAE,GAAIF,CAAC,KAAK,EAAE,GAAI,MAAM;IAAEG,EAAE,GAAGH,CAAC,GAAG,MAAM;EAC/C,IAAMI,EAAE,GAAIH,CAAC,KAAK,EAAE,GAAI,MAAM;IAAEI,EAAE,GAAGJ,CAAC,GAAG,MAAM;EAC/C,OAASE,EAAE,GAAGE,EAAE,IAAOH,EAAE,GAAGG,EAAE,GAAGF,EAAE,GAAGC,EAAE,IAAK,EAAE,KAAM,CAAC,CAAC,GAAG,CAAC;AAC/D;AAEA;AACA;AACaE,WAAG,GAAIC,IAAgD,CAACC,IAAI,IAAIT,QAAQ;AAErF;AACA,SAAgBU,GAAG,CAACT,CAAS,EAAEC,CAAS;EACpC,OAAQD,CAAC,GAAGC,CAAC,GAAI,CAAC;AACtB;AAFAK;AAIA;AACA,SAAgBI,GAAG,CAACV,CAAS,EAAEC,CAAS;EACpC,OAAQD,CAAC,GAAGC,CAAC,GAAI,CAAC;AACtB;AAFAK;AAIA;AACA,SAAgBK,IAAI,CAACC,CAAS,EAAEC,CAAS;EACrC,OAAOD,CAAC,IAAIC,CAAC,GAAGD,CAAC,KAAM,EAAE,GAAGC,CAAE;AAClC;AAFAP;AAIA;AACA,SAAgBQ,IAAI,CAACF,CAAS,EAAEC,CAAS;EACrC,OAAOD,CAAC,IAAK,EAAE,GAAGC,CAAE,GAAGD,CAAC,KAAKC,CAAC;AAClC;AAFAP;AAIA,SAASS,aAAa,CAACF,CAAS;EAC5B,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAIG,QAAQ,CAACH,CAAC,CAAC,IAAIN,IAAI,CAACU,KAAK,CAACJ,CAAC,CAAC,KAAKA,CAAC;AACtE;AAEA;;;;;AAKaP,iBAAS,GAAIY,MAA6C,CAACC,SAAS,IAAIJ,aAAa;AAElG;;;;;AAKaT,wBAAgB,GAAG,gBAAgB;AAEhD;;;;;;AAMaA,qBAAa,GAAG,UAACO,CAAS;EACnC,wBAAS,CAACA,CAAC,CAAC,IAAKA,CAAC,IAAI,CAACP,wBAAgB,IAAIO,CAAC,IAAIP,wBAAiB;AAAjE,CAAiE","names":["imulShim","a","b","ah","al","bh","bl","exports","Math","imul","add","sub","rotl","x","n","rotr","isIntegerShim","isFinite","floor","Number","isInteger"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/node_modules/@stablelib/int/int.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package int provides helper functions for integerss.\n */\n\n// Shim using 16-bit pieces.\nfunction imulShim(a: number, b: number): number {\n    const ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    const bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexport const mul = (Math as { imul?(a: number, b: number): number }).imul || imulShim;\n\n/** 32-bit integer addition.  */\nexport function add(a: number, b: number): number {\n    return (a + b) | 0;\n}\n\n/**  32-bit integer subtraction.  */\nexport function sub(a: number, b: number): number {\n    return (a - b) | 0;\n}\n\n/** 32-bit integer left rotation */\nexport function rotl(x: number, n: number): number {\n    return x << n | x >>> (32 - n);\n}\n\n/** 32-bit integer left rotation */\nexport function rotr(x: number, n: number): number {\n    return x << (32 - n) | x >>> n;\n}\n\nfunction isIntegerShim(n: number): boolean {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexport const isInteger = (Number as { isInteger?(n: number): boolean }).isInteger || isIntegerShim;\n\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexport const MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexport const isSafeInteger = (n: number): boolean =>\n    isInteger(n) && (n >= -MAX_SAFE_INTEGER && n <= MAX_SAFE_INTEGER);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}