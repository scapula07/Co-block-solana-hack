{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.translateAddress = exports.validateAccounts = exports.toInstruction = exports.parseIdlErrors = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nfunction parseIdlErrors(idl) {\n  const errors = new Map();\n  if (idl.errors) {\n    idl.errors.forEach(e => {\n      var _a;\n      let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n      errors.set(e.code, msg);\n    });\n  }\n  return errors;\n}\nexports.parseIdlErrors = parseIdlErrors;\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nfunction toInstruction(idlIx) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n  const ix = {};\n  let idx = 0;\n  idlIx.args.forEach(ixArg => {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n  return ix;\n}\nexports.toInstruction = toInstruction;\n// Throws error if any account required for the `ix` is not given.\nfunction validateAccounts(ixAccounts) {\n  let accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ixAccounts.forEach(acc => {\n    if (\"accounts\" in acc) {\n      validateAccounts(acc.accounts, accounts[acc.name]);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n      }\n    }\n  });\n}\nexports.validateAccounts = validateAccounts;\n// Translates an address to a Pubkey.\nfunction translateAddress(address) {\n  return address instanceof web3_js_1.PublicKey ? address : new web3_js_1.PublicKey(address);\n}\nexports.translateAddress = translateAddress;","map":{"version":3,"mappings":";;;;;;AACA;AASA,SAAgBA,cAAc,CAACC,GAAQ;EACrC,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAE;EACxB,IAAIF,GAAG,CAACC,MAAM,EAAE;IACdD,GAAG,CAACC,MAAM,CAACE,OAAO,CAAEC,CAAC,IAAI;;MACvB,IAAIC,GAAG,GAAG,OAAC,CAACA,GAAG,mCAAID,CAAC,CAACE,IAAI;MACzBL,MAAM,CAACM,GAAG,CAACH,CAAC,CAACI,IAAI,EAAEH,GAAG,CAAC;IACzB,CAAC,CAAC;;EAEJ,OAAOJ,MAAM;AACf;AATAQ;AAWA;AACA,SAAgBC,aAAa,CAC3BC,KAAsC,EACxB;EAAA,kCAAXC,IAAW;IAAXA,IAAW;EAAA;EAEd,IAAID,KAAK,CAACC,IAAI,CAACC,MAAM,IAAID,IAAI,CAACC,MAAM,EAAE;IACpC,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;EAE5C,MAAMC,EAAE,GAA2B,EAAE;EACrC,IAAIC,GAAG,GAAG,CAAC;EACXL,KAAK,CAACC,IAAI,CAACT,OAAO,CAAEc,KAAK,IAAI;IAC3BF,EAAE,CAACE,KAAK,CAACX,IAAI,CAAC,GAAGM,IAAI,CAACI,GAAG,CAAC;IAC1BA,GAAG,IAAI,CAAC;EACV,CAAC,CAAC;EAEF,OAAOD,EAAE;AACX;AAfAN;AAiBA;AACA,SAAgBS,gBAAgB,CAC9BC,UAA4B,EACL;EAAA,IAAvBC,+EAAqB,EAAE;EAEvBD,UAAU,CAAChB,OAAO,CAAEkB,GAAG,IAAI;IACzB,IAAI,UAAU,IAAIA,GAAG,EAAE;MACrBH,gBAAgB,CAACG,GAAG,CAACD,QAAQ,EAAEA,QAAQ,CAACC,GAAG,CAACf,IAAI,CAAa,CAAC;KAC/D,MAAM;MACL,IAAIc,QAAQ,CAACC,GAAG,CAACf,IAAI,CAAC,KAAKgB,SAAS,EAAE;QACpC,MAAM,IAAIR,KAAK,CAAC,sBAAsBO,GAAG,CAACf,IAAI,gBAAgB,CAAC;;;EAGrE,CAAC,CAAC;AACJ;AAbAG;AAeA;AACA,SAAgBc,gBAAgB,CAACC,OAAgB;EAC/C,OAAOA,OAAO,YAAYC,mBAAS,GAAGD,OAAO,GAAG,IAAIC,mBAAS,CAACD,OAAO,CAAC;AACxE;AAFAf","names":["parseIdlErrors","idl","errors","Map","forEach","e","msg","name","set","code","exports","toInstruction","idlIx","args","length","Error","ix","idx","ixArg","validateAccounts","ixAccounts","accounts","acc","undefined","translateAddress","address","web3_js_1"],"sources":["../../../src/program/common.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}