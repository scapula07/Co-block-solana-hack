{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as anchor from '@project-serum/anchor';\nimport { useEffect, useMemo, useState } from 'react';\nimport { PublicKey } from \"@solana/web3.js\";\nimport coBlockIdl from \"../IDL/coblock.json\";\nimport { SystemProgram } from '@solana/web3.js';\nimport { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { useAnchorWallet, useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { devFilter } from '../utils';\nimport { TasksState } from \"../recoil/globalState\";\nimport { useRecoilState } from 'recoil';\nconst COBLOCK_PROGRAM_PUBKEY = new PublicKey(\"CJK7mK6KtpuZYvtnJiG48Ek6CwM7WNNuYza268nDXn54\");\nexport function useActions() {\n  _s();\n  const {\n    connection\n  } = useConnection();\n  const {\n    publicKey\n  } = useWallet();\n  const anchorWallet = useAnchorWallet();\n  const [lastTask, setLastTask] = useState(0);\n  const [task, setTasks] = useRecoilState(TasksState);\n  const program = useMemo(() => {\n    if (anchorWallet) {\n      const provider = new anchor.AnchorProvider(connection, anchorWallet, anchor.AnchorProvider.defaultOptions());\n      return new anchor.Program(coBlockIdl, COBLOCK_PROGRAM_PUBKEY, provider);\n    }\n  }, [connection, anchorWallet]);\n  useEffect(() => {\n    const findDevAccounts = async () => {\n      try {\n        const [devPda, devBump] = await findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n        const devAccount = await program.account.staffProfile.fetch(devPda);\n        console.log(devAccount);\n        if (devAccount) {\n          setLastTask(devAccount.lastTask);\n          const taskAccounts = await program.account.todoAccount.all([devFilter(publicKey.toString())]);\n          console.log(taskAccounts, \"taskAccounts\");\n        } else {}\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    findDevAccounts();\n  }, [publicKey, program]);\n  const getAllTask = async () => {\n    const taskAccounts = await program.account.taskAccount.all();\n    console.log(taskAccounts);\n    setTasks(taskAccounts);\n  };\n  const initializeUser = async () => {\n    try {\n      const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n      console.log(devPda, \"devpds\");\n      console.log(publicKey, \"publick\");\n      const tx = await program.methods.initializeStaff().accounts({\n        staffProfile: devPda,\n        authority: publicKey,\n        systemProgram: SystemProgram.programId\n      }).rpc();\n      console.log(tx, \"txxxxxx\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const addTask = async description => {\n    try {\n      const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n      const [taskPda, taskBump] = findProgramAddressSync([utf8.encode('TASK_STATE'), publicKey.toBuffer(), Uint8Array.from([lastTask])], program.programId);\n      const res = await program.methods.addTask(description).accounts({\n        staffProfile: devPda,\n        taskAccount: taskPda,\n        authority: publicKey,\n        systemProgram: SystemProgram.programId\n      }).rpc();\n      console.log(res, \"ress\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const markDone = async (taskPda, taskIdx) => {\n    try {\n      const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n      const res = await program.methods.markDone(taskIdx).accounts({\n        staffProfile: devPda,\n        taskAccount: taskPda,\n        authority: publicKey,\n        systemProgram: SystemProgram.programId\n      }).rpc();\n      console.log(res, \"ress\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const removeTask = async (taskPda, taskIdx) => {\n    try {\n      const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId);\n      await program.methods.removeTodo(taskIdx).accounts({\n        staffProfile: devPda,\n        taskAccount: taskPda,\n        authority: publicKey,\n        systemProgram: SystemProgram.programId\n      }).rpc();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return {\n    initializeUser,\n    addTask,\n    markDone,\n    removeTask,\n    getAllTask\n  };\n}\n_s(useActions, \"VPpjGgppz4i3k8S4X7JAp/zIG5Y=\", false, function () {\n  return [useConnection, useWallet, useAnchorWallet, useRecoilState];\n});","map":{"version":3,"names":["anchor","useEffect","useMemo","useState","PublicKey","coBlockIdl","SystemProgram","utf8","findProgramAddressSync","useAnchorWallet","useConnection","useWallet","devFilter","TasksState","useRecoilState","COBLOCK_PROGRAM_PUBKEY","useActions","connection","publicKey","anchorWallet","lastTask","setLastTask","task","setTasks","program","provider","AnchorProvider","defaultOptions","Program","findDevAccounts","devPda","devBump","encode","toBuffer","programId","devAccount","account","staffProfile","fetch","console","log","taskAccounts","todoAccount","all","toString","e","getAllTask","taskAccount","initializeUser","tx","methods","initializeStaff","accounts","authority","systemProgram","rpc","addTask","description","taskPda","taskBump","Uint8Array","from","res","markDone","taskIdx","removeTask","removeTodo"],"sources":["/Users/user/Desktop/solana-hack-1/client/src/Hooks/coblocks.utils.js"],"sourcesContent":["import * as anchor from '@project-serum/anchor'\nimport { useEffect, useMemo, useState } from 'react'\nimport { PublicKey } from \"@solana/web3.js\";\nimport coBlockIdl from \"../IDL/coblock.json\"\nimport { SystemProgram } from '@solana/web3.js'\nimport { utf8 } from '@project-serum/anchor/dist/cjs/utils/bytes'\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey'\nimport { useAnchorWallet, useConnection, useWallet } from '@solana/wallet-adapter-react'\nimport { devFilter } from '../utils';\nimport {TasksState } from \"../recoil/globalState\"\nimport { useRecoilState } from 'recoil';\n\nconst COBLOCK_PROGRAM_PUBKEY = new PublicKey(\"CJK7mK6KtpuZYvtnJiG48Ek6CwM7WNNuYza268nDXn54\");\n\nexport function useActions() {\n    \n\n    const { connection } = useConnection()\n    const { publicKey } = useWallet()\n    const anchorWallet = useAnchorWallet()\n  \n    const [lastTask, setLastTask] = useState(0)\n    const [task,setTasks] =useRecoilState(TasksState)\n\n    const program = useMemo(() => {\n        if (anchorWallet) {\n            const provider = new anchor.AnchorProvider(connection, anchorWallet, anchor.AnchorProvider.defaultOptions())\n            return new anchor.Program(coBlockIdl, COBLOCK_PROGRAM_PUBKEY, provider)\n        }\n    }, [connection, anchorWallet])\n\n\n\n\n    useEffect(() => {\n\n        const findDevAccounts = async () => {\n            try {\n                const [devPda, devBump] =await findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n                const devAccount = await program.account.staffProfile.fetch(devPda)\n\n                console.log(devAccount)\n\n                if (devAccount) {\n                    setLastTask(devAccount.lastTask)\n                       \n\n                    const taskAccounts = await program.account.todoAccount.all([devFilter(publicKey.toString())])\n                    console.log(taskAccounts,\"taskAccounts\")\n                }else{\n\n                }\n\n            }catch(e){\n                console.log(e)\n            }\n        }\n        findDevAccounts()\n    },[publicKey, program])\n\n   \n     const getAllTask=async()=>{\n        const taskAccounts = await program.account.taskAccount.all()\n        console.log(taskAccounts)\n        setTasks(taskAccounts)\n     }\n\n    const initializeUser = async () => {\n        \n        try{\n            const [devPda, devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n            console.log(devPda,\"devpds\")\n            console.log(publicKey,\"publick\")\n            const tx = await program.methods\n            .initializeStaff()\n            .accounts({\n                staffProfile: devPda,\n                authority: publicKey,\n                systemProgram: SystemProgram.programId,\n            })\n            .rpc()\n\n            console.log(tx,\"txxxxxx\")\n        }catch(e){\n            console.log(e)\n        }\n\n    }\n\n    const addTask = async (description) => {\n        try {\n                const [devPda,devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n                const [taskPda, taskBump] = findProgramAddressSync([utf8.encode('TASK_STATE'), publicKey.toBuffer(), Uint8Array.from([lastTask])], program.programId)\n\n                const res=     await program.methods\n                .addTask(description)\n                .accounts({\n                    staffProfile: devPda,\n                    taskAccount: taskPda,\n                    authority: publicKey,\n                    systemProgram: SystemProgram.programId,\n                })\n                .rpc()\n\n                console.log(res,\"ress\")\n\n        }catch(e){\n            console.log(e)\n        }\n        \n    }\n\n    const markDone = async (taskPda, taskIdx)=>  {\n           \n        try{\n\n            const [devPda,devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n            \n       const res=     await program.methods\n            .markDone(taskIdx)\n            .accounts({\n                staffProfile: devPda,\n                taskAccount: taskPda,\n                authority: publicKey,\n                systemProgram: SystemProgram.programId,\n            })\n            .rpc()\n       console.log(res,\"ress\")\n        }catch(e){\n            console.log(e)\n        }\n    }\n  \n\n    const removeTask = async (taskPda, taskIdx) => {\n         \n\n        try{\n\n            const [devPda,devBump] = findProgramAddressSync([utf8.encode('STAFF_STATE'), publicKey.toBuffer()], program.programId)\n            \n            await program.methods\n            .removeTodo(taskIdx)\n            .accounts({\n                staffProfile: devPda,\n                taskAccount: taskPda,\n                authority: publicKey,\n                systemProgram: SystemProgram.programId,\n            })\n            .rpc()\n\n\n        }catch(e){\n            console.log(e)\n        }\n    }\n\n    return {  initializeUser, addTask,markDone, removeTask ,getAllTask}\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}