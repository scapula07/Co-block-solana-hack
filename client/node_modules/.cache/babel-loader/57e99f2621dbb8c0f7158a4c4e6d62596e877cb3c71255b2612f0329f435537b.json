{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegistryTypes = exports.RegistryType = void 0;\nclass RegistryType {\n  constructor(type, tag) {\n    this.type = type;\n    this.tag = tag;\n    this.getTag = () => this.tag;\n    this.getType = () => this.type;\n  }\n}\nexports.RegistryType = RegistryType;\nexports.RegistryTypes = {\n  UUID: new RegistryType('uuid', 37),\n  BYTES: new RegistryType('bytes', undefined),\n  CRYPTO_HDKEY: new RegistryType('crypto-hdkey', 303),\n  CRYPTO_KEYPATH: new RegistryType('crypto-keypath', 304),\n  CRYPTO_COIN_INFO: new RegistryType('crypto-coin-info', 305),\n  CRYPTO_ECKEY: new RegistryType('crypto-eckey', 306),\n  CRYPTO_OUTPUT: new RegistryType('crypto-output', 308),\n  CRYPTO_PSBT: new RegistryType('crypto-psbt', 310),\n  CRYPTO_ACCOUNT: new RegistryType('crypto-account', 311),\n  CRYPTO_MULTI_ACCOUNTS: new RegistryType(\"crypto-multi-accounts\", 1103)\n};","map":{"version":3,"mappings":";;;;;;AAGA,MAAaA,YAAY;EACvBC,YAAoBC,IAAY,EAAUC,GAAY;IAAlC,SAAI,GAAJD,IAAI;IAAkB,QAAG,GAAHC,GAAG;IAC7C,WAAM,GAAG,MAAM,IAAI,CAACA,GAAG;IACvB,YAAO,GAAG,MAAM,IAAI,CAACD,IAAI;EAFgC;;AAD3DE;AAMaA,qBAAa,GAAG;EAC3BC,IAAI,EAAE,IAAIL,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC;EAClCM,KAAK,EAAE,IAAIN,YAAY,CAAC,OAAO,EAAEO,SAAS,CAAC;EAC3CC,YAAY,EAAE,IAAIR,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC;EACnDS,cAAc,EAAE,IAAIT,YAAY,CAAC,gBAAgB,EAAE,GAAG,CAAC;EACvDU,gBAAgB,EAAE,IAAIV,YAAY,CAAC,kBAAkB,EAAE,GAAG,CAAC;EAC3DW,YAAY,EAAE,IAAIX,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC;EACnDY,aAAa,EAAE,IAAIZ,YAAY,CAAC,eAAe,EAAE,GAAG,CAAC;EACrDa,WAAW,EAAE,IAAIb,YAAY,CAAC,aAAa,EAAE,GAAG,CAAC;EACjDc,cAAc,EAAE,IAAId,YAAY,CAAC,gBAAgB,EAAE,GAAG,CAAC;EACvDe,qBAAqB,EAAE,IAAIf,YAAY,CAAC,uBAAuB,EAAE,IAAI;CACtE","names":["RegistryType","constructor","type","tag","exports","UUID","BYTES","undefined","CRYPTO_HDKEY","CRYPTO_KEYPATH","CRYPTO_COIN_INFO","CRYPTO_ECKEY","CRYPTO_OUTPUT","CRYPTO_PSBT","CRYPTO_ACCOUNT","CRYPTO_MULTI_ACCOUNTS"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/@keystonehq/bc-ur-registry/src/RegistryType.ts"],"sourcesContent":["// cbor registry types: https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md\n// Map<name, tag>\n\nexport class RegistryType {\n  constructor(private type: string, private tag?: number) {}\n  getTag = () => this.tag;\n  getType = () => this.type;\n}\n\nexport const RegistryTypes = {\n  UUID: new RegistryType('uuid', 37),\n  BYTES: new RegistryType('bytes', undefined),\n  CRYPTO_HDKEY: new RegistryType('crypto-hdkey', 303),\n  CRYPTO_KEYPATH: new RegistryType('crypto-keypath', 304),\n  CRYPTO_COIN_INFO: new RegistryType('crypto-coin-info', 305),\n  CRYPTO_ECKEY: new RegistryType('crypto-eckey', 306),\n  CRYPTO_OUTPUT: new RegistryType('crypto-output', 308),\n  CRYPTO_PSBT: new RegistryType('crypto-psbt', 310),\n  CRYPTO_ACCOUNT: new RegistryType('crypto-account', 311),\n  CRYPTO_MULTI_ACCOUNTS: new RegistryType(\"crypto-multi-accounts\", 1103),\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}