{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chacha_1 = require(\"@stablelib/chacha\");\nvar poly1305_1 = require(\"@stablelib/poly1305\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar constant_time_1 = require(\"@stablelib/constant-time\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nvar ChaCha20Poly1305 = /** @class */function () {\n  /**\n   * Creates a new instance with the given 32-byte key.\n   */\n  function ChaCha20Poly1305(key) {\n    this.nonceLength = exports.NONCE_LENGTH;\n    this.tagLength = exports.TAG_LENGTH;\n    if (key.length !== exports.KEY_LENGTH) {\n      throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n    }\n    // Copy key.\n    this._key = new Uint8Array(key);\n  }\n  /**\n   * Encrypts and authenticates plaintext, authenticates associated data,\n   * and returns sealed ciphertext, which includes authentication tag.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n  ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Allocate space for counter, and set nonce as last bytes of it.\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length);\n    // Generate authentication key by taking first 32-bytes of stream.\n    // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n    // and it will get incremented after generating the block, which is\n    // exactly what we need: we only use the first 32 bytes of 64-byte\n    // ChaCha block and discard the next 32 bytes.\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4);\n    // Allocate space for sealed ciphertext.\n    var resultLength = plaintext.length + this.tagLength;\n    var result;\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    }\n    // Encrypt plaintext.\n    chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n    // Authenticate.\n    // XXX: can \"simplify\" here: pass full result (which is already padded\n    // due to zeroes prepared for tag), and ciphertext length instead of\n    // subarray of result.\n    this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n    // Cleanup.\n    wipe_1.wipe(counter);\n    return result;\n  };\n  /**\n   * Authenticates sealed ciphertext (which includes authentication tag) and\n   * associated data, decrypts ciphertext and returns decrypted plaintext.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If authentication fails, it returns null.\n   *\n   * If dst is given (it must be of ciphertext length minus tag length),\n   * the result will be put into it. Dst and plaintext must not overlap.\n   */\n  ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Sealed ciphertext should at least contain tag.\n    if (sealed.length < this.tagLength) {\n      // TODO(dchest): should we throw here instead?\n      return null;\n    }\n    // Allocate space for counter, and set nonce as last bytes of it.\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length);\n    // Generate authentication key by taking first 32-bytes of stream.\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4);\n    // Authenticate.\n    // XXX: can simplify and avoid allocation: since authenticate()\n    // already allocates tag (from Poly1305.digest(), it can return)\n    // it instead of copying to calculatedTag. But then in seal()\n    // we'll need to copy it.\n    var calculatedTag = new Uint8Array(this.tagLength);\n    this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n    // Constant-time compare tags and return null if they differ.\n    if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n      return null;\n    }\n    // Allocate space for decrypted plaintext.\n    var resultLength = sealed.length - this.tagLength;\n    var result;\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    }\n    // Decrypt.\n    chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n    // Cleanup.\n    wipe_1.wipe(counter);\n    return result;\n  };\n  ChaCha20Poly1305.prototype.clean = function () {\n    wipe_1.wipe(this._key);\n    return this;\n  };\n  ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n    // Initialize Poly1305 with authKey.\n    var h = new poly1305_1.Poly1305(authKey);\n    // Authenticate padded associated data.\n    if (associatedData) {\n      h.update(associatedData);\n      if (associatedData.length % 16 > 0) {\n        h.update(ZEROS.subarray(associatedData.length % 16));\n      }\n    }\n    // Authenticate padded ciphertext.\n    h.update(ciphertext);\n    if (ciphertext.length % 16 > 0) {\n      h.update(ZEROS.subarray(ciphertext.length % 16));\n    }\n    // Authenticate length of associated data.\n    // XXX: can avoid allocation here?\n    var length = new Uint8Array(8);\n    if (associatedData) {\n      binary_1.writeUint64LE(associatedData.length, length);\n    }\n    h.update(length);\n    // Authenticate length of ciphertext.\n    binary_1.writeUint64LE(ciphertext.length, length);\n    h.update(length);\n    // Get tag and copy it into tagOut.\n    var tag = h.digest();\n    for (var i = 0; i < tag.length; i++) {\n      tagOut[i] = tag[i];\n    }\n    // Cleanup.\n    h.clean();\n    wipe_1.wipe(tag);\n    wipe_1.wipe(length);\n  };\n  return ChaCha20Poly1305;\n}();\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;","map":{"version":3,"mappings":"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","names":["exports","ZEROS","Uint8Array","key","length","Error","_key","ChaCha20Poly1305","nonce","plaintext","associatedData","dst","counter","set","authKey","chacha_1","resultLength","tagLength","result","_authenticate","subarray","wipe_1","sealed","calculatedTag","constant_time_1","tagOut","ciphertext","h","poly1305_1","update","binary_1","tag","digest","i","clean"],"sources":["/Users/user/Desktop/solana-hack-1/solana-payroll/node_modules/@stablelib/chacha20poly1305/chacha20poly1305.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package chacha20poly1305 implements ChaCha20-Poly1305 AEAD.\n */\n\nimport { AEAD } from \"@stablelib/aead\";\nimport { streamXOR, stream } from \"@stablelib/chacha\";\nimport { Poly1305 } from \"@stablelib/poly1305\";\nimport { wipe } from \"@stablelib/wipe\";\nimport { writeUint64LE } from \"@stablelib/binary\";\nimport { equal } from \"@stablelib/constant-time\";\n\nexport const KEY_LENGTH = 32;\nexport const NONCE_LENGTH = 12;\nexport const TAG_LENGTH = 16;\n\nconst ZEROS = new Uint8Array(16);\n\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nexport class ChaCha20Poly1305 implements AEAD {\n    readonly nonceLength = NONCE_LENGTH;\n    readonly tagLength = TAG_LENGTH;\n\n    private _key: Uint8Array;\n\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    constructor(key: Uint8Array) {\n        if (key.length !== KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    seal(nonce: Uint8Array, plaintext: Uint8Array, associatedData?: Uint8Array,\n        dst?: Uint8Array): Uint8Array {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n\n        // Allocate space for counter, and set nonce as last bytes of it.\n        const counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        const authKey = new Uint8Array(32);\n        stream(this._key, counter, authKey, 4);\n\n        // Allocate space for sealed ciphertext.\n        const resultLength = plaintext.length + this.tagLength;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n\n        // Encrypt plaintext.\n        streamXOR(this._key, counter, plaintext, result, 4);\n\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length),\n            authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n\n        // Cleanup.\n        wipe(counter);\n\n        return result;\n    }\n\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */\n    open(nonce: Uint8Array, sealed: Uint8Array, associatedData?: Uint8Array,\n        dst?: Uint8Array): Uint8Array | null {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n\n        // Allocate space for counter, and set nonce as last bytes of it.\n        const counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n\n        // Generate authentication key by taking first 32-bytes of stream.\n        const authKey = new Uint8Array(32);\n        stream(this._key, counter, authKey, 4);\n\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        const calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey,\n            sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n\n        // Constant-time compare tags and return null if they differ.\n        if (!equal(calculatedTag,\n            sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n\n        // Allocate space for decrypted plaintext.\n        const resultLength = sealed.length - this.tagLength;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n\n        // Decrypt.\n        streamXOR(this._key, counter,\n            sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n\n        // Cleanup.\n        wipe(counter);\n\n        return result;\n    }\n\n    clean(): this {\n        wipe(this._key);\n        return this;\n    }\n\n    private _authenticate(tagOut: Uint8Array, authKey: Uint8Array,\n        ciphertext: Uint8Array, associatedData?: Uint8Array) {\n\n        // Initialize Poly1305 with authKey.\n        const h = new Poly1305(authKey);\n\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        const length = new Uint8Array(8);\n        if (associatedData) {\n            writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n\n        // Authenticate length of ciphertext.\n        writeUint64LE(ciphertext.length, length);\n        h.update(length);\n\n        // Get tag and copy it into tagOut.\n        const tag = h.digest();\n        for (let i = 0; i < tag.length; i++) {\n            tagOut[i] = tag[i];\n        }\n\n        // Cleanup.\n        h.clean();\n        wipe(tag);\n        wipe(length);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}