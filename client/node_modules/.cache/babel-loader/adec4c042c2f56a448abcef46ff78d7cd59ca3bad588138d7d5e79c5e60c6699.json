{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSdp = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../../Logger\");\nconst MediaSection_1 = require(\"./MediaSection\");\nconst logger = new Logger_1.Logger('RemoteSdp');\nclass RemoteSdp {\n  constructor(_ref) {\n    let {\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      plainRtpParameters,\n      planB = false\n    } = _ref;\n    // MediaSection instances with same order as in the SDP.\n    this._mediaSections = [];\n    // MediaSection indices indexed by MID.\n    this._midToIndex = new Map();\n    this._iceParameters = iceParameters;\n    this._iceCandidates = iceCandidates;\n    this._dtlsParameters = dtlsParameters;\n    this._sctpParameters = sctpParameters;\n    this._plainRtpParameters = plainRtpParameters;\n    this._planB = planB;\n    this._sdpObject = {\n      version: 0,\n      origin: {\n        address: '0.0.0.0',\n        ipVer: 4,\n        netType: 'IN',\n        sessionId: 10000,\n        sessionVersion: 0,\n        username: 'mediasoup-client'\n      },\n      name: '-',\n      timing: {\n        start: 0,\n        stop: 0\n      },\n      media: []\n    };\n    // If ICE parameters are given, add ICE-Lite indicator.\n    if (iceParameters && iceParameters.iceLite) {\n      this._sdpObject.icelite = 'ice-lite';\n    }\n    // If DTLS parameters are given, assume WebRTC and BUNDLE.\n    if (dtlsParameters) {\n      this._sdpObject.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n      };\n      // NOTE: We take the latest fingerprint.\n      const numFingerprints = this._dtlsParameters.fingerprints.length;\n      this._sdpObject.fingerprint = {\n        type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n        hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n      };\n      this._sdpObject.groups = [{\n        type: 'BUNDLE',\n        mids: ''\n      }];\n    }\n    // If there are plain RPT parameters, override SDP origin.\n    if (plainRtpParameters) {\n      this._sdpObject.origin.address = plainRtpParameters.ip;\n      this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n    }\n  }\n  updateIceParameters(iceParameters) {\n    logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n    this._iceParameters = iceParameters;\n    this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n    for (const mediaSection of this._mediaSections) {\n      mediaSection.setIceParameters(iceParameters);\n    }\n  }\n  updateDtlsRole(role) {\n    logger.debug('updateDtlsRole() [role:%s]', role);\n    this._dtlsParameters.role = role;\n    for (const mediaSection of this._mediaSections) {\n      mediaSection.setDtlsRole(role);\n    }\n  }\n  getNextMediaSectionIdx() {\n    // If a closed media section is found, return its index.\n    for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n      const mediaSection = this._mediaSections[idx];\n      if (mediaSection.closed) return {\n        idx,\n        reuseMid: mediaSection.mid\n      };\n    }\n    // If no closed media section is found, return next one.\n    return {\n      idx: this._mediaSections.length\n    };\n  }\n  send(_ref2) {\n    let {\n      offerMediaObject,\n      reuseMid,\n      offerRtpParameters,\n      answerRtpParameters,\n      codecOptions,\n      extmapAllowMixed = false\n    } = _ref2;\n    const mediaSection = new MediaSection_1.AnswerMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      planB: this._planB,\n      offerMediaObject,\n      offerRtpParameters,\n      answerRtpParameters,\n      codecOptions,\n      extmapAllowMixed\n    });\n    // Unified-Plan with closed media section replacement.\n    if (reuseMid) {\n      this._replaceMediaSection(mediaSection, reuseMid);\n    }\n    // Unified-Plan or Plan-B with different media kind.\n    else if (!this._midToIndex.has(mediaSection.mid)) {\n      this._addMediaSection(mediaSection);\n    }\n    // Plan-B with same media kind.\n    else {\n      this._replaceMediaSection(mediaSection);\n    }\n  }\n  receive(_ref3) {\n    let {\n      mid,\n      kind,\n      offerRtpParameters,\n      streamId,\n      trackId\n    } = _ref3;\n    const idx = this._midToIndex.get(mid);\n    let mediaSection;\n    if (idx !== undefined) mediaSection = this._mediaSections[idx];\n    // Unified-Plan or different media kind.\n    if (!mediaSection) {\n      mediaSection = new MediaSection_1.OfferMediaSection({\n        iceParameters: this._iceParameters,\n        iceCandidates: this._iceCandidates,\n        dtlsParameters: this._dtlsParameters,\n        plainRtpParameters: this._plainRtpParameters,\n        planB: this._planB,\n        mid,\n        kind,\n        offerRtpParameters,\n        streamId,\n        trackId\n      });\n      // Let's try to recycle a closed media section (if any).\n      // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n      const oldMediaSection = this._mediaSections.find(m => m.closed);\n      if (oldMediaSection) {\n        this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n      } else {\n        this._addMediaSection(mediaSection);\n      }\n    }\n    // Plan-B.\n    else {\n      mediaSection.planBReceive({\n        offerRtpParameters,\n        streamId,\n        trackId\n      });\n      this._replaceMediaSection(mediaSection);\n    }\n  }\n  pauseMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.pause();\n  }\n  resumeSendingMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.resume();\n  }\n  resumeReceivingMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.resume();\n  }\n  disableMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.disable();\n  }\n  /**\n   * Closes media section. Returns true if the given MID corresponds to a m\n   * section that has been indeed closed. False otherwise.\n   *\n   * NOTE: Closing the first m section is a pain since it invalidates the bundled\n   * transport, so instead closing it we just disable it.\n   */\n  closeMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    // NOTE: Closing the first m section is a pain since it invalidates the\n    // bundled transport, so let's avoid it.\n    if (mid === this._firstMid) {\n      logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n      this.disableMediaSection(mid);\n      return false;\n    }\n    mediaSection.close();\n    // Regenerate BUNDLE mids.\n    this._regenerateBundleMids();\n    return true;\n  }\n  planBStopReceiving(_ref4) {\n    let {\n      mid,\n      offerRtpParameters\n    } = _ref4;\n    const idx = this._midToIndex.get(mid);\n    if (idx === undefined) {\n      throw new Error(`no media section found with mid '${mid}'`);\n    }\n    const mediaSection = this._mediaSections[idx];\n    mediaSection.planBStopReceiving({\n      offerRtpParameters\n    });\n    this._replaceMediaSection(mediaSection);\n  }\n  sendSctpAssociation(_ref5) {\n    let {\n      offerMediaObject\n    } = _ref5;\n    const mediaSection = new MediaSection_1.AnswerMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      sctpParameters: this._sctpParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      offerMediaObject\n    });\n    this._addMediaSection(mediaSection);\n  }\n  receiveSctpAssociation() {\n    let {\n      oldDataChannelSpec = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const mediaSection = new MediaSection_1.OfferMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      sctpParameters: this._sctpParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      mid: 'datachannel',\n      kind: 'application',\n      oldDataChannelSpec\n    });\n    this._addMediaSection(mediaSection);\n  }\n  getSdp() {\n    // Increase SDP version.\n    this._sdpObject.origin.sessionVersion++;\n    return sdpTransform.write(this._sdpObject);\n  }\n  _addMediaSection(newMediaSection) {\n    if (!this._firstMid) this._firstMid = newMediaSection.mid;\n    // Add to the vector.\n    this._mediaSections.push(newMediaSection);\n    // Add to the map.\n    this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n    // Add to the SDP object.\n    this._sdpObject.media.push(newMediaSection.getObject());\n    // Regenerate BUNDLE mids.\n    this._regenerateBundleMids();\n  }\n  _replaceMediaSection(newMediaSection, reuseMid) {\n    // Store it in the map.\n    if (typeof reuseMid === 'string') {\n      const idx = this._midToIndex.get(reuseMid);\n      if (idx === undefined) {\n        throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n      }\n      const oldMediaSection = this._mediaSections[idx];\n      // Replace the index in the vector with the new media section.\n      this._mediaSections[idx] = newMediaSection;\n      // Update the map.\n      this._midToIndex.delete(oldMediaSection.mid);\n      this._midToIndex.set(newMediaSection.mid, idx);\n      // Update the SDP object.\n      this._sdpObject.media[idx] = newMediaSection.getObject();\n      // Regenerate BUNDLE mids.\n      this._regenerateBundleMids();\n    } else {\n      const idx = this._midToIndex.get(newMediaSection.mid);\n      if (idx === undefined) {\n        throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n      }\n      // Replace the index in the vector with the new media section.\n      this._mediaSections[idx] = newMediaSection;\n      // Update the SDP object.\n      this._sdpObject.media[idx] = newMediaSection.getObject();\n    }\n  }\n  _findMediaSection(mid) {\n    const idx = this._midToIndex.get(mid);\n    if (idx === undefined) {\n      throw new Error(`no media section found with mid '${mid}'`);\n    }\n    return this._mediaSections[idx];\n  }\n  _regenerateBundleMids() {\n    if (!this._dtlsParameters) return;\n    this._sdpObject.groups[0].mids = this._mediaSections.filter(mediaSection => !mediaSection.closed).map(mediaSection => mediaSection.mid).join(' ');\n  }\n}\nexports.RemoteSdp = RemoteSdp;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","RemoteSdp","sdpTransform","require","Logger_1","MediaSection_1","logger","Logger","constructor","iceParameters","iceCandidates","dtlsParameters","sctpParameters","plainRtpParameters","planB","_mediaSections","_midToIndex","Map","_iceParameters","_iceCandidates","_dtlsParameters","_sctpParameters","_plainRtpParameters","_planB","_sdpObject","version","origin","address","ipVer","netType","sessionId","sessionVersion","username","name","timing","start","stop","media","iceLite","icelite","msidSemantic","semantic","token","numFingerprints","fingerprints","length","fingerprint","type","algorithm","hash","groups","mids","ip","ipVersion","updateIceParameters","debug","mediaSection","setIceParameters","updateDtlsRole","role","setDtlsRole","getNextMediaSectionIdx","idx","closed","reuseMid","mid","send","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","extmapAllowMixed","AnswerMediaSection","_replaceMediaSection","has","_addMediaSection","receive","kind","streamId","trackId","OfferMediaSection","oldMediaSection","find","planBReceive","pauseMediaSection","_findMediaSection","pause","resumeSendingMediaSection","resume","resumeReceivingMediaSection","disableMediaSection","disable","closeMediaSection","_firstMid","close","_regenerateBundleMids","planBStopReceiving","Error","sendSctpAssociation","receiveSctpAssociation","oldDataChannelSpec","getSdp","write","newMediaSection","push","set","getObject","delete","filter","map","join"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSdp = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../../Logger\");\nconst MediaSection_1 = require(\"./MediaSection\");\nconst logger = new Logger_1.Logger('RemoteSdp');\nclass RemoteSdp {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {\n        // MediaSection instances with same order as in the SDP.\n        this._mediaSections = [];\n        // MediaSection indices indexed by MID.\n        this._midToIndex = new Map();\n        this._iceParameters = iceParameters;\n        this._iceCandidates = iceCandidates;\n        this._dtlsParameters = dtlsParameters;\n        this._sctpParameters = sctpParameters;\n        this._plainRtpParameters = plainRtpParameters;\n        this._planB = planB;\n        this._sdpObject =\n            {\n                version: 0,\n                origin: {\n                    address: '0.0.0.0',\n                    ipVer: 4,\n                    netType: 'IN',\n                    sessionId: 10000,\n                    sessionVersion: 0,\n                    username: 'mediasoup-client'\n                },\n                name: '-',\n                timing: { start: 0, stop: 0 },\n                media: []\n            };\n        // If ICE parameters are given, add ICE-Lite indicator.\n        if (iceParameters && iceParameters.iceLite) {\n            this._sdpObject.icelite = 'ice-lite';\n        }\n        // If DTLS parameters are given, assume WebRTC and BUNDLE.\n        if (dtlsParameters) {\n            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };\n            // NOTE: We take the latest fingerprint.\n            const numFingerprints = this._dtlsParameters.fingerprints.length;\n            this._sdpObject.fingerprint =\n                {\n                    type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n                    hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n                };\n            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];\n        }\n        // If there are plain RPT parameters, override SDP origin.\n        if (plainRtpParameters) {\n            this._sdpObject.origin.address = plainRtpParameters.ip;\n            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n        }\n    }\n    updateIceParameters(iceParameters) {\n        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n        this._iceParameters = iceParameters;\n        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setIceParameters(iceParameters);\n        }\n    }\n    updateDtlsRole(role) {\n        logger.debug('updateDtlsRole() [role:%s]', role);\n        this._dtlsParameters.role = role;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setDtlsRole(role);\n        }\n    }\n    getNextMediaSectionIdx() {\n        // If a closed media section is found, return its index.\n        for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n            const mediaSection = this._mediaSections[idx];\n            if (mediaSection.closed)\n                return { idx, reuseMid: mediaSection.mid };\n        }\n        // If no closed media section is found, return next one.\n        return { idx: this._mediaSections.length };\n    }\n    send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            planB: this._planB,\n            offerMediaObject,\n            offerRtpParameters,\n            answerRtpParameters,\n            codecOptions,\n            extmapAllowMixed\n        });\n        // Unified-Plan with closed media section replacement.\n        if (reuseMid) {\n            this._replaceMediaSection(mediaSection, reuseMid);\n        }\n        // Unified-Plan or Plan-B with different media kind.\n        else if (!this._midToIndex.has(mediaSection.mid)) {\n            this._addMediaSection(mediaSection);\n        }\n        // Plan-B with same media kind.\n        else {\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    receive({ mid, kind, offerRtpParameters, streamId, trackId }) {\n        const idx = this._midToIndex.get(mid);\n        let mediaSection;\n        if (idx !== undefined)\n            mediaSection = this._mediaSections[idx];\n        // Unified-Plan or different media kind.\n        if (!mediaSection) {\n            mediaSection = new MediaSection_1.OfferMediaSection({\n                iceParameters: this._iceParameters,\n                iceCandidates: this._iceCandidates,\n                dtlsParameters: this._dtlsParameters,\n                plainRtpParameters: this._plainRtpParameters,\n                planB: this._planB,\n                mid,\n                kind,\n                offerRtpParameters,\n                streamId,\n                trackId\n            });\n            // Let's try to recycle a closed media section (if any).\n            // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n            const oldMediaSection = this._mediaSections.find((m) => (m.closed));\n            if (oldMediaSection) {\n                this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n            }\n            else {\n                this._addMediaSection(mediaSection);\n            }\n        }\n        // Plan-B.\n        else {\n            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    pauseMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.pause();\n    }\n    resumeSendingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n    }\n    resumeReceivingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n    }\n    disableMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.disable();\n    }\n    /**\n     * Closes media section. Returns true if the given MID corresponds to a m\n     * section that has been indeed closed. False otherwise.\n     *\n     * NOTE: Closing the first m section is a pain since it invalidates the bundled\n     * transport, so instead closing it we just disable it.\n     */\n    closeMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        // NOTE: Closing the first m section is a pain since it invalidates the\n        // bundled transport, so let's avoid it.\n        if (mid === this._firstMid) {\n            logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n            this.disableMediaSection(mid);\n            return false;\n        }\n        mediaSection.close();\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n        return true;\n    }\n    planBStopReceiving({ mid, offerRtpParameters }) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        const mediaSection = this._mediaSections[idx];\n        mediaSection.planBStopReceiving({ offerRtpParameters });\n        this._replaceMediaSection(mediaSection);\n    }\n    sendSctpAssociation({ offerMediaObject }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            offerMediaObject\n        });\n        this._addMediaSection(mediaSection);\n    }\n    receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {\n        const mediaSection = new MediaSection_1.OfferMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            mid: 'datachannel',\n            kind: 'application',\n            oldDataChannelSpec\n        });\n        this._addMediaSection(mediaSection);\n    }\n    getSdp() {\n        // Increase SDP version.\n        this._sdpObject.origin.sessionVersion++;\n        return sdpTransform.write(this._sdpObject);\n    }\n    _addMediaSection(newMediaSection) {\n        if (!this._firstMid)\n            this._firstMid = newMediaSection.mid;\n        // Add to the vector.\n        this._mediaSections.push(newMediaSection);\n        // Add to the map.\n        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n        // Add to the SDP object.\n        this._sdpObject.media.push(newMediaSection.getObject());\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n    }\n    _replaceMediaSection(newMediaSection, reuseMid) {\n        // Store it in the map.\n        if (typeof reuseMid === 'string') {\n            const idx = this._midToIndex.get(reuseMid);\n            if (idx === undefined) {\n                throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n            }\n            const oldMediaSection = this._mediaSections[idx];\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the map.\n            this._midToIndex.delete(oldMediaSection.mid);\n            this._midToIndex.set(newMediaSection.mid, idx);\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n            // Regenerate BUNDLE mids.\n            this._regenerateBundleMids();\n        }\n        else {\n            const idx = this._midToIndex.get(newMediaSection.mid);\n            if (idx === undefined) {\n                throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n            }\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n        }\n    }\n    _findMediaSection(mid) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        return this._mediaSections[idx];\n    }\n    _regenerateBundleMids() {\n        if (!this._dtlsParameters)\n            return;\n        this._sdpObject.groups[0].mids = this._mediaSections\n            .filter((mediaSection) => !mediaSection.closed)\n            .map((mediaSection) => mediaSection.mid)\n            .join(' ');\n    }\n}\nexports.RemoteSdp = RemoteSdp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}