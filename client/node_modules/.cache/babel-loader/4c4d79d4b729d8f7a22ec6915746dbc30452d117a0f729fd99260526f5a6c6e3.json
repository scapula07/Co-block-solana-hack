{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Chrome70 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome70');\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\nclass Chrome70 extends HandlerInterface_1.HandlerInterface {\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new Chrome70();\n  }\n  constructor() {\n    super();\n    // Map of RTCTransceivers indexed by MID.\n    this._mapMidTransceiver = new Map();\n    // Local stream for sending.\n    this._sendStream = new MediaStream();\n    // Whether a DataChannel m=application section has been created.\n    this._hasDataChannelMediaSection = false;\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\n    this._nextSendSctpStreamId = 0;\n    // Got transport local and remote parameters.\n    this._transportReady = false;\n  }\n  get name() {\n    return 'Chrome70';\n  }\n  close() {\n    logger.debug('close()');\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n    try {\n      pc.addTransceiver('audio');\n      pc.addTransceiver('video');\n      const offer = await pc.createOffer();\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run(_ref) {\n    let {\n      direction,\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      iceServers,\n      iceTransportPolicy,\n      additionalSettings,\n      proprietaryConstraints,\n      extendedRtpCapabilities\n    } = _ref;\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n      this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n    }\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers || [],\n      iceTransportPolicy: iceTransportPolicy || 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            this.emit('@connectionstatechange', 'connecting');\n            break;\n          case 'connected':\n          case 'completed':\n            this.emit('@connectionstatechange', 'connected');\n            break;\n          case 'failed':\n            this.emit('@connectionstatechange', 'failed');\n            break;\n          case 'disconnected':\n            this.emit('@connectionstatechange', 'disconnected');\n            break;\n          case 'closed':\n            this.emit('@connectionstatechange', 'closed');\n            break;\n        }\n      });\n    }\n  }\n  async updateIceServers(iceServers) {\n    logger.debug('updateIceServers()');\n    const configuration = this._pc.getConfiguration();\n    configuration.iceServers = iceServers;\n    this._pc.setConfiguration(configuration);\n  }\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) return;\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    return this._pc.getStats();\n  }\n  async send(_ref2) {\n    let {\n      track,\n      encodings,\n      codecOptions,\n      codec\n    } = _ref2;\n    var _a;\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n    const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream]\n    });\n    let offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    let offerMediaObject;\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n        localSdpObject\n      });\n    }\n    if (encodings && encodings.length > 1) {\n      logger.debug('send() | enabling legacy simulcast');\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: encodings.length\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    // Special case for VP9 with SVC.\n    let hackVp9Svc = false;\n    const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n    if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n      logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n      hackVp9Svc = true;\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: layers.spatialLayers\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    // If encodings are given, apply them now.\n    if (encodings) {\n      logger.debug('send() | applying given encodings');\n      const parameters = transceiver.sender.getParameters();\n      for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {\n        const encoding = parameters.encodings[idx];\n        const desiredEncoding = encodings[idx];\n        // Should not happen but just in case.\n        if (!desiredEncoding) break;\n        parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);\n      }\n      await transceiver.sender.setParameters(parameters);\n    }\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings.\n    sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n      offerMediaObject\n    });\n    // Complete encodings with given values.\n    if (encodings) {\n      for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n        if (encodings[idx]) Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n      }\n    }\n    // Hack for VP9 SVC.\n    if (hackVp9Svc) {\n      sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];\n    }\n    // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n    // each encoding.\n    if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n      for (const encoding of sendingRtpParameters.encodings) {\n        encoding.scalabilityMode = 'S1T3';\n      }\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n  async stopSending(localId) {\n    this.assertSendDirection();\n    logger.debug('stopSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    transceiver.sender.replaceTrack(null);\n    this._pc.removeTrack(transceiver.sender);\n    const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n    if (mediaSectionClosed) {\n      try {\n        transceiver.stop();\n      } catch (error) {}\n    }\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    this._mapMidTransceiver.delete(localId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async pauseSending(localId) {\n    // Unimplemented.\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async resumeSending(localId) {\n    // Unimplemented.\n  }\n  async replaceTrack(localId, track) {\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    await transceiver.sender.replaceTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) encoding.active = true;else encoding.active = false;\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await transceiver.sender.setParameters(parameters);\n  }\n  async getSenderStats(localId) {\n    this.assertSendDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.sender.getStats();\n  }\n  async sendDataChannel(_ref3) {\n    let {\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      label,\n      protocol\n    } = _ref3;\n    var _a;\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmitTime: maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    var _a;\n    this.assertRecvDirection();\n    const results = [];\n    const mapLocalId = new Map();\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n      mapLocalId.set(trackId, localId);\n      this._remoteSdp.receive({\n        mid: localId,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId || rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        rtpParameters\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n    }\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        trackId\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n      if (!transceiver) throw new Error('new RTCRtpTransceiver not found');\n      // Store in the map.\n      this._mapMidTransceiver.set(localId, transceiver);\n      results.push({\n        localId,\n        track: transceiver.receiver.track,\n        rtpReceiver: transceiver.receiver\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n      this._remoteSdp.closeMediaSection(transceiver.mid);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const localId of localIds) {\n      this._mapMidTransceiver.delete(localId);\n    }\n  }\n  async pauseReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async resumeReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async getReceiverStats(localId) {\n    this.assertRecvDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) throw new Error('associated RTCRtpTransceiver not found');\n    return transceiver.receiver.getStats();\n  }\n  async receiveDataChannel(_ref4) {\n    let {\n      sctpStreamParameters,\n      label,\n      protocol\n    } = _ref4;\n    var _a;\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmitTime: maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport(_ref5) {\n    let {\n      localDtlsRole,\n      localSdpObject\n    } = _ref5;\n    if (!localSdpObject) localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.Chrome70 = Chrome70;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","Chrome70","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","createFactory","constructor","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","name","close","debug","_pc","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","addTransceiver","offer","createOffer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","_direction","_remoteSdp","RemoteSdp","_sendingRtpParametersByKind","audio","getSendingRtpParameters","video","_sendingRemoteRtpParametersByKind","getSendingRemoteRtpParameters","role","_forcedLocalDtlsRole","connectionState","addEventListener","warn","iceConnectionState","updateIceServers","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","_a","assertSendDirection","kind","id","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","localSdpObject","offerMediaObject","setupTransport","localDtlsRole","length","media","idx","addLegacySimulcast","write","hackVp9Svc","layers","scalabilityMode","spatialLayers","mimeType","toLowerCase","parameters","sender","getParameters","encoding","desiredEncoding","assign","setParameters","localId","mid","localDescription","rtcp","cname","getCname","getRtpEncodings","reuseMid","offerRtpParameters","answerRtpParameters","set","rtpParameters","rtpSender","stopSending","Error","replaceTrack","removeTrack","mediaSectionClosed","closeMediaSection","stop","delete","pauseSending","resumeSending","setMaxSpatialLayer","spatialLayer","forEach","active","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","maxRetransmitTime","dataChannel","createDataChannel","find","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","answerMediaObject","applyCodecParameters","getTransceivers","t","push","receiver","rtpReceiver","stopReceiving","localIds","pauseReceiving","resumeReceiving","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit"],"sources":["/Users/user/Desktop/solana-hack-1/client/node_modules/mediasoup-client/lib/handlers/Chrome70.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Chrome70 = void 0;\nconst sdpTransform = __importStar(require(\"sdp-transform\"));\nconst Logger_1 = require(\"../Logger\");\nconst utils = __importStar(require(\"../utils\"));\nconst ortc = __importStar(require(\"../ortc\"));\nconst sdpCommonUtils = __importStar(require(\"./sdp/commonUtils\"));\nconst sdpUnifiedPlanUtils = __importStar(require(\"./sdp/unifiedPlanUtils\"));\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome70');\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass Chrome70 extends HandlerInterface_1.HandlerInterface {\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Chrome70();\n    }\n    constructor() {\n        super();\n        // Map of RTCTransceivers indexed by MID.\n        this._mapMidTransceiver = new Map();\n        // Local stream for sending.\n        this._sendStream = new MediaStream();\n        // Whether a DataChannel m=application section has been created.\n        this._hasDataChannelMediaSection = false;\n        // Sending DataChannel id value counter. Incremented for each new DataChannel.\n        this._nextSendSctpStreamId = 0;\n        // Got transport local and remote parameters.\n        this._transportReady = false;\n    }\n    get name() {\n        return 'Chrome70';\n    }\n    close() {\n        logger.debug('close()');\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan'\n        });\n        try {\n            pc.addTransceiver('audio');\n            pc.addTransceiver('video');\n            const offer = await pc.createOffer();\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters\n        });\n        this._sendingRtpParametersByKind =\n            {\n                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n            };\n        this._sendingRemoteRtpParametersByKind =\n            {\n                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n            };\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n            this._forcedLocalDtlsRole = dtlsParameters.role === 'server'\n                ? 'client'\n                : 'server';\n        }\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers || [],\n            iceTransportPolicy: iceTransportPolicy || 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan',\n            ...additionalSettings\n        }, proprietaryConstraints);\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n                switch (this._pc.iceConnectionState) {\n                    case 'checking':\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    case 'connected':\n                    case 'completed':\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    case 'failed':\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    case 'disconnected':\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    case 'closed':\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                }\n            });\n        }\n    }\n    async updateIceServers(iceServers) {\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady)\n            return;\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec }) {\n        var _a;\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n        // This may throw.\n        sendingRemoteRtpParameters.codecs =\n            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });\n        let offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        let offerMediaObject;\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        if (encodings && encodings.length > 1) {\n            logger.debug('send() | enabling legacy simulcast');\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: encodings.length\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        // Special case for VP9 with SVC.\n        let hackVp9Svc = false;\n        const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n        if (encodings &&\n            encodings.length === 1 &&\n            layers.spatialLayers > 1 &&\n            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n            logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: layers.spatialLayers\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // If encodings are given, apply them now.\n        if (encodings) {\n            logger.debug('send() | applying given encodings');\n            const parameters = transceiver.sender.getParameters();\n            for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {\n                const encoding = parameters.encodings[idx];\n                const desiredEncoding = encodings[idx];\n                // Should not happen but just in case.\n                if (!desiredEncoding)\n                    break;\n                parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);\n            }\n            await transceiver.sender.setParameters(parameters);\n        }\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname =\n            sdpCommonUtils.getCname({ offerMediaObject });\n        // Set RTP encodings.\n        sendingRtpParameters.encodings =\n            sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n        // Complete encodings with given values.\n        if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n                if (encodings[idx])\n                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n            }\n        }\n        // Hack for VP9 SVC.\n        if (hackVp9Svc) {\n            sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                encoding.scalabilityMode = 'S1T3';\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n        };\n    }\n    async stopSending(localId) {\n        this.assertSendDirection();\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        transceiver.sender.replaceTrack(null);\n        this._pc.removeTrack(transceiver.sender);\n        const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n        if (mediaSectionClosed) {\n            try {\n                transceiver.stop();\n            }\n            catch (error) { }\n        }\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        // Unimplemented.\n    }\n    async replaceTrack(localId, track) {\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer)\n                encoding.active = true;\n            else\n                encoding.active = false;\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n        var _a;\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media\n                .find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        var _a;\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId || rtpParameters.rtcp.cname,\n                trackId\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media\n                .find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject\n            });\n        }\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                localSdpObject\n            });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver)\n                throw new Error('new RTCRtpTransceiver not found');\n            // Store in the map.\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver\n            });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver)\n                throw new Error('associated RTCRtpTransceiver not found');\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async resumeReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async getReceiverStats(localId) {\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver)\n            throw new Error('associated RTCRtpTransceiver not found');\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {\n        var _a;\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({\n                    localDtlsRole: (_a = this._forcedLocalDtlsRole) !== null && _a !== void 0 ? _a : 'client',\n                    localSdpObject\n                });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject }) {\n        if (!localSdpObject)\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Chrome70 = Chrome70;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}